/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { DependencyProperty } from "igniteui-react-core";
import { SplineType_$type } from "./SplineType";
import { AxisRange } from "./AxisRange";
import { Array_$type, typeCast, Point_$type, enumGetBox, markType, markDep } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ISortingAxis_$type } from "./ISortingAxis";
import { CollisionAvoider } from "./CollisionAvoider";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { ScalerParams } from "./ScalerParams";
import { SafeSortedReadOnlyDoubleCollection } from "./SafeSortedReadOnlyDoubleCollection";
import { Numeric } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_ } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let SplineSeriesBase = /*@__PURE__*/ (() => {
    class SplineSeriesBase extends HorizontalAnchoredCategorySeries {
        constructor() {
            super(...arguments);
            this.u8 = null;
            this.ve = NaN;
            this.vd = NaN;
        }
        gu() {
            if (!isNaN_(this.gt)) {
                return super.gu();
            }
            return this.u9.db();
        }
        bx() {
            return new SplineSeriesBaseView(this);
        }
        ly(a) {
            super.ly(a);
            this.u9 = a;
        }
        mn(a) {
            super.mn(a);
            this.vb = true;
        }
        ap(a) {
            if (!this.vb || this.u8 == null || this.u8.length == 0) {
                return super.ap(a);
            }
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                return new AxisRange(0, this.valueColumn.count - 1);
            }
            this.vl(this.u9);
            if (this.u8 == null || this.u8.length == 0) {
                return null;
            }
            if (a == this.fetchYAxis()) {
                if (isNaN_(this.vh) || isNaN_(this.vi)) {
                    return null;
                }
                return new AxisRange(this.vi, this.vh);
            }
            return null;
        }
        get_de() {
            return true;
        }
        u6(a) {
            if (a.cr.d == 0) {
                return null;
            }
            let b = new List$1(Array_$type, 0);
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = 0;
            let g = 0;
            let h = 0;
            let i = this;
            let j = typeCast(CategoryAxisBase.$, i.fetchXAxis());
            let k = i.pq(this.b0);
            let l = i.ck;
            if (c.isEmpty || d.isEmpty || j == null || l == null || l.count == 0) {
                f = 0;
                return null;
            }
            let m = this.ft;
            let n = typeCast(ISortingAxis_$type, j);
            if (n == null || n.i$b == null) {
                let o = new ScalerParams(0, c, d, j.cg, e);
                let p = 0;
                let q = j.lf - 1;
                let r = Math.floor((q - p + 1) * m / k.width);
                f = truncate(Math.max(1, r));
                g = truncate(Math.max(0, Math.floor(p / f) - 1));
                h = truncate(Math.ceil(q / f));
            }
            else {
                g = 0;
                h = j.lf - 1;
                f = 1;
            }
            if (n != null && n.i$b.count != this.ck.count) {
                return null;
            }
            this.vl(a);
            let s = truncate(Math.ceil(d.width / (h - g)));
            let t = new CollisionAvoider();
            if (n != null) {
                return this.u7(a);
            }
            let u = (v) => v;
            let v = (w) => this.valueColumn.item(w);
            let w = a;
            w.c6();
            for (let x = g; x <= h; ++x) {
                let y = null;
                if (f == 1) {
                    if (x >= (this.valueColumn.count - 1)) {
                        break;
                    }
                    let z = u(x);
                    let aa = v(x);
                    let ab = u(x + 1);
                    let ac = v(x + 1);
                    let ad = ab - z;
                    let ae = this.u8[x];
                    let af = this.u8[x + 1];
                    b.add([aa, ac]);
                    for (let ag = 1; ag < s; ++ag) {
                        let ah = z + ad * ag / s;
                        let ai = (ab - ah) / ad;
                        let aj = (ah - z) / ad;
                        let ak = ai * aa + aj * ac + ((ai * ai * ai - ai) * ae + (aj * aj * aj - aj) * af) * (ad * ad) / 6;
                        b.add([ak, ak]);
                    }
                }
                else {
                    y = a.cr.getBucket(x);
                    if (!isNaN_(y[0])) {
                        b.add([y[1], y[2]]);
                    }
                }
            }
            w.c8();
            return b.toArray();
        }
        u7(a) {
            let b = typeCast(ISortingAxis_$type, this.un);
            let c = this.getEffectiveViewport1(a);
            let d = a.bv;
            let e = a.bu;
            let f = new List$1(Array_$type, 0);
            if (b == null) {
                return null;
            }
            let g = this.un;
            let h = 0;
            let i = 0;
            let j = 0;
            let k = this.ft;
            let l = this.pq(this.b0);
            if (b == null || b.i$b == null) {
                let m = new ScalerParams(0, d, e, g.cg, c);
                let n = 0;
                let o = g.lf - 1;
                let p = Math.floor((o - n + 1) * k / l.width);
                h = truncate(Math.max(1, p));
                i = truncate(Math.max(0, Math.floor(n / h) - 1));
                j = truncate(Math.ceil(o / h));
            }
            else {
                i = 0;
                j = g.lf - 1;
                h = 1;
            }
            let q = (r) => r;
            let r = (s) => this.valueColumn.item(b.i$b._inner[s]);
            let s = truncate(Math.ceil(e.width / (j - i)));
            let t = new CollisionAvoider();
            if (h <= 0 || (i <= 0 && j <= 0)) {
                return null;
            }
            for (let u = i; u < j + 1; ++u) {
                let v = null;
                let w = u * h;
                if (b != null && b.i$b != null && w >= 0 && w < b.i$b.count) {
                    w = b.i$b._inner[w];
                }
                if (u >= (this.valueColumn.count - 1)) {
                    break;
                }
                let x = q(u);
                let y = r(u);
                let z = q(u + 1);
                let aa = r(u + 1);
                let ab = z - x;
                let ac = this.u8[u];
                let ad = this.u8[u + 1];
                f.add([y, y]);
                for (let ae = 1; ae < s; ++ae) {
                    let af = ae / s;
                    let ag = x + ab * af;
                    let ah = (z - ag) / ab;
                    let ai = (ag - x) / ab;
                    let aj = ah * y + ai * aa + ((ah * ah * ah - ah) * ac + (ai * ai * ai - ai) * ad) * (ab * ab) / 6;
                    f.add([aj, aj]);
                }
            }
            return f.toArray();
        }
        vm(a, b, c, d, e, f) {
            let g = typeCast(ISortingAxis_$type, d);
            let h = this.getEffectiveViewport1(f);
            if (g == null) {
                return;
            }
            let i = new ScalerParams(0, b, c, d.cg, h);
            let j = new ScalerParams(0, b, c, e.cg, h);
            j.b = this.gc();
            let k = this.qe();
            let l = 0;
            let m = this.vg(d, b, c, h);
            let n = (o) => o;
            let o = (p) => this.valueColumn.item(g.i$b._inner[p]);
            let p = this.rx.cr.f;
            let q = this.rx.cr.e;
            let r = truncate(Math.ceil(c.width / (p - q)));
            let s = new CollisionAvoider();
            let t = this.rx.cr.d;
            if (t <= 0 || (q <= 0 && p <= 0)) {
                this.rx.cu.count = l;
                return;
            }
            let u = 0;
            let v = 0;
            for (let w = q; w < p + 1; ++w) {
                let x = null;
                let y = w * t;
                if (g != null && g.i$b != null && y >= 0 && y < g.i$b.count) {
                    y = g.i$b._inner[y];
                }
                if (w >= (this.valueColumn.count - 1)) {
                    if (k && this.vc(a, a.f._inner[a.f.count - 1], s, Math.min(y, this.ck.count - 1), l, f, u - 1)) {
                        ++l;
                    }
                    break;
                }
                let z = n(w);
                let aa = o(w);
                let ab = n(w + 1);
                let ac = o(w + 1);
                let ad = ab - z;
                let ae = this.u8[w];
                let af = this.u8[w + 1];
                let ag = g.i$d(g.i$b._inner[w]);
                let ah = d.ei(ag, i) + m;
                let ai = e.ei(aa, j);
                a.f.add([ah, ai, ai]);
                u++;
                v = u;
                for (let aj = 1; aj < r; ++aj) {
                    let ak = aj / r;
                    let al = z + ad * ak;
                    let am = (ab - al) / ad;
                    let an = (al - z) / ad;
                    let ao = am * aa + an * ac + ((am * am * am - am) * ae + (an * an * an - an) * af) * (ad * ad) / 6;
                    let ap = g.i$d(g.i$b._inner[w]);
                    let aq = g.i$d(g.i$b._inner[w + 1]);
                    let ar = ap + (aq - ap) * ak;
                    al = d.ei(ar, i) + m;
                    ao = e.ei(ao, j);
                    a.f.add([al, ao, ao]);
                    u++;
                }
                if (k) {
                    x = [ah, ai, ai];
                }
                if (k && this.vc(a, x, s, Math.min(y, this.ck.count - 1), l, f, v - 1)) {
                    ++l;
                }
            }
            f.cu.count = l;
        }
        vc(a, b, c, d, e, f, g) {
            let h = b[0];
            let i = b[1];
            let j = new Rect(0, h - 5, i - 5, 11, 11);
            if (!isNaN_(h) && !isNaN_(i) && c.tryAdd(j)) {
                a.m.add({ $type: Point_$type, x: h, y: i });
                let k = f.cu.item(e);
                k.content.item = this.ck.item(d);
                k.al = g;
                return true;
            }
            return false;
        }
        aj(a, b, c, d, e, f) {
            if (a == null || a.cm || this.so(this.b0) > 1 || this.so(this.b0) == 0) {
                return super.aj(this.rn(), this.ro.f, this.so(this.b0), this.sp(this.b0), e, f);
            }
            if (this.ro.f.count == 0) {
                return null;
            }
            let g = this.u9.cr.f;
            let h = this.b0.bu;
            let i = truncate(Math.ceil(h.width));
            if (g != d) {
                i = truncate(Math.ceil(h.width / (g - d)));
            }
            let j = -1;
            let k = -1;
            let l = this.f5(e);
            let m = this.hj(e, f);
            let n = this.hh(e, f);
            let o = truncate(Math.floor(m / this.so(this.b0)));
            let p = truncate(Math.floor(n / this.so(this.b0)));
            j = o - this.sp(this.b0);
            k = p - this.sp(this.b0);
            let q = j * i;
            let r = k * i;
            let s = 0;
            if (m != n) {
                s = (l - m) / (n - m);
            }
            let t = truncate(Math.floor(q + s * (r - q)));
            j = t;
            k = t + 1;
            if (j < 0) {
                j = 0;
            }
            if (j > this.ro.f.count - 1) {
                j = this.ro.f.count - 1;
            }
            if (k < 0) {
                k = 0;
            }
            if (k > this.ro.f.count - 1) {
                k = this.ro.f.count - 1;
            }
            let u = this.ro.f._inner[j];
            let v = this.ro.f._inner[k];
            let w = new Array(2);
            w[0] = u;
            w[1] = v;
            return w;
        }
        s3(a, b) {
            super.s3(a, b);
            if (a.f.count <= 1) {
                return;
            }
            if (b.cr.d == 0) {
                return;
            }
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = this.un;
            let g = this.ut;
            let h = new ScalerParams(0, c, d, f.cg, e);
            let i = ((() => {
                let $ret = new ScalerParams(0, c, d, g.cg, e);
                $ret.b = this.gc();
                return $ret;
            })());
            a.f.clear();
            a.m.clear();
            let j = this.qe();
            let k = 0;
            let l = typeCast(ISortingAxis_$type, this.un);
            if (l != null && l.i$b.count != this.ck.count) {
                return;
            }
            let m = this.vg(f, c, d, e);
            let n = b.cr.d;
            this.vl(b);
            let o = b.cr.f;
            let p = b.cr.e;
            let q = truncate(Math.ceil(d.width / (o - p)));
            let r = new CollisionAvoider();
            if (l != null) {
                this.vm(a, c, d, f, g, b);
                return;
            }
            let s = (t) => t;
            let t = (u) => this.valueColumn.item(u);
            let u = b;
            u.c6();
            let v = 0;
            let w = 0;
            for (let x = p; x <= o; ++x) {
                let y = null;
                if (n == 1) {
                    if (x >= (this.valueColumn.count - 1)) {
                        if (j && this.vc(a, a.f._inner[a.f.count - 1], r, Math.min(x * n, this.ck.count - 1), k, b, v - 1)) {
                            ++k;
                        }
                        break;
                    }
                    let z = s(x);
                    let aa = t(x);
                    let ab = s(x + 1);
                    let ac = t(x + 1);
                    let ad = ab - z;
                    let ae = this.u8[x];
                    let af = this.u8[x + 1];
                    let ag = f.ei(z, h) + m;
                    let ah = g.ei(aa, i);
                    a.f.add([ag, ah, ah]);
                    v++;
                    w = v;
                    for (let ai = 1; ai < q; ++ai) {
                        let aj = z + ad * ai / q;
                        let ak = (ab - aj) / ad;
                        let al = (aj - z) / ad;
                        let am = ak * aa + al * ac + ((ak * ak * ak - ak) * ae + (al * al * al - al) * af) * (ad * ad) / 6;
                        aj = f.ei(aj, h) + m;
                        am = g.ei(am, i);
                        a.f.add([aj, am, am]);
                        v++;
                    }
                    if (j) {
                        y = b.cr.getBucket(x);
                        y[0] = (f.ei(y[0], h) + m);
                        y[1] = g.ei(y[1], i);
                        y[2] = g.ei(y[2], i);
                    }
                }
                else {
                    y = b.cr.getBucket(x);
                    if (!isNaN_(y[0])) {
                        y[0] = (f.ei(y[0], h) + m);
                        y[1] = g.ei(y[1], i);
                        y[2] = g.ei(y[2], i);
                        a.f.add(y);
                        v++;
                        w = v;
                    }
                }
                if (j && this.vc(a, y, r, Math.min(x * n, this.ck.count - 1), k, b, w - 1)) {
                    ++k;
                }
            }
            u.c8();
            b.cu.count = k;
        }
        vl(a) {
            let b = a.cr.d;
            let c = (d) => d;
            let d = (e) => this.valueColumn.item(e);
            if (b < 1 || this.valueColumn == null || this.valueColumn.count == 0) {
                return;
            }
            if ((this.u8 == null || this.u8.length != this.valueColumn.count) && b == 1) {
                let e = this.va == 0 ? NaN : 0;
                if (this.un != null && typeCast(ISortingAxis_$type, this.un) !== null && this.un.i$b != null) {
                    let f = new SafeSortedReadOnlyDoubleCollection(1, this.valueColumn, this.un.i$b, NaN);
                    d = (g) => f.item(g);
                }
                this.u8 = Numeric.c(this.valueColumn.count, c, d, e, e);
                if (this.vb) {
                    let g = -1.7976931348623157E+308;
                    let h = 1.7976931348623157E+308;
                    let i = this.u6(a);
                    if (i == null) {
                        return;
                    }
                    for (let j = 0; j < i.length; j++) {
                        if (isNaN_(i[j][0]) || isNaN_(i[j][1])) {
                            continue;
                        }
                        if (i[j][1] > g) {
                            g = i[j][1];
                        }
                        if (i[j][0] < h) {
                            h = i[j][0];
                        }
                    }
                    this.vi = h;
                    this.vh = g;
                }
            }
        }
        vf(a, b, c, d, e, f, g) {
            let h = d - b;
            let i = b + h * a;
            let j = (d - i) / h;
            let k = (i - b) / h;
            let l = j * c + k * e + ((j * j * j - j) * f + (k * k * k - k) * g) * (h * h) / 6;
            return l;
        }
        f9(a, b, c, d, e, f, g, h) {
            let i = NaN;
            if (c >= 0 && c < b.count) {
                i = b.item(c);
            }
            let j = NaN;
            if (d >= 0 && d < b.count) {
                j = b.item(d);
            }
            if (f == 0) {
                return j;
            }
            if (e == b.count - 1) {
                return i;
            }
            if (isNaN_(j) && g != 0 && a <= 0.5 && !h) {
                return i;
            }
            if (isNaN_(i) && g != 0 && a >= 0.5 && !h) {
                return j;
            }
            let k = e;
            let l = f;
            let m = i;
            let n = j;
            let o = NaN;
            let p = NaN;
            if (this.u8 != null && e >= 0 && e < this.u8.length) {
                o = this.u8[e];
            }
            if (this.u8 != null && f >= 0 && f < this.u8.length) {
                p = this.u8[f];
            }
            return this.vf(a, k, m, l, n, o, p);
        }
        vg(a, b, c, d) {
            let e = this.preferredCategoryMode(a);
            if (e == 0 && a.categoryMode != 0) {
                e = 1;
            }
            let f = 0;
            switch (e) {
                case 0:
                    f = 0;
                    break;
                case 1:
                    f = 0.5 * a.getCategorySize(b, c, d);
                    break;
                case 2:
                    f = a.getGroupCenter(this.index, b, c, d);
                    break;
            }
            if (a.cg) {
                f = -f;
            }
            return f;
        }
        get vi() {
            return this.ve;
        }
        set vi(a) {
            this.ve = a;
        }
        get vh() {
            return this.vd;
        }
        set vh(a) {
            this.vd = a;
        }
        vn() {
            this.u8 = null;
            this.vi = NaN;
            this.vh = NaN;
            if (this.yAxis != null) {
                this.yAxis.c0();
            }
        }
        l3(a, b, c, d) {
            switch (b) {
                case "ValueColumn":
                case "FastItemsSource":
                    this.vn();
                    break;
            }
            super.l3(a, b, c, d);
            switch (b) {
                case SplineSeriesBase.$$p[1]:
                    this.vn();
                    this.mh(false);
                    this.lo();
                    break;
            }
        }
        k0(a, b, c, d) {
            this.vn();
            super.k0(a, b, c, d);
        }
        get useHighMarkerFidelity() {
            return this.sj;
        }
    }
    SplineSeriesBase.$t = /*@__PURE__*/ markType(SplineSeriesBase, 'SplineSeriesBase', HorizontalAnchoredCategorySeries.$);
    SplineSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, SplineSeriesBase, 'raisePropertyChanged', ['IsSplineShapePartOfRange:vb:vo', [0, false], 'SplineType:va:vp', [SplineType_$type, /*@__PURE__*/ enumGetBox(SplineType_$type, 0)]]);
    return SplineSeriesBase;
})();
/**
 * @hidden
 */
export let SplineSeriesBaseView = /*@__PURE__*/ (() => {
    class SplineSeriesBaseView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.da = a;
        }
        db() {
            let a = 1;
            if (this.da.cd != null) {
                a = this.da.cd.f4;
            }
            return Math.max(1 / (a * 3), 0.3);
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.pa = a;
            this.e.gw = 3;
            this.e.gx = 1;
            this.e.gy = 4;
            this.e.e7 = false;
        }
    }
    SplineSeriesBaseView.$t = /*@__PURE__*/ markType(SplineSeriesBaseView, 'SplineSeriesBaseView', AnchoredCategorySeriesView.$);
    return SplineSeriesBaseView;
})();
