/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChart } from "./XYChart";
import { typeCast, runOn, delegateCombine, enumGetBox, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { CategoryChartType_$type } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode_$type } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode_$type } from "./AxisRangeBufferMode";
import { CategoryXAxis } from "./CategoryXAxis";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleCategorySeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { ArrayExtension } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { DeviceUtils } from "igniteui-react-core";
import { CategoryChartMockDataGenerator } from "./CategoryChartMockDataGenerator";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let CategoryChart = /*@__PURE__*/ (() => {
    class CategoryChart extends XYChart {
        constructor() {
            super();
            this.ac2 = 1000;
            this.abh = null;
            this.aa1 = 9;
            this.aa3 = 1;
            this.abl = false;
            this.abm = false;
            this.aa5 = 0;
            this.abf = 0;
            this.ab9 = 0;
            this.acc = 0;
            this.ab8 = 0;
            this.acb = 0;
            this.aca = 1;
            this.acd = 0;
            this.ace = NaN;
            this.aax = 0;
            this.abn = true;
            this.abo = false;
            this.ab6 = DeviceUtils.g(2);
            this.ab7 = DeviceUtils.g(60);
            this.abs = true;
            this.abp = true;
            this.abr = false;
            this.aaz = 0;
            this.abt = false;
            this.ac3 = 10;
            this.acg = NaN;
            this.acf = NaN;
            this.ach = 0;
            this.aat = null;
            this.aau = null;
            this.abq = true;
            this.abj = false;
            this.abk = false;
            this.ab5 = null;
            this.pp();
        }
        p7() {
            super.p7();
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.cq.j.e();
            this.aav = a.d;
            this.aaw = a.e;
            if (this.z5 == null) {
                this.z5 = a.k;
            }
            if (this.aac == null) {
                this.aac = a.k;
            }
            this.v4 = 0;
            this.aad = AxisDefaults.h;
            this.aag = null;
            this.z9 = AxisDefaults.g;
            this.z6 = null;
            this.vn = AxisDefaults.f;
            this.aaa = AxisDefaults.j;
            this.vo = AxisDefaults.e;
            this.el = true;
            this.em = false;
            this.aq = 0;
            this.g3 = Defaults.j;
            this.sh = Defaults.ae;
            this.sc = Defaults.af;
            this.sd = Defaults.ag;
        }
        p9(a, b) {
            super.p9(a, b);
            a.hn = this.ac4;
            a.cg = this.abi;
        }
        qu(a, b, c) {
            super.qu(a, b, c);
            switch (a) {
                case "TransitionInDuration":
                    this.pw((d) => d.hn = this.ac4);
                    break;
                case "TransitionInEasingFunction":
                    this.pw((d) => d.cg = this.abi);
                    break;
            }
        }
        get ac4() {
            return this.ac2;
        }
        set ac4(a) {
            let b = this.ac4;
            if (a != b) {
                this.ac2 = a;
                this.qt("TransitionInDuration", b, this.ac4);
            }
        }
        get abi() {
            return this.abh;
        }
        set abi(a) {
            let b = this.abi;
            if (a != b) {
                this.abh = a;
                this.qt("TransitionInEasingFunction", b, this.abi);
            }
        }
        ada() {
            let cvd_ = this.iv();
            cvd_.scaleByViewport();
            return (cvd_.serialize());
        }
        p2(a) {
            super.p2(a);
            a.dn = this.eh;
            a.tw = this.aby;
            a.tz = this.abz;
            a.um = this.aci;
            a.un = this.acj;
            a.s1 = this.aay;
        }
        p8(a, b) {
            super.p8(a, b);
            let c = typeCast(HorizontalAnchoredCategorySeries.$, a);
            if (c == null) {
                return;
            }
            c.ti = this.aa4;
            c.sf = this.abx;
            c.rz = this.aa6;
            c.ca = this.abg;
            c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.ag, b);
            c.trendLineType = this.c2;
            c.trendLineThickness = this.hz;
            c.qc = this.b6(a, b);
            if (a.d3) {
                a.mm(ArrayExtension.getModulus$1(Brush.$, this.aav, b), ArrayExtension.getModulus$1(Brush.$, this.aaw, b));
            }
        }
        aa7() {
            return new CategoryXAxis();
        }
        abb() {
            return new NumericYAxis();
        }
        pl() {
            this.xAxis = this.aa7();
            this.xAxis.name = "xAxis";
            let a = this.xAxis;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.ad7));
            this.yAxis = this.abb();
            this.yAxis.name = "yAxis";
            let b = this.yAxis;
            b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.ad8));
            if (this.xAxis.ay == null) {
                this.xAxis.ay = new AxisLabelSettings();
            }
            if (this.yAxis.ay == null) {
                this.yAxis.ay = new AxisLabelSettings();
            }
        }
        y5(a) {
            super.y5(a);
            a.k8 = this.ab1;
            a.lb = this.ab3;
            a.b0 = this.ab2;
        }
        y3(a) {
            super.y3(a);
            a.b0 = this.ab0;
        }
        get_bi() {
            return 0;
        }
        get bi() {
            return this.get_bi();
        }
        get aa2() {
            return this.aa1;
        }
        set aa2(a) {
            if (a != this.aa1) {
                let b = this.aa2;
                this.aa1 = a;
                this.qt("ChartType", enumGetBox(CategoryChartType_$type, b), enumGetBox(CategoryChartType_$type, this.aa2));
            }
        }
        get aa4() {
            return this.aa3;
        }
        set aa4(a) {
            let b = this.aa4;
            if (a != b) {
                this.aa3 = a;
                this.qt("MarkerCollisionAvoidance", enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, b), enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, this.aa4));
            }
        }
        get abw() {
            return this.abl;
        }
        set abw(a) {
            let b = this.abw;
            if (a != b) {
                this.abl = a;
                this.qt("IsSplineShapePartOfRange", b, this.abw);
            }
        }
        get abx() {
            return this.abm;
        }
        set abx(a) {
            let b = this.abx;
            if (a != b) {
                this.abm = a;
                this.qt("IsTransitionInEnabled", b, this.abx);
            }
        }
        get aa6() {
            return this.aa5;
        }
        set aa6(a) {
            let b = this.aa6;
            if (a != b) {
                this.aa5 = a;
                this.qt("TransitionInMode", enumGetBox(CategoryTransitionInMode_$type, b), enumGetBox(CategoryTransitionInMode_$type, this.aa6));
            }
        }
        get abg() {
            return this.abf;
        }
        set abg(a) {
            let b = this.abg;
            if (a != b) {
                this.abf = a;
                this.qt("TransitionInSpeedType", enumGetBox(TransitionInSpeedType_$type, b), enumGetBox(TransitionInSpeedType_$type, this.abg));
            }
        }
        get acr() {
            return this.ab9;
        }
        set acr(a) {
            let b = this.acr;
            if (a != b) {
                this.ab9 = a;
                this.qt("XAxisInterval", b, this.acr);
            }
        }
        get acu() {
            return this.acc;
        }
        set acu(a) {
            let b = this.acu;
            if (a != b) {
                this.acc = a;
                this.qt("XAxisMinorInterval", b, this.acu);
            }
        }
        get acq() {
            return this.ab8;
        }
        set acq(a) {
            let b = this.acq;
            if (a != b) {
                this.ab8 = a;
                this.qt("XAxisGap", b, this.acq);
            }
        }
        get act() {
            return this.acb;
        }
        set act(a) {
            let b = this.act;
            if (a != b) {
                this.acb = a;
                this.qt("XAxisMinimumGapSize", b, this.act);
            }
        }
        get acs() {
            return this.aca;
        }
        set acs(a) {
            let b = this.acs;
            if (a != b) {
                this.aca = a;
                this.qt("XAxisMaximumGap", b, this.acs);
            }
        }
        get acv() {
            return this.acd;
        }
        set acv(a) {
            let b = this.acv;
            if (a != b) {
                this.acd = a;
                this.qt("XAxisOverlap", b, this.acv);
            }
        }
        get acy() {
            return this.ace;
        }
        set acy(a) {
            let b = this.acy;
            if (a != b) {
                this.ace = a;
                this.qt("YAxisInterval", b, this.acy);
            }
        }
        get aay() {
            return this.aax;
        }
        set aay(a) {
            let b = this.aay;
            if (a != b) {
                this.aax = a;
                this.qt("AutoMarginAndAngleUpdateMode", enumGetBox(AutoMarginsAndAngleUpdateMode_$type, b), enumGetBox(AutoMarginsAndAngleUpdateMode_$type, this.aay));
            }
        }
        ad9() {
            if (this.dataChart != null) {
                this.dataChart.v7();
            }
        }
        get aby() {
            return this.abn;
        }
        set aby(a) {
            let b = this.aby;
            if (a != b) {
                this.abn = a;
                this.qt("ShouldAutoExpandMarginForInitialLabels", b, this.aby);
            }
        }
        get abz() {
            return this.abo;
        }
        set abz(a) {
            let b = this.abz;
            if (a != b) {
                this.abo = a;
                this.qt(CategoryChart.adj, b, this.abz);
            }
        }
        get aci() {
            return this.ab6;
        }
        set aci(a) {
            let b = this.aci;
            if (a != b) {
                this.ab6 = a;
                this.qt("AutoExpandMarginExtraPadding", b, this.aci);
            }
        }
        get acj() {
            return this.ab7;
        }
        set acj(a) {
            let b = this.acj;
            if (a != b) {
                this.ab7 = a;
                this.qt("AutoExpandMarginMaximumValue", b, this.acj);
            }
        }
        get ab3() {
            return this.abs;
        }
        set ab3(a) {
            let b = this.ab3;
            if (a != b) {
                this.abs = a;
                this.qt("YAxisFavorLabellingScaleEnd", b, this.ab3);
            }
        }
        get ab0() {
            return this.abp;
        }
        set ab0(a) {
            let b = this.ab0;
            if (a != b) {
                this.abp = a;
                this.qt(CategoryChart.ado, b, this.ab0);
            }
        }
        get ab2() {
            return this.abr;
        }
        set ab2(a) {
            let b = this.ab2;
            if (a != b) {
                this.abr = a;
                this.qt(CategoryChart.adx, b, this.ab2);
            }
        }
        get aa0() {
            return this.aaz;
        }
        set aa0(a) {
            let b = this.aa0;
            if (a != b) {
                this.aaz = a;
                this.qt("YAxisAutoRangeBufferMode", enumGetBox(AxisRangeBufferMode_$type, b), enumGetBox(AxisRangeBufferMode_$type, this.aa0));
            }
        }
        get ab4() {
            return this.abt;
        }
        set ab4(a) {
            let b = this.ab4;
            if (a != b) {
                this.abt = a;
                this.qt("YAxisIsLogarithmic", b, this.ab4);
            }
        }
        get ac5() {
            return this.ac3;
        }
        set ac5(a) {
            let b = this.ac5;
            if (a != b) {
                this.ac3 = a;
                this.qt("YAxisLogarithmBase", b, this.ac5);
            }
        }
        get ac0() {
            return this.acg;
        }
        set ac0(a) {
            let b = this.ac0;
            if (a != b) {
                this.acg = a;
                this.qt("YAxisMinimumValue", b, this.ac0);
            }
        }
        get acz() {
            return this.acf;
        }
        set acz(a) {
            let b = this.acz;
            if (a != b) {
                this.acf = a;
                this.qt("YAxisMaximumValue", b, this.acz);
            }
        }
        get ac1() {
            return this.ach;
        }
        set ac1(a) {
            let b = this.ac1;
            if (a != b) {
                this.ach = a;
                this.qt("YAxisMinorInterval", b, this.ac1);
            }
        }
        get acp() {
            return this.xAxis.mv;
        }
        get aco() {
            return this.xAxis.mu;
        }
        acl() {
            return this.acp;
        }
        acn() {
            return this.acx;
        }
        ack() {
            return this.aco;
        }
        acm() {
            return this.acw;
        }
        get acx() {
            return this.yAxis.lv;
        }
        get acw() {
            return this.yAxis.lu;
        }
        get aav() {
            return this.aat;
        }
        set aav(a) {
            let b = this.aav;
            if (a != b) {
                this.aat = a;
                this.qt("NegativeBrushes", b, this.aav);
            }
        }
        get aaw() {
            return this.aau;
        }
        set aaw(a) {
            let b = this.aaw;
            if (a != b) {
                this.aau = a;
                this.qt("NegativeOutlines", b, this.aaw);
            }
        }
        get ab1() {
            return this.abq;
        }
        set ab1(a) {
            let b = this.ab1;
            if (a != b) {
                this.abq = a;
                this.qt("YAxisAbbreviateLargeNumbers", b, this.ab1);
            }
        }
        get abu() {
            return this.abj;
        }
        set abu(a) {
            let b = this.abu;
            if (a != b) {
                this.abj = a;
                this.qt("IsCategoryHighlightingEnabled", b, this.abu);
            }
        }
        get abv() {
            return this.abk;
        }
        set abv(a) {
            let b = this.abv;
            if (a != b) {
                this.abk = a;
                this.qt("IsItemHighlightingEnabled", b, this.abv);
            }
        }
        get_fl() {
            let a = new List$1(DataSeriesType_$type, 0);
            if (TypeRegistrar.isRegistered("AreaSeries")) {
                a.add(2);
            }
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                a.add(1);
            }
            if (TypeRegistrar.isRegistered("LineSeries")) {
                a.add(0);
            }
            if (TypeRegistrar.isRegistered("PointSeries")) {
                a.add(10);
            }
            if (TypeRegistrar.isRegistered("SplineSeries")) {
                a.add(6);
            }
            if (TypeRegistrar.isRegistered("SplineAreaSeries")) {
                a.add(7);
            }
            if (TypeRegistrar.isRegistered("StepAreaSeries")) {
                a.add(5);
            }
            if (TypeRegistrar.isRegistered("StepLineSeries")) {
                a.add(4);
            }
            if (TypeRegistrar.isRegistered("WaterfallSeries")) {
                a.add(8);
            }
            return a;
        }
        get fl() {
            return this.get_fl();
        }
        fu() {
            if (this.ab5 == null) {
                this.ab5 = CategoryChartMockDataGenerator.a();
            }
            return this.ab5;
        }
        ad7(a, b) {
            switch (b.propertyName) {
                case "ActualMinimum":
                    this.q1("XAxisActualMinimum");
                    break;
                case "ActualMaximum":
                    this.q1("XAxisActualMaximum");
                    break;
            }
        }
        ad8(a, b) {
            switch (b.propertyName) {
                case "ActualMinimumValue":
                    this.q1("YAxisActualMinimum");
                    break;
                case "ActualMaximumValue":
                    this.q1("YAxisActualMaximum");
                    break;
            }
        }
        rd() {
            super.rd();
            this.xAxis.fz = this.we == null ? XYChart.wq(this.xAxis, this.au.dataSeries) : this.we;
            this.xAxis.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            if (this.aby) {
                this.ql((a) => a.v7());
            }
        }
        get xAxis() {
            return this._xAxis;
        }
        set xAxis(a) {
            this._xAxis = a;
        }
        get yAxis() {
            return this._yAxis;
        }
        set yAxis(a) {
            this._yAxis = a;
        }
        aba(a, b) {
            switch (a) {
                case 2: return this.cg(1);
                case 3: return this.cg(10);
                case 0: return this.cg(0);
                case 1: return this.cg(2);
                case 6: return this.cg(6);
                case 7: return this.cg(7);
                case 4: return this.cg(4);
                case 5: return this.cg(5);
                case 8: return this.cg(8);
                case 9: return this.aa9(b);
                default: return this.cg(1);
            }
        }
        aa9(a) {
            return this.cg(a);
        }
        at(a) {
            switch (this.aa2) {
                case 1: return 2;
                case 0: return 0;
                case 3: return 10;
                case 6: return 6;
                case 7: return 7;
                case 5: return 5;
                case 4: return 4;
                case 8: return 8;
                case 9: return a.suggestedSeries;
                default:
                case 2: return 1;
            }
        }
        cf(a, b) {
            let c = this.aba(this.aa2, a.suggestedSeries);
            c.t0 = a.findMatchingHint(0).path;
            c.xAxis = this.xAxis;
            c.yAxis = this.yAxis;
            return c;
        }
        rb(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.lg = true;
                this.yAxis.l7 = 10;
            }
        }
        re() {
            this.yAxis.lg = this.ab4;
            this.yAxis.l7 = this.ac5;
        }
        get_fk() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleCategorySeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get fk() {
            return this.get_fk();
        }
        pi(a, b) {
            let c = typeCast(HorizontalAnchoredCategorySeries.$, a);
            if (c != null) {
                c.ti = this.aa4;
                c.qc = this.b6(a, b);
            }
        }
        ad5(a) {
            this.ad6((b, c) => a(b));
        }
        ad6(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = typeCast(HorizontalAnchoredCategorySeries.$, this.dataChart.series._inner[b]);
                if (c == null) {
                    continue;
                }
                a(c, b);
            }
        }
        tw() {
            return this.xAxis;
        }
        tx() {
            return this.yAxis;
        }
        abd() {
            return this.cg(30);
        }
        abe() {
            return this.cg(31);
        }
        fh(a, b) {
            let c = super.fh(a, b);
            if (c != null) {
                let d = new List$1(Series.$, 0);
                if (this.abj) {
                    d.add(this.abd());
                }
                if (this.abk) {
                    d.add(this.abe());
                }
                for (let e = 0; e < d.count; e++) {
                    let f = d._inner[e];
                    f.name = a + getInstanceType(f).typeName;
                    c.add(f);
                }
            }
            return c;
        }
        ri(a, b, c) {
            super.ri(a, b, c);
            if (this.au.dataSeries.count > 0) {
                if (stringIsNullOrEmpty(this.j1)) {
                    this.bk.setXMemberPath(a, c.getMemberPathFor(16));
                }
                if (stringIsNullOrEmpty(this.j3)) {
                    this.bk.setYMemberPath(a, c.getMemberPathFor(0));
                }
                if (stringIsNullOrEmpty(this.jx)) {
                    this.bk.setLabelMemberPath(a, c.getMemberPathFor(0));
                }
                if (stringIsNullOrEmpty(this.ju)) {
                    this.bk.setContentMemberPath(a, c.getMemberPathFor(0));
                }
            }
        }
        ey() {
            if (this.aq == 4 || this.aq == 3) {
                return true;
            }
            else if (this.aq == 0) {
                if (this.aa2 == 2 || this.aa2 == 8) {
                    return false;
                }
                else if (this.aa2 == 9 && this.au != null && this.au.dataSeries != null && this.au.dataSeries.count > 0) {
                    let a = this.au.dataSeries._inner[0].suggestedSeries;
                    if (a == 1 || a == 8) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        }
        qt(a, b, c) {
            super.qt(a, b, c);
            switch (a) {
                case "ChartType":
                    this.rd();
                    break;
                case "MarkerCollisionAvoidance":
                    this.ad5((d) => d.ti = this.aa4);
                    break;
                case "IsTransitionInEnabled":
                    this.ad5((d) => d.sf = this.abx);
                    break;
                case "IsSplineShapePartOfRange":
                    this.ad5((d) => {
                        if (d.eg) {
                            d.mn(this.abw);
                        }
                    });
                    break;
                case "TransitionInMode":
                    this.ad5((d) => d.rz = this.aa6);
                    break;
                case "TransitionInSpeedType":
                    this.ad5((d) => d.ca = this.abg);
                    break;
                case "XAxisInterval":
                    this.xAxis.mq = this.acr;
                    break;
                case "XAxisMinorInterval":
                    this.xAxis.mr = this.acu;
                    break;
                case "XAxisGap":
                    this.xAxis.k0 = this.acq;
                    break;
                case "XAxisOverlap":
                    this.xAxis.k9 = this.acv;
                    break;
                case "XAxisMinimumGapSize":
                    this.xAxis.k8 = this.act;
                    break;
                case "XAxisMaximumGap":
                    this.xAxis.k7 = this.acs;
                    break;
                case "YAxisInterval":
                    this.yAxis.lz = this.acy;
                    break;
                case "YAxisFavorLabellingScaleEnd":
                    this.yAxis.lb = this.ab3;
                    break;
                case "YAxisAutoRangeBufferMode":
                    this.yAxis.ks = this.aa0;
                    break;
                case "YAxisIsLogarithmic":
                    this.yAxis.lg = this.ab4;
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.l7 = this.ac5;
                    break;
                case "YAxisMinimumValue":
                    this.yAxis.l3 = this.ac0;
                    break;
                case "YAxisMaximumValue":
                    this.yAxis.l2 = this.acz;
                    break;
                case "YAxisMinorInterval":
                    this.yAxis.l4 = this.ac1;
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.ad6((d, e) => {
                        if (d.d3) {
                            d.mm(ArrayExtension.getModulus$1(Brush.$, this.aav, e), ArrayExtension.getModulus$1(Brush.$, this.aaw, e));
                        }
                    });
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.zc((d) => d.k8 = this.ab1);
                    break;
                case "IsCategoryHighlightingEnabled":
                case "IsItemHighlightingEnabled":
                    this.rd();
                    break;
                case "AutoMarginAndAngleUpdateMode":
                    this.ql((d) => d.s1 = this.aay);
                    break;
                case "ShouldAutoExpandMarginForInitialLabels":
                    this.ql((d) => d.tw = this.aby);
                    break;
                case CategoryChart.adj:
                    this.ql((d) => d.tz = this.abz);
                    break;
                case "AutoExpandMarginExtraPadding":
                    this.ql((d) => d.um = this.aci);
                    break;
                case "AutoExpandMarginMaximumValue":
                    this.ql((d) => d.un = this.acj);
                    break;
                case CategoryChart.ado:
                    this.y8((d) => d.b0 = this.ab0, a);
                    break;
                case CategoryChart.adx:
                    this.zc((d) => d.b0 = this.ab2);
                    break;
            }
        }
    }
    CategoryChart.$t = /*@__PURE__*/ markType(CategoryChart, 'CategoryChart', XYChart.$);
    CategoryChart.adj = "ShouldConsiderAutoRotationForInitialLabels";
    CategoryChart.ado = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    CategoryChart.adx = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return CategoryChart;
})();
