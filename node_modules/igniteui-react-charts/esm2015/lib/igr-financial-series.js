import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { IgrNumericYAxis } from "./igr-numeric-y-axis";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { IgrAssigningCategoryStyleEventArgs } from "./igr-assigning-category-style-event-args";
import { IgrFinancialEventArgs } from "./igr-financial-event-args";
import { IgrSeries } from "./igr-series";
import { ensureBool, brushToString, stringToBrush, ensureEnum, toPoint, fromPoint } from "igniteui-react-core";
/**
 * Represents the base class for all financial indicator and overlay series.
*
* The `IgrFinancialSeries` represents the base class for all financial indicator and overlay series.
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*
*
*     <IgrCategoryXAxis name="xAxis" label="Date" />
*     <IgrNumericYAxis  name="yAxis" />
*
*
*     <IgrFinancialPriceSeries
*     name="series2"
*     xAxisName="xAxis"
*     yAxisName="yAxis"
*     displayType="Candlestick"
*     lowMemberPath="Low"
*     highMemberPath="High"
*     openMemberPath="Open"
*     closeMemberPath="Close"
*     volumeMemberPath="Volume" />
*
*  </IgrDataChart>
* ```
*
* ```ts
* this.financialSeries = new IgrFinancialPriceSeries({name: "financialSeries"});
* this.financialSeries.dataSource = this.financialData;
* this.financialSeries.xAxis = this.timeXAxis;
* this.financialSeries.yAxis = this.numericYAxis;
* this.financialSeries.xAxisName = "timeXAxis";
* this.financialSeries.yAxisName = "numericYAxis";
* this.financialSeries.highMemberPath="High" ;
* this.financialSeries.lowMemberPath="Low" ;
* this.financialSeries.closeMemberPath="Close" ;
* this.financialSeries.openMemberPath="Open";
* this.financialSeries.volumeMemberPath="Volume";
* ```
*/
export class IgrFinancialSeries extends IgrSeries {
    constructor(props) {
        super(props);
        this._xAxisName = null;
        this._yAxisName = null;
        this._assigningCategoryStyle = null;
        this._assigningCategoryStyle_wrapped = null;
        this._typical = null;
        this._typical_wrapped = null;
        this._typicalBasedOn = null;
        this._typicalBasedOn_wrapped = null;
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    /**
     * Gets whether the current series is a financial type series.
    */
    get isFinancial() {
        return this.i.dp;
    }
    /**
     * Gets or sets the brush to use for negative portions of the series.
    *
    * The `negativeBrush` property is used to brush the negative portions of the series.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	negativeBrush="Red" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.negativeBrush="red";
    * ```
    */
    get negativeBrush() {
        return brushToString(this.i.th);
    }
    set negativeBrush(v) {
        this.i.th = stringToBrush(v);
    }
    get hasValueAxis() {
        return this.i.c6;
    }
    get isValueAxisInverted() {
        return this.i.ej;
    }
    /**
     * Gets or sets the effective x-axis for the current FinancialSeries object.
    *
    * Use `xAxis` property to set effective x-axis for the current FinancialSeries object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * this.financialSeries = new IgrFinancialPriceSeries({name: "financialSeries"});
    * this.financialSeries.dataSource = this.financialData;
    * this.financialSeries.xAxis = this.timeXAxis;
    * this.financialSeries.yAxis = this.numericYAxis;
    * this.financialSeries.xAxisName = "timeXAxis";
    * this.financialSeries.yAxisName = "numericYAxis";
    * this.financialSeries.highMemberPath="High" ;
    * this.financialSeries.lowMemberPath="Low";
    * this.financialSeries.closeMemberPath="Close";
    * this.financialSeries.openMemberPath="Open";
    * this.financialSeries.volumeMemberPath="Volume";
    * ```
    */
    get xAxis() {
        if (this.i.qb == null) {
            return null;
        }
        if (!this.i.qb.externalObject) {
            let e = IgrCategoryAxisBase._createFromInternal(this.i.qb);
            if (e) {
                e._implementation = this.i.qb;
            }
            this.i.qb.externalObject = e;
        }
        return this.i.qb.externalObject;
    }
    set xAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.qb = null : this.i.qb = v.i;
    }
    /**
    * Gets or sets the name to use to resolve xAxis from markup.
    */
    get xAxisName() {
        return this._xAxisName;
    }
    set xAxisName(v) {
        this._xAxisName = v;
    }
    /**
     * Gets or sets the effective y-axis for the current FinancialSeries object.
    *
    * Use `yAxis` property to set the effective y-axis for the current FinancialSeries object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *     this.financialSeries = new IgrFinancialPriceSeries({name: "financialSeries"});
    *     this.financialSeries.dataSource = this.financialData;
    *     this.financialSeries.xAxis = this.timeXAxis;
    *     this.financialSeries.yAxis = this.numericYAxis;
    *     this.financialSeries.xAxisName = "timeXAxis";
    *     this.financialSeries.yAxisName = "numericYAxis";
    *     this.financialSeries.highMemberPath="High" ;
    *     this.financialSeries.lowMemberPath="Low";
    *     this.financialSeries.closeMemberPath="Close";
    *     this.financialSeries.openMemberPath="Open";
    *     this.financialSeries.volumeMemberPath="Volume";
    * ```
    */
    get yAxis() {
        if (this.i.qx == null) {
            return null;
        }
        if (!this.i.qx.externalObject) {
            let e = IgrNumericYAxis._createFromInternal(this.i.qx);
            if (e) {
                e._implementation = this.i.qx;
            }
            this.i.qx.externalObject = e;
        }
        return this.i.qx.externalObject;
    }
    set yAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.qx = null : this.i.qx = v.i;
    }
    /**
    * Gets or sets the name to use to resolve yAxis from markup.
    */
    get yAxisName() {
        return this._yAxisName;
    }
    set yAxisName(v) {
        this._yAxisName = v;
    }
    /**
     * Gets or sets the open mapping property for the current series object.
    *
    * The `openMemberPath` property is used for open mapping of the current series object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume" />
    *
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * this.series = new IgrFinancialPriceSeries({name: "series"});
    * this.series.dataSource = this.financialData;
    * this.series.xAxis = this.timeXAxis;
    * this.series.yAxis = this.numericYAxis;
    * this.series.xAxisName = "timeXAxis";
    * this.series.yAxisName = "numericYAxis";
    * this.series.highMemberPath="High"
    * this.series.lowMemberPath="Low"
    * this.series.closeMemberPath="Close"
    * this.series.openMemberPath="Open"
    * this.series.volumeMemberPath="Volume"
    * ```
    */
    get openMemberPath() {
        return this.i.sr;
    }
    set openMemberPath(v) {
        this.i.sr = v;
    }
    /**
     * Gets or sets the high mapping property for the current series object.
    *
    * Use `highMemberPath` propert for high mapping of the current series object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *     this.financialSeries = new IgrFinancialPriceSeries({name: "financialSeries"});
    *     this.financialSeries.dataSource = this.financialData;
    *     this.financialSeries.xAxis = this.timeXAxis;
    *     this.financialSeries.yAxis = this.numericYAxis;
    *     this.financialSeries.xAxisName = "timeXAxis";
    *     this.financialSeries.yAxisName = "numericYAxis";
    *     this.financialSeries.highMemberPath="High" ;
    *     this.financialSeries.lowMemberPath="Low";
    *     this.financialSeries.closeMemberPath="Close";
    *     this.financialSeries.openMemberPath="Open";
    *     this.financialSeries.volumeMemberPath="Volume";
    * ```
    */
    get highMemberPath() {
        return this.i.si;
    }
    set highMemberPath(v) {
        this.i.si = v;
    }
    /**
     * Gets or sets the low mapping property for the current series object.
    *
    * The `lowMemberPath` is used for low mapping property of the current series object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume" />
    *
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *     this.financialSeries = new IgrFinancialPriceSeries({name: "financialSeries"});
    *     this.financialSeries.dataSource = this.financialData;
    *     this.financialSeries.xAxis = this.timeXAxis;
    *     this.financialSeries.yAxis = this.numericYAxis;
    *     this.financialSeries.xAxisName = "timeXAxis";
    *     this.financialSeries.yAxisName = "numericYAxis";
    *     this.financialSeries.highMemberPath="High" ;
    *     this.financialSeries.lowMemberPath="Low";
    *     this.financialSeries.closeMemberPath="Close";
    *     this.financialSeries.openMemberPath="Open";
    *     this.financialSeries.volumeMemberPath="Volume";
    * ```
    */
    get lowMemberPath() {
        return this.i.sn;
    }
    set lowMemberPath(v) {
        this.i.sn = v;
    }
    /**
     * Gets or sets the close mapping property for the current series object.
    *
    * Use `closeMemberPath` property for the close mapping of the current series object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume" />
    *
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * this.financialSeries = new IgrFinancialPriceSeries({name: "financialSeries"});
    * this.financialSeries.dataSource = this.financialData;
    * this.financialSeries.xAxis = this.timeXAxis;
    * this.financialSeries.yAxis = this.numericYAxis;
    * this.financialSeries.xAxisName = "timeXAxis";
    * this.financialSeries.yAxisName = "numericYAxis";
    * this.financialSeries.highMemberPath="High"
    * this.financialSeries.lowMemberPath="Low"
    * this.financialSeries.closeMemberPath="Close"
    * this.financialSeries.openMemberPath="Open"
    * this.financialSeries.volumeMemberPath="Volume"
    * ```
    */
    get closeMemberPath() {
        return this.i.sf;
    }
    set closeMemberPath(v) {
        this.i.sf = v;
    }
    /**
     * Gets or sets the volume mapping property for the current series object.
    *
    * The `volumeMemberPath` property is used for the volume mapping property of the current series object.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *     this.financialSeries = new IgrFinancialPriceSeries({name: "financialSeries"});
    *     this.financialSeries.dataSource = this.financialData;
    *     this.financialSeries.xAxis = this.timeXAxis;
    *     this.financialSeries.yAxis = this.numericYAxis;
    *     this.financialSeries.xAxisName = "timeXAxis";
    *     this.financialSeries.yAxisName = "numericYAxis";
    *     this.financialSeries.highMemberPath="High" ;
    *     this.financialSeries.lowMemberPath="Low";
    *     this.financialSeries.closeMemberPath="Close";
    *     this.financialSeries.openMemberPath="Open";
    *     this.financialSeries.volumeMemberPath="Volume";
    * ```
    */
    get volumeMemberPath() {
        return this.i.sv;
    }
    set volumeMemberPath(v) {
        this.i.sv = v;
    }
    /**
     * Gets or sets whether this category series should allow custom style overrides of its individual visuals.
    *
    * The `isCustomCategoryStyleAllowed` property is used to check if the category series should allow custom style.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	isCustomCategoryStyleAllowed="True" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.isCustomCategoryStyleAllowed= true;
    * ```
    */
    get isCustomCategoryStyleAllowed() {
        return this.i.rh;
    }
    set isCustomCategoryStyleAllowed(v) {
        this.i.rh = ensureBool(v);
    }
    /**
     * Gets or sets the method by which to animate the data into the chart when the chart data source is swapped.
     * Note: Transitions are not currently supported for stacked series.
    *
    * The `transitionInMode` property is used to gets or sets the method by which to animate the data into the chart when the chart data source is swapped.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	transitionInMode="Auto"/>
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.transitionInMode =CategoryTransitionInMode.Auto;
    * ```
    */
    get transitionInMode() {
        return this.i.qm;
    }
    set transitionInMode(v) {
        this.i.qm = ensureEnum(CategoryTransitionInMode_$type, v);
    }
    /**
     * Gets or sets whether the series should transition into the plot area when a new data source is assigned.
     * Note: Transitions are not currently supported for stacked series.
    *
    * The `isTransitionInEnabled` property is used to check if the series should transition into the plot area when a new data source is assigned.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *
    *
    *     <IgrCategoryXAxis name="xAxis" label="Date" />
    *     <IgrNumericYAxis  name="yAxis" />
    *
    *
    *     <IgrFinancialPriceSeries
    *     name="series2"
    *     xAxisName="xAxis"
    *     yAxisName="yAxis"
    *     displayType="Candlestick"
    *     lowMemberPath="Low"
    *     highMemberPath="High"
    *     openMemberPath="Open"
    *     closeMemberPath="Close"
    *     volumeMemberPath="Volume"
    * 	isTransitionInEnabled="true" />
    *
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    * series.isTransitionInEnabled= true;
    * ```
    */
    get isTransitionInEnabled() {
        return this.i.ri;
    }
    set isTransitionInEnabled(v) {
        this.i.ri = ensureBool(v);
    }
    /**
     * Overridden by derived series classes to indicate when negative colors are supported or not.
    */
    get isNegativeColorSupported() {
        return this.i.d3;
    }
    bindAxes(axes) {
        super.bindAxes(axes);
        for (let i = 0; i < axes.length; i++) {
            if (this.xAxisName && this.xAxisName.length > 0 &&
                axes[i].name == this.xAxisName) {
                this.xAxis = axes[i];
            }
        }
        for (let i = 0; i < axes.length; i++) {
            if (this.yAxisName && this.yAxisName.length > 0 &&
                axes[i].name == this.yAxisName) {
                this.yAxis = axes[i];
            }
        }
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {
            return this.xAxis;
        }
        if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {
            return this.yAxis;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.xAxis && this.xAxis._styling) {
            this.xAxis._styling(container, component, this);
        }
        if (this.yAxis && this.yAxis._styling) {
            this.yAxis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.hw(item, memberPathName);
        return (iv);
    }
    getPreviousOrExactIndex(world, skipUnknowns) {
        let iv = this.i.hj(toPoint(world), skipUnknowns);
        return (iv);
    }
    getNextOrExactIndex(world, skipUnknowns) {
        let iv = this.i.hh(toPoint(world), skipUnknowns);
        return (iv);
    }
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    *
    * The `getOffsetValue` method returns the offset value for this series if grouped on a category axis.
    *
    * ```ts
    * number offset= series.getOffsetValue();
    * ```
    */
    getOffsetValue() {
        let iv = this.i.getOffsetValue();
        return (iv);
    }
    /**
     * Returns the width of the category grouping this series is in.
    
    *
    * The `getCategoryWidth` method returns the width of the category grouping this series is in.
    *
    * ```ts
    * number width = series.getCategoryWidth();
    * ```
    */
    getCategoryWidth() {
        let iv = this.i.getCategoryWidth();
        return (iv);
    }
    getSeriesValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.pl(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    getSeriesValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.gj(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesHighValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.gf(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesLowValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.gh(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesCloseValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.r3(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesOpenValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.r4(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesVolumeValue(world, useInterpolation, skipUnknowns) {
        let iv = this.i.r5(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    }
    getSeriesHighValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.ph(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    getSeriesLowValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.pj(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    getSeriesOpenValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.tj(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    getSeriesCloseValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.ti(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    getSeriesVolumeValuePosition(world, useInterpolation, skipUnknowns) {
        let iv = this.i.tk(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    }
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    *
    * Use `canUseAsYAxis` method to determine if the object can be used as YAxis.
    *
    * ```ts
    *   boolean canY =series.canUseAsYAxis(yAxis);
    * ```
    */
    canUseAsYAxis(axis) {
        let iv = this.i.re(axis);
        return (iv);
    }
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    *
    * Use `canUseAsXAxis` method to determine if the object can be used as XAxis.
    *
    * ```ts
    *   boolean canX =series.canUseAsXAxis(xAxis);
    * ```
    */
    canUseAsXAxis(axis) {
        let iv = this.i.rd(axis);
        return (iv);
    }
    /**
     * Gets the precise item index, if possible, based on the closeness to the previous or next whole integer. If the series cannot provide this information, GetExactItemIndex will return the same integer value as GetItemIndex.
    
    * @param world  * The world position for which to return the index.
    *
    * The `getExactItemIndex` method gets the precise item index, if possible, based on the closeness to the previous or next whole integer.
    *
    * If the series cannot provide this information, GetExactItemIndex will return the same integer value as GetItemIndex.
    *
    * ```ts
    * number index = series.getExactItemIndex(world);
    * ```
    */
    getExactItemIndex(world) {
        let iv = this.i.f5(toPoint(world));
        return (iv);
    }
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    *
    * The `getItemIndex` method gets the index of the item that resides at the provided world coordinates.
    *
    * ```ts
    * number itemindex= series.getItemIndex(world);
    * ```
    */
    getItemIndex(world) {
        let iv = this.i.hd(toPoint(world));
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    *
    * The `getItem` method gets the item that is the best match for the specified world coordinates.
    */
    getItem(world) {
        let iv = this.i.ht(toPoint(world));
        return (iv);
    }
    setNegativeColors(negativeBrush, negativeOutline) {
        this.i.mm(stringToBrush(negativeBrush), stringToBrush(negativeOutline));
    }
    /**
     * Event raised when Assigning Category Style
    *
    * The `AssigningCategoryStyle` event raised when assigning Category Style.
    *
    * ```ts
    * series.assigningCategoryStyle= this.chart_AssigningCategoryStyle;
    * chart_AssigningCategoryStyle(sender :any,args: AssigningCategoryStyleEventArgs )
    *   {
    *
    *
    *   }
    * ```
    *
    * ```ts
    * <IgrDataChart
    *     ref={this.onChartRef}
    *     dataSource={this.data}
    *     width="100%"
    *     height="100%" >
    *
    *     <IgrCategoryXAxis name="xAxis" label="Label" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrFinancialPriceSeries
    *         name="series1"
    *         xAxisName="xAxis"
    *         yAxisName="yAxis"
    *         highMemberPath="High"
    *         lowMemberPath="Low"
    *         closeMemberPath="Close"
    *         openMemberPath="Open"
    *         volumeMemberPath="Volume"
    *         trendLineType={this.state.trendLineType}
    *         displayType= "Candlestick"
    *         trendLinePeriod = {2}
    *         actualTrendLineBrush= "blue"
    *         assigningCategoryStyle ={this.chart_assigningCategoryStyle}/>
    *
    * </IgrDataChart>
    * ```
    *
    * ```ts
    * series.assigningCategoryStyle= this.chart_AssigningCategoryStyle;
    * chart_AssigningCategoryStyle(sender :IgrFinancialSeries,args: AssigningCategoryStyleEventArgs )
    *   {
    *
    *
    *   }
    * ```
    */
    get assigningCategoryStyle() {
        return this._assigningCategoryStyle;
    }
    set assigningCategoryStyle(ev) {
        if (this._assigningCategoryStyle_wrapped !== null) {
            this.i.assigningCategoryStyle = delegateRemove(this.i.assigningCategoryStyle, this._assigningCategoryStyle_wrapped);
            this._assigningCategoryStyle_wrapped = null;
            this._assigningCategoryStyle = null;
        }
        this._assigningCategoryStyle = ev;
        this._assigningCategoryStyle_wrapped = (o, e) => {
            let outerArgs = new IgrAssigningCategoryStyleEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeAssigningCategoryStyle) {
                this.beforeAssigningCategoryStyle(this, outerArgs);
            }
            if (this._assigningCategoryStyle) {
                this._assigningCategoryStyle(this, outerArgs);
            }
        };
        this.i.assigningCategoryStyle = delegateCombine(this.i.assigningCategoryStyle, this._assigningCategoryStyle_wrapped);
        ;
    }
    /**
     * Handle this event in order to perform a custom typical price calculation.
    *
    * Use `Typical` event to perform a custom typical price calculation.
    *
    * ```ts
    * series.typical= this.chart_typical;
    *
    *   chart_typical(sender :any,args: FinancialEventArgs )
    *   {
    *
    *
    *   }
    * ```
    *
    * ```ts
    * <IgrDataChart
    *     ref={this.onChartRef}
    *     dataSource={this.data}
    *     width="100%"
    *     height="100%" >
    *
    *     <IgrCategoryXAxis name="xAxis" label="Label" />
    *     <IgrNumericYAxis name="yAxis" />
    *
    *     <IgrFinancialPriceSeries
    *         name="series1"
    *         xAxisName="xAxis"
    *         yAxisName="yAxis"
    *         highMemberPath="High"
    *         lowMemberPath="Low"
    *         closeMemberPath="Close"
    *         openMemberPath="Open"
    *         volumeMemberPath="Volume"
    *         trendLineType={this.state.trendLineType}
    *         displayType= "Candlestick"
    *         trendLinePeriod = {2}
    *         actualTrendLineBrush= "blue"
    *         typical ={this.chart_typical}/>
    *
    * </IgrDataChart>
    * ```
    *
    * ```ts
    *  this.financialSeries.typical=this.chart_typical;
    *     }
    *     public chart_typical =( s:IgrFinancialSeries, e: FinancialEventArgs) => {
    *
    *        }
    * ```
    */
    get typical() {
        return this._typical;
    }
    set typical(ev) {
        if (this._typical_wrapped !== null) {
            this.i.typical = delegateRemove(this.i.typical, this._typical_wrapped);
            this._typical_wrapped = null;
            this._typical = null;
        }
        this._typical = ev;
        this._typical_wrapped = (o, e) => {
            let outerArgs = new IgrFinancialEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeTypical) {
                this.beforeTypical(this, outerArgs);
            }
            if (this._typical) {
                this._typical(this, outerArgs);
            }
        };
        this.i.typical = delegateCombine(this.i.typical, this._typical_wrapped);
        ;
    }
    /**
     * Handle this event in order to specify which columns the Typical price calculation is based on.
    *
    * Use `TypicalBasedOn` event to specify which columns the Typical price calculation is based on.
    *
    * ```ts
    *    series.typicalBasedOn= this.chart_typicalBasedOn;
    *     chart_typicalBasedOn(sender :any,args: FinancialEventArgs )
    *   {
    *
    *   }
    * ```
    *
    * ````ts
    *    <IgrDataChart
    *        ref={this.onChartRef}
    *        dataSource={this.data}
    *        width="100%"
    *        height="100%" >
    *
    *        <IgrCategoryXAxis name="xAxis" label="Label" />
    *        <IgrNumericYAxis name="yAxis" />
    *
    *        <IgrFinancialPriceSeries
    *            name="series1"
    *            xAxisName="xAxis"
    *            yAxisName="yAxis"
    *            highMemberPath="High"
    *            lowMemberPath="Low"
    *            closeMemberPath="Close"
    *            openMemberPath="Open"
    *            volumeMemberPath="Volume"
    *            trendLineType={this.state.trendLineType}
    *            displayType= "Candlestick"
    *            trendLinePeriod = {2}
    *            actualTrendLineBrush= "blue"
    *            typicalBasedOn ={this.chart_typicalBasedOn}/>
    *
    *    </IgrDataChart>
    * 	```
    *
    * ```ts
    * this.financialSeries.typicalBasedOn=this.chart_typicalBasedOn;
    * public chart_typicalBasedOn =( s:IgrFinancialSeries, e: FinancialEventArgs) => {
    *
    * }
    * ````
    */
    get typicalBasedOn() {
        return this._typicalBasedOn;
    }
    set typicalBasedOn(ev) {
        if (this._typicalBasedOn_wrapped !== null) {
            this.i.typicalBasedOn = delegateRemove(this.i.typicalBasedOn, this._typicalBasedOn_wrapped);
            this._typicalBasedOn_wrapped = null;
            this._typicalBasedOn = null;
        }
        this._typicalBasedOn = ev;
        this._typicalBasedOn_wrapped = (o, e) => {
            let outerArgs = new IgrFinancialEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeTypicalBasedOn) {
                this.beforeTypicalBasedOn(this, outerArgs);
            }
            if (this._typicalBasedOn) {
                this._typicalBasedOn(this, outerArgs);
            }
        };
        this.i.typicalBasedOn = delegateCombine(this.i.typicalBasedOn, this._typicalBasedOn_wrapped);
        ;
    }
}
