/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, fromEnum, typeCast, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { BrushUtil } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-react-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-react-core";
import { timeSpanFromDays } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-react-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
export let FinancialChart = /*@__PURE__*/ (() => {
    class FinancialChart extends XYChart {
        constructor() {
            super();
            this.acl = null;
            this.ae9 = null;
            this.ae7 = null;
            this.ae4 = null;
            this.ae6 = null;
            this.ae8 = null;
            this.ae5 = null;
            this.abr = null;
            this.afr = null;
            this.afs = null;
            this.afo = null;
            this.aft = null;
            this.afu = null;
            this.afp = null;
            this.afq = null;
            this.ac9 = null;
            this.aej = 40;
            this.acf = null;
            this.acd = null;
            this.ach = null;
            this.acm = null;
            this.af2 = null;
            this.ac5 = null;
            this.adv = false;
            this.adu = false;
            this.ad2 = false;
            this.adh = false;
            this.aff = 10;
            this.ael = NaN;
            this.aen = NaN;
            this.aem = NaN;
            this.aeo = 0;
            this.abx = 0;
            this.ab0 = 0;
            this.ab2 = 0;
            this.adc = true;
            this.abt = 0;
            this.add = false;
            this.ab7 = null;
            this.ab9 = null;
            this.ad4 = null;
            this.adf = true;
            this.ade = false;
            this.adg = false;
            this.ac6 = null;
            this.ab4 = 1;
            this.aav = null;
            this.aaw = null;
            this.aax = null;
            this.aay = null;
            this.aa0 = null;
            this.aaz = null;
            this.aau = null;
            this.aat = null;
            this.aek = 1;
            this.aei = 1;
            this.aeh = 2;
            this.aeg = 1;
            this.acj = null;
            this.afb = -2147483648;
            this.aef = 2;
            this.afe = 3;
            this.afc = 10;
            this.afa = 30;
            this.afd = 9;
            this.abo = null;
            this.abp = null;
            this.abk = null;
            this.applyCustomIndicators = null;
            this.ajq = null;
            this.aep = 1;
            this.adb = false;
            this.acb = null;
            this.aec = dateMinValue();
            this.aeb = dateMaxValue();
            this.ad9 = null;
            this.pp();
            this.ad9 = new ObservableCollection$1(Base.$, 0);
            if (this.xAxisBreaks != null) {
                let a = this.xAxisBreaks;
                a.collectionChanged = delegateCombine(a.collectionChanged, (a, b) => this.ajf());
            }
            this.ai0();
        }
        qv(a, b, c) {
            super.qv(a, b, c);
            switch (a) {
                case "ToolbarTemplate":
                case "RangeSelectorTemplate":
                    this.abs = new FinancialChartToolbar(this, this.afz);
                    break;
                case "Toolbar":
                    let d = b;
                    if (d != null) {
                        d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.aio));
                        d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.air));
                        d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.ais));
                        d.l(null);
                    }
                    if (this.abs != null) {
                        this.abs.ac = this.abz;
                        this.abs.ai = this.c2;
                        this.abs.y = this.abu;
                        this.abs.al = this.ads;
                        if (this.ae6 != null) {
                            this.abs.l(this.ae6);
                        }
                        let e = this.abs;
                        e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.aio));
                        ;
                        let f = this.abs;
                        f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.air));
                        let g = this.abs;
                        g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.ais));
                    }
                    break;
                case "ChartType":
                    if (this.abs != null) {
                        this.abs.y = this.abu;
                    }
                    break;
                case "VolumeType":
                    if (this.abs != null) {
                        this.abs.ac = this.abz;
                    }
                    break;
                case "TrendLineType":
                    if (this.abs != null) {
                        this.abs.ai = this.c2;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.abs == null) {
                        break;
                    }
                    this.abs.al = this.ads;
                    this.setGridRows();
                    break;
            }
        }
        ais(a, b) {
            this.abz = this.abs.ac;
        }
        air(a, b) {
            this.c2 = this.abs.ai;
        }
        aio(a, b) {
            this.abu = this.abs.y;
        }
        ai0() {
            this.acl = new IndicatorPane();
            this.acc = TypeRegistrar.create("FinancialLegend");
        }
        provideGrid(a) {
            this.ae9 = a;
            this.ajl();
            this.setGridRows();
            if (this.abs != null) {
                this.abs.bg(a);
            }
        }
        onDocumentClick(a) {
            if (this.abs != null) {
                this.abs.bl(a);
            }
        }
        getContext() {
            let a = this.abs.v();
            let b = new FinancialChartContext();
            b.vm = new FinancialChartViewModel();
            b.vm.toolbar = a;
            b.container = this.iu;
            b.toolbarContainer = this.ae6;
            b.legendContainer = this.ae5;
            b.indicatorsContainer = this.ae4;
            b.volumeContainer = this.ae7;
            b.zoomContainer = this.ae8;
            return b;
        }
        provideContainer(a) {
            let b = a;
            if (b != null) {
                let c = "financialChartMainGrid";
                let d = b.createElement("div");
                d.setStyleProperty("width", "100%");
                d.setStyleProperty("height", "100%");
                if (this.abs == null) {
                    this.abs = new FinancialChartToolbar(this, this.afz);
                }
                this.abs.w.isIndicatorMenuVisible = this.adj && this.adk;
                this.ae6 = b.getSubRenderer(d);
                this.abs.l(this.ae6);
                let e = b.createElement("div");
                e.setStyleProperty("width", "100%");
                e.setStyleProperty("height", "100%");
                let f = b.createElement("div");
                f.setStyleProperty("width", "100%");
                f.setStyleProperty("height", "100%");
                this.ae5 = b.getSubRenderer(f);
                let g = b.createElement("div");
                g.setStyleProperty("width", "100%");
                g.setStyleProperty("height", "100%");
                this.ae4 = b.getSubRenderer(g);
                let h = b.createElement("div");
                h.setStyleProperty("width", "100%");
                h.setStyleProperty("height", "100%");
                this.ae7 = b.getSubRenderer(h);
                let i = b.createElement("div");
                i.setStyleProperty("width", "100%");
                i.setStyleProperty("height", "100%");
                this.ae8 = b.getSubRenderer(i);
                a = b.getSubRenderer(e);
            }
            else {
                this.ae6 = null;
                if (this.abs != null) {
                    this.abs.l(null);
                }
                if (this.ada != null) {
                    this.ada.provideContainer(null);
                    this.ada = null;
                }
                if (this.acc != null) {
                    this.acc.provideContainer(null);
                }
            }
            super.provideContainer(a);
            if (b != null) {
                if (this.volumeChart != null) {
                    this.volumeChart.provideContainer(this.ae7);
                }
                if (this.acl != null) {
                    this.acl.h(this.ae4);
                }
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.provideContainer(this.ae8);
                    if (a != null) {
                        this.ah8();
                    }
                    else {
                        this.ada = null;
                    }
                }
                if (this.acc != null) {
                    this.acc.provideContainer(this.ae5);
                }
                this.setGridRows();
            }
        }
        ajb(a, b, c) {
            if (a != null) {
                a.provideContainer(null);
            }
            if (b != null) {
                b.provideContainer(c);
            }
            this.setGridRows();
        }
        ajp(a, b) {
            this.ajb(a, b, this.ae8);
            if (b == null) {
                return;
            }
            this.ah8();
        }
        ah8() {
            if (this.ae8 == null) {
                return;
            }
            if (this.ada != null) {
                this.ada.provideContainer(null);
            }
            this.ada = TypeRegistrar.create("ZoomSlider");
            this.ada.provideContainer(this.ae8);
            let a = this.ada;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, (a, b) => {
                if (this.dataChart != null) {
                    this.dataChart.sv = new Rect(0, this.ada.windowRect.left, this.dataChart.sf.top, this.ada.windowRect.width, this.dataChart.sf.height);
                }
            });
            this.ah9();
        }
        ajn(a, b) {
            this.ajb(a, b, this.ae7);
        }
        setGridRows() {
            if (this.ae9 == null) {
                return;
            }
            let a = new Array(6);
            a[0] = (this.ads ? this.aev : 0) + "px";
            a[1] = this.ado ? "min-content" : "0px";
            a[2] = "auto";
            a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
            a[4] = this.volumeChart == null ? "0px" : "100px";
            a[5] = this.zoomSliderChart == null ? "0px" : "100px";
            if (this.ada != null) {
                if (a[5] == "0px") {
                    this.ada.hide();
                }
                else {
                    this.ada.show();
                }
            }
            this.ae9.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin(" ", ...a), "auto", "1fr"));
            this.ae9.setStyleProperty("grid-template-rows", stringJoin(" ", ...a));
            if (this.iu == null) {
                return;
            }
            if (this.dataChart != null) {
                this.dataChart.notifyContainerResized();
            }
            if (this.acl != null) {
                this.acl.f();
            }
            if (this.volumeChart != null) {
                this.volumeChart.notifyContainerResized();
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.notifyContainerResized();
            }
            if (this.ada != null) {
                this.ada.notifySizeChanged();
            }
        }
        p7() {
            super.p7();
            this.t7 = 1;
            this.zm = 0;
            this.v4 = 0;
            this.aag = null;
            this.z9 = AxisDefaults.g;
            this.vo = AxisDefaults.e;
            this.vn = AxisDefaults.f;
            this.aaa = AxisDefaults.j;
            this.z6 = null;
            this.ajr = AxisDefaults.h;
            this.ae3 = AxisDefaults.b;
            this.es = true;
            this.el = true;
            this.em = false;
            this.aq = 0;
            this.g3 = Defaults.j;
            this.sh = Defaults.ae;
            this.sc = Defaults.af;
            this.sd = Defaults.ag;
            this.hn = NaN;
            this.hf = 40;
            this.e0 = true;
            this.e6 = false;
            if (this.dataChart != null) {
                let a = this.dataChart.cq.j.e();
                this.aa3 = a.d;
                this.aa4 = a.e;
                this.aa2 = a.d;
                this.ajr = this.dataChart.w0;
            }
            let b = new BrushCollection();
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8BDC5C";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8961A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#6DB1FF";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#82E9D9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#EA3C63";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#735656";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#F8CE4F";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#A8A8B7";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#E051A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#FF903B";
                return $ret;
            })()));
            let c = new BrushCollection();
            for (let d of fromEnum(b)) {
                c.add(BrushUtil.m(d, 0.3));
            }
            this.aa5 = c;
            this.aa6 = b;
        }
        ai7() {
            if (this.acl != null) {
                this.acl.b = null;
                this.acl.b = this.indicatorCharts;
            }
            this.setGridRows();
        }
        ai8() {
            this.setGridRows();
        }
        ajh() {
            this.ai7();
        }
        ah7() {
            if (this.ada == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
                return;
            }
            let a = this.iu.rootWrapper.width();
            let b = this.dataChart.su.left + this.dataChart.su.width;
            let c = this.dataChart.su.left;
            let d = a - b;
            this.ada.startInset = c - this.ada.trackStartInset;
            this.ada.endInset = d - this.ada.trackEndInset;
            if (this.ada.endInset < 0) {
                let e = this.ada.endInset;
                this.ada.endInset = 0;
                this.dataChart.gn += (e * -1);
            }
            if (this.ada.startInset < 0) {
                let f = this.ada.startInset;
                this.ada.startInset = 0;
                this.dataChart.gk += (f * -1);
            }
            this.zoomSliderChart.gk = c;
            this.zoomSliderChart.gn = d;
            this.zoomSliderChart.f9 = this.ada.barExtent;
        }
        aiy() {
            this.ah7();
        }
        p4(a) {
            super.p4(a);
            if (a != null) {
                a.f8 = 0;
            }
        }
        ajs(a) {
            return a.r8();
        }
        ajv() {
            return this.ae5 == null ? null : this.aju(this.ae5.rootWrapper);
        }
        ajt(a) {
            if (a == null || a.d == null) {
                return null;
            }
            return this.aju(a.d.rootWrapper);
        }
        aju(a) {
            if (a == null) {
                return null;
            }
            let b = a.getOffset();
            return new Rect(0, b.left, b.top, a.width(), a.height());
        }
        aeq() {
            if (this.ae9 == null) {
                return NaN;
            }
            let a = this.ae9.getOffset();
            return this.ae9.width() + (a == null ? 0 : a.left);
        }
        qf(source_, a, b) {
            super.qf(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.lt(source_, a, b);
            }
        }
        qg(source_, a, b) {
            super.qg(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.lu(source_, a, b);
            }
        }
        qe(source_) {
            super.qe(source_);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.lm(source_);
            }
        }
        qi(source_, a, b, c) {
            super.qi(source_, a, b, c);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.lv(source_, a, b, c);
            }
        }
        qa(a, b) {
            super.qa(a, b);
            if (this.adp(a)) {
                a.toolTip = null;
            }
        }
        get abs() {
            return this.abr;
        }
        set abs(a) {
            let b = this.abs;
            if (a != b) {
                this.abr = a;
                this.qt("Toolbar", b, this.abs);
            }
        }
        get afy() {
            return this.afr;
        }
        set afy(a) {
            let b = this.afy;
            if (a != b) {
                this.afr = a;
                this.qt("RangeSelectorTemplate", b, this.afy);
            }
        }
        get afz() {
            return this.afs;
        }
        set afz(a) {
            let b = this.afz;
            if (a != b) {
                this.afs = a;
                this.qt("ToolbarTemplate", b, this.afz);
            }
        }
        get afv() {
            return this.afo;
        }
        set afv(a) {
            let b = this.afv;
            if (a != b) {
                this.afo = a;
                this.qt("ChartTypePickerTemplate", b, this.afv);
            }
        }
        get af0() {
            return this.aft;
        }
        set af0(a) {
            let b = this.af0;
            if (a != b) {
                this.aft = a;
                this.qt("TrendLineTypePickerTemplate", b, this.af0);
            }
        }
        get af1() {
            return this.afu;
        }
        set af1(a) {
            let b = this.af1;
            if (a != b) {
                this.afu = a;
                this.qt("VolumeTypePickerTemplate", b, this.af1);
            }
        }
        get afw() {
            return this.afp;
        }
        set afw(a) {
            let b = this.afw;
            if (a != b) {
                this.afp = a;
                this.qt("IndicatorMenuTemplate", b, this.afw);
            }
        }
        get afx() {
            return this.afq;
        }
        set afx(a) {
            let b = this.afx;
            if (a != b) {
                this.afq = a;
                this.qt("OverlayPickerTemplate", b, this.afx);
            }
        }
        get ada() {
            return this.ac9;
        }
        set ada(a) {
            let b = this.ada;
            if (a != b) {
                this.ac9 = a;
                this.qt("ZoomSlider", b, this.ada);
            }
        }
        get_hf() {
            return super.get_hf();
        }
        set_hf(a) {
            super.set_hf(a);
        }
        get_e0() {
            return super.get_e0();
        }
        set_e0(a) {
            super.set_e0(a);
        }
        get aev() {
            return this.aej;
        }
        set aev(a) {
            let b = this.aev;
            if (a != b) {
                this.aej = a;
                this.qt("ToolbarHeight", b, this.aev);
            }
        }
        tw() {
            return this.xAxis;
        }
        tx() {
            return this.yAxis;
        }
        onAttachedToUI() {
            super.onAttachedToUI();
            if (this.ada != null) {
                this.ada.onAttachedToUI();
            }
        }
        onDetachedFromUI() {
            super.onDetachedFromUI();
            if (this.ada != null) {
                this.ada.onDetachedFromUI();
            }
        }
        at(a) {
            return 20;
        }
        get_fl() {
            return ((() => {
                let $ret = new List$1(DataSeriesType_$type, 0);
                $ret.add(20);
                return $ret;
            })());
        }
        get fl() {
            return this.get_fl();
        }
        get_fk() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleFinancialPriceSeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get fk() {
            return this.get_fk();
        }
        abe(a) {
            return this.abf(a);
        }
        acs(a) {
            return this.act(a);
        }
        abd(a) {
            let b = this.abe(0);
            b.name = a;
            return b;
        }
        pl() {
            this.xAxis = this.abd("xAxis");
            this.yAxis = this.acs(0);
            this.yAxis.name = "yAxis";
            this.volumeAxis = this.acs(0);
            this.volumeAxis.name = "volumeAxis";
            this.volumeXAxis = this.abd("volumeXAxis");
            this.ad6 = new List$1(NumericYAxis.$, 0);
            this.ad8 = new List$1(CategoryAxisBase.$, 0);
            this.indicatorAxis = this.acs(0);
            this.indicatorAxis.name = "indicatorAxis";
            this.indicatorXAxis = this.abd("indicatorXAxis_0");
            this.ad6.add(this.indicatorAxis);
            this.ad8.add(this.indicatorXAxis);
            if (this.xAxis.ay == null) {
                this.xAxis.ay = new AxisLabelSettings();
            }
            if (this.yAxis.ay == null) {
                this.yAxis.ay = new AxisLabelSettings();
            }
            if (this.volumeAxis.ay == null) {
                this.volumeAxis.ay = new AxisLabelSettings();
            }
            if (this.volumeXAxis.ay == null) {
                this.volumeAxis.ay = new AxisLabelSettings();
            }
            if (this.indicatorAxis.ay == null) {
                this.indicatorAxis.ay = new AxisLabelSettings();
            }
            if (this.indicatorXAxis.ay == null) {
                this.indicatorXAxis.ay = new AxisLabelSettings();
            }
            this.zoomSliderAxis = this.acs(0);
            this.zoomSliderAxis.name = "zoomSliderAxis";
            this.zoomSliderXAxis = this.abd("zoomSliderXAxis");
            if (this.zoomSliderAxis.ay == null) {
                this.zoomSliderAxis.ay = new AxisLabelSettings();
            }
            if (this.zoomSliderXAxis.ay == null) {
                this.zoomSliderXAxis.ay = new AxisLabelSettings();
            }
        }
        pi(a, b) {
            let c = typeCast(MarkerSeries.$, a);
            if (c != null) {
                c.qc = this.b6(a, b);
            }
        }
        b5(a) {
            if (a != null) {
                return 1;
            }
            return super.b5(a);
        }
        rb(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.lg = true;
                this.yAxis.l7 = 10;
            }
        }
        re() {
            this.yAxis.lg = this.adz;
            this.yAxis.l7 = this.afn;
        }
        abw(a) {
            let b;
            if (this.abu == 0) {
                if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                    b = 4;
                }
                else {
                    b = 2;
                }
            }
            else {
                b = this.abu;
            }
            b = this.abv(b);
            return b;
        }
        abv(a) {
            if ((a == 1 || a == 2)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        ab5(a) {
            if ((a == 2 || a == 3)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 5;
            }
            if (a == 5) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 6;
            }
            if (a == 6) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        aby(a) {
            if (a == 2) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 1;
            }
            if (a == 1) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        aga(a) {
            let b = a.getMemberPathFor(14);
            if (stringIsNullOrEmpty(b)) {
                b = a.getMemberPathFor(11);
            }
            return b;
        }
        abf(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createXAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        act(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createYAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        acz() {
            return this.cg(1);
        }
        ac0() {
            return this.cg(0);
        }
        acy() {
            return this.cg(2);
        }
        ac1() {
            return this.cg(20);
        }
        get adi() {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        }
        get acg() {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        }
        get adl() {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        }
        get ace() {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get adj() {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        }
        get aci() {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get adk() {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        }
        get acn() {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        }
        cf(a, b) {
            let c = this.aga(a);
            switch (this.abw(a)) {
                case 3:
                    let d = this.acz();
                    this.acg.setValueMemberPath(d, c);
                    this.acg.setXAxis(d, this.xAxis);
                    this.acg.setYAxis(d, this.yAxis);
                    this.acg.setCategoryMode(d, 1);
                    return d;
                case 4:
                    let e = this.ac0();
                    this.acg.setValueMemberPath(e, c);
                    this.acg.setXAxis(e, this.xAxis);
                    this.acg.setYAxis(e, this.yAxis);
                    this.acg.setCategoryMode(e, 1);
                    return e;
                default:
                case 1:
                case 2:
                    let f = this.ac1();
                    this.ace.setOpenMemberPath(f, a.getMemberPathFor(11));
                    this.ace.setHighMemberPath(f, a.getMemberPathFor(12));
                    this.ace.setLowMemberPath(f, a.getMemberPathFor(13));
                    this.ace.setCloseMemberPath(f, a.getMemberPathFor(14));
                    this.ace.setVolumeMemberPath(f, a.getMemberPathFor(15));
                    this.ace.setXAxis(f, this.xAxis);
                    this.ace.setYAxis(f, this.yAxis);
                    this.ace.setDisplayType(f, this.abu == 1 ? 1 : 0);
                    this.ace.setCategoryMode(f, 1);
                    return f;
            }
        }
        rd() {
            super.rd();
            this.aiw(this.xAxis);
            this.ajj(false);
            if (this.abz != 0 && this.volumeChart != null) {
                this.ai2();
            }
            this.aiw(this.volumeXAxis);
            this.aiw(this.indicatorXAxis);
            this.ajg();
            this.aji();
            if (this.ab6 != 0) {
                this.ai3();
                this.aiw(this.zoomSliderXAxis);
            }
        }
        y8(a, b) {
            super.y8(a, b);
            a(this.volumeXAxis);
            if (this.ad8 != null) {
                for (let c of fromEnum(this.ad8)) {
                    a(c);
                }
            }
            let d = true;
            switch (b) {
                case "XAxisMajorStroke":
                case "XAxisMajorStrokeThickness":
                    d = false;
                    break;
            }
            if (d) {
                a(this.zoomSliderXAxis);
            }
        }
        zd(a, b) {
            super.zd(a, b);
            if (b) {
                a(this.volumeAxis);
                if (this.ad6 != null) {
                    for (let c of fromEnum(this.ad6)) {
                        a(c);
                    }
                }
                a(this.zoomSliderAxis);
            }
        }
        zb(a) {
            super.zb(a);
            this.y2(this.volumeXAxis, a);
            this.y2(this.indicatorXAxis, a);
            this.y2(this.zoomSliderXAxis, a);
        }
        zg(a) {
            super.zg(a);
            this.y2(this.volumeAxis, a);
            this.y2(this.indicatorAxis, a);
            this.y2(this.zoomSliderAxis, a);
        }
        ze(a) {
            super.ze(a);
            this.y1(this.volumeAxis, a);
            this.y1(this.indicatorAxis, a);
            this.y1(this.zoomSliderAxis, a);
        }
        y9(a) {
            super.y9(a);
            this.y1(this.volumeXAxis, a);
            this.y1(this.indicatorXAxis, a);
            this.y1(this.zoomSliderXAxis, a);
        }
        p3(a) {
            super.p3(a);
            if (a == null) {
                return;
            }
            if (a == this.zoomSliderChart) {
                a.tq = a.tt = false;
                a.legend = null;
                if (this.dataChart != null) {
                    a.ag = this.dataChart.ag;
                    a.aj = this.dataChart.aj;
                }
            }
            else {
                SyncManager.d(a, ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = this.ag5();
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })()));
                SyncManager.c(a);
            }
            a.ce = 2;
        }
        ag5() {
            if (this.af2 == null) {
                FinancialChart.afm++;
                this.af2 = FinancialChart.afm.toString();
            }
            return this.af2;
        }
        aii(a, b) {
            this.ah4();
            this.aiy();
        }
        ah4() {
            if (this.yAxis.b7()) {
                return;
            }
            let a = this.yAxis.av.bd;
            if (this.abz != 0) {
                a = Math.max(a, this.volumeAxis.av.bd);
            }
            for (let b of fromEnum(this.ad6)) {
                a = Math.max(a, b.av.bd);
            }
            this.ah5(a);
        }
        ah5(a) {
            if (this.yAxis.b7()) {
                return;
            }
            this.yAxis.er = this.volumeAxis.er = a;
            for (let b of fromEnum(this.ad6)) {
                b.er = a;
            }
            this.zoomSliderAxis.er = this.yAxis.er;
        }
        aia(a) {
            if (this.indicatorCharts == null) {
                return;
            }
            for (let b = 0; b < this.indicatorCharts.count; b++) {
                let c = this.indicatorCharts._inner[b];
                for (let d = 0; d < c.series.count; d++) {
                    let e = c.series._inner[d];
                    if (!(this.adn(e))) {
                        continue;
                    }
                    a(c.series._inner[d], b);
                }
            }
        }
        aid(a) {
            if (this.volumeChart == null) {
                return;
            }
            for (let b = 0; b < this.volumeChart.series.count; b++) {
                let c = this.volumeChart.series._inner[b];
                if (c.dc) {
                    continue;
                }
                a(this.volumeChart.series._inner[b], b);
            }
        }
        aib(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!this.adp(c)) {
                    continue;
                }
                a(c, b);
            }
        }
        aic(a, b) {
            if (this.dataChart == null) {
                return;
            }
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.adp(d)) {
                    continue;
                }
                let e = this.afg(d, c);
                a(d, e);
            }
            if (b) {
                this.aie(a);
            }
        }
        aie(a) {
            if (this.zoomSliderChart == null) {
                return;
            }
            for (let b = 0; b < this.zoomSliderChart.series.count; b++) {
                let c = this.zoomSliderChart.series._inner[b];
                if (c.dc) {
                    continue;
                }
                a(this.zoomSliderChart.series._inner[b], b);
            }
        }
        afg(a, b) {
            if (a.cb != this.dataChart) {
                return b;
            }
            let c = this.au == null || this.au.dataSeries == null ? 0 : this.au.dataSeries.count;
            let d = this.aca == null ? 0 : this.aca.count;
            return b - (c * d);
        }
        pt(a) {
            super.pt(a);
            this.aid(a);
            this.aia(a);
            this.aie(a);
        }
        get volumeChart() {
            return this.ac5;
        }
        set volumeChart(a) {
            let b = this.volumeChart;
            if (a != b) {
                this.ac5 = a;
                this.qt("VolumeChart", b, this.volumeChart);
            }
        }
        ai2() {
            if (this.dataChart == null) {
                return;
            }
            this.volumeChart.series.clear();
            let a = new List$1(Series.$, 0);
            let b = -1;
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.adp(d) || d.dc) {
                    continue;
                }
                b++;
                let e;
                let f = this.abz;
                f = this.aby(f);
                switch (f) {
                    case 2:
                        e = this.ac0();
                        break;
                    case 3:
                        e = this.acy();
                        break;
                    default:
                    case 1:
                        e = this.acz();
                        break;
                }
                this.acg.setCategoryMode(e, 1);
                e.name = "volumeSeries_" + b;
                e.itemsSource = d.itemsSource;
                this.acg.setXAxis(e, this.volumeXAxis);
                this.acg.setYAxis(e, this.volumeAxis);
                this.acg.setValueMemberPath(e, this.au != null && this.au.dataSeries != null && this.au.dataSeries.count > b ? this.au.dataSeries._inner[b].getMemberPathFor(15) : null);
                e.title = d.title + " Volume";
                e.o2 = ArrayExtension.getModulus$1(Brush.$, this.aa7, b);
                e.o7 = ArrayExtension.getModulus$1(Brush.$, this.aa8, b);
                e.gz = this.aew;
                a.add(e);
            }
            let g = this.fh("volume", false);
            if (g != null) {
                a.o(g);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.volumeChart.series.add(i);
                this.p8(i, h);
            }
        }
        adm(a) {
            if (!this.adi) {
                return false;
            }
            return this.acg.matchesType(a);
        }
        adq(a) {
            if (!this.adl) {
                return false;
            }
            return this.ace.matchesType(a);
        }
        adn(a) {
            if (!this.adj) {
                return false;
            }
            return this.aci.matchesType(a);
        }
        adp(a) {
            if (!this.adk) {
                return false;
            }
            return this.acn.matchesType(a);
        }
        ai1() {
            if (this.dataChart == null) {
                return;
            }
            let a = 0;
            let b = this.ab8 == null ? 0 : this.ab8.count;
            let c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let d = b + c;
            for (let e = 0; e < d; e++) {
                let f = new List$1(Series.$, 0);
                let g = this.indicatorCharts._inner[e];
                let h = e >= b;
                let i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.ab8._inner[e]);
                let j = -1;
                for (let k = 0; k < this.dataChart.series.count; k++) {
                    let l = this.dataChart.series._inner[k];
                    if (this.adp(l) || l.dc) {
                        continue;
                    }
                    j++;
                    let m;
                    if (h) {
                        let n = this.ac2("Custom");
                        this.aci.handleCustomIndicatorEvent(n, runOn(this, this.aig));
                        m = n;
                    }
                    else {
                        m = this.ac4(this.ab8._inner[e]);
                    }
                    if (m == null) {
                        continue;
                    }
                    m.name = "indicator_" + a++;
                    this.aci.setXAxis(m, this.ad8._inner[e]);
                    this.aci.setYAxis(m, this.ad6._inner[e]);
                    m.itemsSource = l.itemsSource;
                    this.aci.setOpenMemberPath(m, this.au.dataSeries._inner[j].getMemberPathFor(11));
                    this.aci.setHighMemberPath(m, this.au.dataSeries._inner[j].getMemberPathFor(12));
                    this.aci.setLowMemberPath(m, this.au.dataSeries._inner[j].getMemberPathFor(13));
                    this.aci.setCloseMemberPath(m, this.au.dataSeries._inner[j].getMemberPathFor(14));
                    this.aci.setVolumeMemberPath(m, this.au.dataSeries._inner[j].getMemberPathFor(15));
                    m.title = l.title + " " + i;
                    m.o2 = ArrayExtension.getModulus$1(Brush.$, this.aa1, e);
                    m.gz = this.aes;
                    if (this.adn(m)) {
                        this.aci.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.aa2, e));
                        this.aci.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.ack, e));
                    }
                    if (this.afi != -2147483648 && this.adn(m)) {
                        this.aci.setPeriodOverride(m, this.afi);
                    }
                    if (this.adn(m)) {
                        this.aci.setSmoothingPeriod(m, this.afl);
                    }
                    if (this.adn(m)) {
                        this.aci.setSignalPeriod(m, this.afk);
                    }
                    if (this.adn(m)) {
                        this.aci.setShortPeriod(m, this.afj);
                        this.aci.setLongPeriod(m, this.afh);
                    }
                    this.p8(m, e);
                    f.add(m);
                }
                let o = this.fh(i, false);
                for (let p = 0; p < f.count; p++) {
                    let q = f._inner[p];
                    g.series.add(q);
                }
                if (o != null) {
                    for (let r = 0; r < o.count; r++) {
                        let s = o._inner[r];
                        g.series.add(s);
                        this.p8(s, r);
                    }
                }
            }
        }
        ac2(indicatorName_) {
            return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
        }
        ac4(a) {
            return this.ac2(EnumUtil.getName(FinancialIndicatorType_$type, a));
        }
        ajj(a) {
            if (this.abs == null) {
                return;
            }
            let b = this.xAxis;
            if (b.actualMinimumValue > b.actualMaximumValue) {
                return;
            }
            this.abs.as = b.actualMinimumValue;
            this.abs.ar = b.actualMaximumValue;
            if (a) {
                this.abs.au = b.visibleMinimum;
                this.abs.at = b.visibleMaximum;
            }
            this.abs.bn();
        }
        iv() {
            let a = ((() => {
                let $ret = new FinancialChartVisualData();
                $ret.mainChart = super.iv();
                $ret.volumeChart = this.volumeChart == null ? null : this.volumeChart.u2();
                $ret.toolbar = this.abs == null ? null : this.abs.aj();
                $ret.zoomChart = this.zoomSliderChart == null ? null : this.zoomSliderChart.u2();
                return $ret;
            })());
            if (this.indicatorCharts != null) {
                a.indicatorCharts = new List$1(Base.$, 0);
                for (let b of fromEnum(this.indicatorCharts)) {
                    a.indicatorCharts.add1(b.u2());
                }
            }
            if (this.dataChart != null) {
                a.mainChartLeft = this.ajs(this.dataChart).x;
                a.mainChartTop = this.ajs(this.dataChart).y;
            }
            if (this.volumeChart != null) {
                a.volumeChartLeft = this.ajs(this.volumeChart).x;
                a.volumeChartTop = this.ajs(this.volumeChart).y;
            }
            if (this.zoomSliderChart != null) {
                a.zoomChartLeft = this.ajs(this.zoomSliderChart).x;
                a.zoomChartTop = this.ajs(this.zoomSliderChart).y;
            }
            if (this.abs != null) {
                let c = this.ajt(this.abs);
                a.toolbarLeft = c.left;
                a.toolbarTop = c.top;
                a.toolbarWidth = c.width;
                a.toolbarHeight = c.height;
            }
            if (this.indicatorCharts != null) {
                a.indicatorChartLefts = new List$1(Number_$type, 0);
                a.indicatorChartTops = new List$1(Number_$type, 0);
                for (let d of fromEnum(this.indicatorCharts)) {
                    a.indicatorChartLefts.add(this.ajs(d).x);
                    a.indicatorChartTops.add(this.ajs(d).y);
                }
            }
            let e = this.ajv();
            a.legendLeft = e.left;
            a.legendTop = e.top;
            a.legendWidth = e.width;
            a.legendHeight = e.height;
            a.legend = this.acc == null ? null : this.acc.exportVisualData();
            return a;
        }
        af7() {
            let a = this.iv();
            a.scaleByViewport();
            return a.serialize();
        }
        ac3(overlayName_) {
            return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
        }
        aji() {
            if (this.dataChart == null) {
                return;
            }
            let a = new List$1(Series.$, 0);
            for (let b of fromEnum(this.dataChart.series)) {
                if (this.adp(b)) {
                    a.add(b);
                }
            }
            for (let c of fromEnum(a)) {
                this.dataChart.series.remove(c);
            }
            if (this.aca == null) {
                return;
            }
            let d = new List$1(Series.$, 0);
            let e = -1;
            for (let f = 0; f < this.dataChart.series.count; f++) {
                let g = this.dataChart.series._inner[f];
                if (this.adp(g) || g.dc) {
                    continue;
                }
                e++;
                for (let h = 0; h < this.aca.count; h++) {
                    let i = this.aca._inner[h];
                    let j;
                    switch (i) {
                        case 1:
                            j = this.ac3(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                        default:
                        case 0:
                            j = this.ac3(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                    }
                    j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                    this.acn.setXAxis(j, this.xAxis);
                    this.acn.setYAxis(j, this.yAxis);
                    j.itemsSource = g.itemsSource;
                    let k = e * this.aca.count + h;
                    j.o2 = ArrayExtension.getModulus$1(Brush.$, this.aa5, k);
                    j.o7 = ArrayExtension.getModulus$1(Brush.$, this.aa6, k);
                    j.gz = this.aeu;
                    j.title = g.title + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                    let l = g;
                    if (l == null) {
                        continue;
                    }
                    let m = this.au.dataSeries._inner[e];
                    this.acn.setOpenMemberPath(j, m.getMemberPathFor(11));
                    this.acn.setHighMemberPath(j, m.getMemberPathFor(12));
                    this.acn.setLowMemberPath(j, m.getMemberPathFor(13));
                    this.acn.setCloseMemberPath(j, m.getMemberPathFor(14));
                    this.acn.setVolumeMemberPath(j, m.getMemberPathFor(15));
                    d.add(j);
                }
            }
            let n = new Array(this.dataChart.series.count);
            this.dataChart.series.copyTo(n, 0);
            this.dataChart.skipDataCleanup = true;
            this.dataChart.series.clear();
            this.dataChart.skipDataCleanup = false;
            for (let o = 0; o < n.length; o++) {
                n[o].index = -1;
            }
            d.o(n);
            for (let p = 0; p < d.count; p++) {
                let q = d._inner[p];
                this.dataChart.series.add(q);
                this.p8(q, p);
            }
        }
        ajg() {
            if (this.adv) {
                return;
            }
            this.adv = true;
            if (this.indicatorCharts != null) {
                let a = this.indicatorCharts;
                this.indicatorCharts = null;
                for (let b of fromEnum(a)) {
                    this.aix(b);
                }
            }
            if ((this.ab8 == null || this.ab8.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
                this.indicatorCharts = null;
                if (this.ad6 != null) {
                    this.ad6.clear();
                }
                if (this.ad8 != null) {
                    this.ad8.clear();
                }
                this.ai7();
                this.ajh();
                this.adv = false;
                return;
            }
            if (this.indicatorCharts == null) {
                this.indicatorCharts = new List$1(XamDataChart.$, 0);
            }
            this.indicatorCharts.clear();
            this.ad6.clear();
            this.ad8.clear();
            let c = this.ab8 == null ? 0 : this.ab8.count;
            let d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let e = c + d;
            for (let f = 0; f < e; f++) {
                let g = new XamDataChart();
                this.indicatorCharts.add(g);
                this.aiv(g);
                let h = f >= c;
                if (h) {
                    g.jw = this.customIndicatorNames._inner[f - c];
                }
                else {
                    g.jw = this.af9(this.ab8._inner[f]);
                }
                if (this.indicatorAxis != null) {
                    let i;
                    let j;
                    if (f == 0) {
                        i = this.indicatorAxis;
                        j = this.indicatorXAxis;
                    }
                    else {
                        i = new NumericYAxis();
                        if (!this.indicatorXAxis.cd) {
                            j = this.abe(0);
                        }
                        else {
                            j = this.abe(1);
                        }
                    }
                    j.name = "indicatorXAxis_" + f;
                    i.name = "indicatorAxis_" + f;
                    g.axes.add(i);
                    g.axes.add(j);
                    this.ad6.add(i);
                    this.ad8.add(j);
                    if (this.ei) {
                        this.y5(i);
                    }
                    if (this.ei) {
                        this.y3(j);
                    }
                }
            }
            this.ai1();
            this.ai7();
            if (this.abs != null) {
                this.abs.ae = this.ab8;
            }
            this.ah6();
            this.ajh();
            this.adv = false;
        }
        p0() {
            super.p0();
            this.y3(this.xAxis);
            this.y3(this.volumeXAxis);
            if (this.ad8 != null) {
                for (let a of fromEnum(this.ad8)) {
                    this.y3(a);
                }
            }
            this.y5(this.yAxis);
            this.y5(this.volumeAxis);
            if (this.ad6 != null) {
                for (let b of fromEnum(this.ad6)) {
                    this.y5(b);
                }
            }
            this.y3(this.zoomSliderXAxis);
            this.y5(this.zoomSliderAxis);
        }
        get_e5() {
            return !this.adt;
        }
        get ad1() {
            return (this.externalObject._dynamicContent);
        }
        ajo(a, b) {
            this.aja(a, b);
            this.ah6();
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
            }
            this.ai3();
            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
            this.ai8();
            this.ajp(a, b);
        }
        ai3() {
            if (this.dataChart == null || this.zoomSliderChart == null) {
                return;
            }
            this.zoomSliderChart.series.clear();
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (this.adp(c) || c.dc) {
                    continue;
                }
                let d;
                let e = this.ab6;
                e = this.ab5(e);
                let f = this.afg(c, b);
                if (e == 1) {
                    switch (this.abw(this.au != null && this.au.dataSeries != null && this.au.dataSeries.count > f ? this.au.dataSeries._inner[f] : null)) {
                        case 1:
                            e = 2;
                            break;
                        case 2:
                            e = 3;
                            break;
                        case 3:
                            e = 4;
                            break;
                        case 4:
                            e = 5;
                            break;
                    }
                }
                switch (e) {
                    case 2:
                        d = this.ac1();
                        this.ace.setDisplayType(d, 1);
                        break;
                    case 3:
                        d = this.ac1();
                        this.ace.setDisplayType(d, 0);
                        break;
                    case 5:
                        d = this.ac0();
                        break;
                    case 6:
                        d = this.acy();
                        break;
                    default:
                    case 4:
                        d = this.acz();
                        break;
                }
                let g = this.au != null && this.au.dataSeries != null && this.au.dataSeries.count > f ? this.au.dataSeries._inner[f] : null;
                if (d.dg && !d.dp) {
                    this.acg.setCategoryMode(d, 1);
                    this.acg.setXAxis(d, this.zoomSliderXAxis);
                    this.acg.setYAxis(d, this.zoomSliderAxis);
                    this.acg.setValueMemberPath(d, g == null ? null : this.aga(g));
                }
                else if (d.dp) {
                    this.ace.setCategoryMode(d, 1);
                    this.ace.setXAxis(d, this.zoomSliderXAxis);
                    this.ace.setYAxis(d, this.zoomSliderAxis);
                    if (g != null) {
                        this.ace.setOpenMemberPath(d, g.getMemberPathFor(11));
                        this.ace.setHighMemberPath(d, g.getMemberPathFor(12));
                        this.ace.setLowMemberPath(d, g.getMemberPathFor(13));
                        this.ace.setCloseMemberPath(d, g.getMemberPathFor(14));
                        this.ace.setVolumeMemberPath(d, g.getMemberPathFor(15));
                    }
                }
                d.name = "zoomSliderSeries_" + f;
                d.itemsSource = c.itemsSource;
                d.title = c.title;
                d.gz = this.ht;
                a.add(d);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.zoomSliderChart.series.add(i);
                this.p8(i, h);
            }
        }
        qn(a, b, c) {
            super.qn(a, b, c);
            if (a == null || !b) {
                return;
            }
            let d = true;
            let e = true;
            switch (c) {
                case "Brushes":
                case "Outlines":
                    d = e = false;
                    break;
            }
            if (this.indicatorCharts != null && d) {
                for (let f of fromEnum(this.indicatorCharts)) {
                    a(f);
                }
            }
            if (this.volumeChart != null && e) {
                a(this.volumeChart);
            }
            if (this.zoomSliderChart != null) {
                a(this.zoomSliderChart);
            }
        }
        aig(a, b) {
            let c = b;
            let d = a;
            let e = -1;
            if (this.indicatorCharts != null) {
                e = this.indicatorCharts.indexOf(d.cb);
            }
            e -= this.ab8 == null ? 0 : this.ab8.count;
            if (this.applyCustomIndicators != null) {
                this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
            }
        }
        ajc(a, b, c) {
            if (a != null) {
                if (b != null) {
                    a.axes.remove(b);
                }
                a.axes.add(c);
            }
            if (this.ei) {
                this.y3(c);
            }
        }
        get ad0() {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        }
        aih(a, b) {
            this.ajg();
        }
        adr(a, b) {
            if (b <= (0)) {
                return false;
            }
            switch (a) {
                case 5: return true;
                case 4:
                case 3: return b >= timeSpanFromDays(365);
                case 2: return b >= timeSpanFromDays(180);
                case 1: return b >= timeSpanFromDays(90);
                case 0: return b >= timeSpanFromDays(30);
            }
            return false;
        }
        ai6() {
            let a = this.abq != null ? this.abq : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
            let b = new FinancialChartRangeSelectorOptionCollection(0);
            let c = this.xAxis;
            let d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
            for (let e of fromEnum(a)) {
                if (this.adr(e, d)) {
                    b.add(e);
                }
            }
            this.abp = b;
            if (this.abs != null) {
                this.abs.u = this.abp;
            }
        }
        ail(a, b) {
            this.ai6();
        }
        aiq(a, b) {
            this.aca = this.abs.ag;
        }
        aip(a, b) {
            this.ab8 = this.abs.ae;
        }
        aij(a, b) {
            this.ajg();
        }
        aik(a, b) {
            this.aji();
        }
        aiu(a, b) {
            let c = a;
            if (c.bf == null) {
                return;
            }
            if (this.adt) {
                this.ai5(c.bf);
            }
        }
        aix(a) {
            SyncManager.e(a);
            a.axes.clear();
            a.series.clear();
            a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.aii));
            a.provideContainer(null);
            if (this.volumeChart == null && this.indicatorCharts == null) {
                this.yAxis.er = this.volumeAxis.er = this.indicatorAxis.er = 0;
                this.xAxis.ay.visibility = this.aar;
            }
        }
        aiv(a) {
            let b = a != this.zoomSliderChart;
            if (b) {
                if (this.dataChart != null) {
                    a.sv = new Rect(0, this.dataChart.sf.x, a.sv.y, this.dataChart.sf.width, a.sv.height);
                }
                let c = ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = "one";
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })());
                SyncManager.d(a, c);
                SyncManager.c(a);
            }
            a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.aii));
            this.p2(a);
        }
        ah6() {
            if (this.indicatorCharts != null || this.volumeChart != null) {
                this.y1(this.xAxis, (a) => a.visibility = 1);
            }
            for (let a = 0; a < this.ad8.count; a++) {
                let b = this.ad8._inner[a];
                let c = a < this.ad8.count - 1 || this.volumeChart != null;
                this.y1(b, (d) => d.visibility = c ? 1 : 0);
            }
        }
        aja(a, b) {
            if (a != null) {
                this.aix(a);
            }
            if (b != null) {
                this.aiv(b);
            }
        }
        ajm(a, b) {
            this.aja(a, b);
            this.ah6();
            if (this.volumeChart != null) {
                if (this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.volumeChart.axes.add(this.volumeXAxis);
                }
                this.ai2();
                this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
            }
            this.ajn(a, b);
        }
        aim(a, b) {
            this.ajk();
        }
        ajk() {
            if (this.abs == null || +(this.abs.au) == +(dateMaxValue()) || +(this.abs.at) == +(dateMinValue()) || this.dataChart == null) {
                return;
            }
            let a = this.xAxis;
            let b = a.getWindowRectForSelection(this.abs.au, this.abs.at);
            if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
                return;
            }
            this.adu = true;
            this.dataChart.sv = new Rect(0, b.left, this.dataChart.sv.top, b.width, this.dataChart.sv.height);
            if (this.ada != null) {
                this.ada.windowRect = this.dataChart.sf;
            }
            if (this.adt) {
                this.ai5(this.dataChart);
            }
            this.adu = false;
        }
        ait(a, b) {
            this.ai6();
            this.ajj(!this.adu);
        }
        aif(a, b) {
            if (!this.adu) {
                if (this.adt) {
                    this.ai5(a);
                }
                let c = false;
                let d = this.qy(() => this.ajj(true), c);
                c = d.p1;
                if (this.ada != null) {
                    this.ada.windowRect = this.dataChart.sf;
                }
            }
        }
        aje(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            if (c != -1) {
                this.adu = true;
                a.sv = new Rect(0, d, a.sf.top, c, a.sf.height);
                this.adu = false;
            }
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = new Rect(0, 0, 0, 1, 1);
            let h = new ScalerParams(0, g, g, this.yAxis.cg, a.sj);
            for (let i of fromEnum(a.series)) {
                h.b = i.gc();
                let j = i.aq(a.sf);
                let k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                let l = b.ei(j.c, h);
                let m = b.ei(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
            let n = a.sf.width;
            if (c != -1) {
                n = c;
            }
            let o = a.sf.left;
            if (d != -1) {
                o = d;
            }
            if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
                return;
            }
            this.adu = true;
            let p = new Rect(0, o, e, n, f - e);
            a.sv = p;
            this.adu = false;
        }
        ajd(a) {
            if (a == null) {
                return;
            }
            if (a == this.dataChart) {
                this.aje(this.dataChart, this.yAxis, -1, -1);
                if (this.volumeChart != null) {
                    this.aje(this.volumeChart, this.volumeAxis, this.dataChart.sf.width, this.dataChart.sf.left);
                }
            }
            else if (a == this.volumeChart) {
                this.aje(this.volumeChart, this.volumeAxis, -1, -1);
                this.aje(this.dataChart, this.yAxis, this.volumeChart.sf.width, this.volumeChart.sf.left);
            }
        }
        ai5(a) {
            this.qx(() => this.ajd(a));
        }
        ain(a, b) {
            if (this.adt) {
                this.ai5(a);
            }
        }
        ajl() {
            if (!this.ad1) {
                return;
            }
            this.ah9();
            if (this.ab6 == 0) {
                this.zoomSliderChart = null;
            }
            else if (this.zoomSliderChart == null) {
                this.zoomSliderChart = ((() => {
                    let $ret = new XamDataChart();
                    $ret.name = "ZoomSliderChart";
                    return $ret;
                })());
            }
            else {
                this.ai3();
            }
        }
        ah9() {
            let container_ = this.ae8.rootWrapper.getNativeElement();
            let containerParent_ = container_.parentElement;
            if (this.ada != null && containerParent_ != null && !this.ad2) {
                this.ad2 = true;
                if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                    let z_ = this.ada;
                    let f_ = this.externalObject;
                    let sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                    let sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                    sliderInstance_._implementation = z_;
                    sliderComponent_._staticStyling(container_, sliderInstance_, f_);
                }
            }
        }
        ajf() {
            if (this.ab1 != 1) {
                return;
            }
            this.y7((a) => {
                let b;
                b = a.breaks;
                b.clear();
                if (this.xAxisBreaks == null) {
                    return;
                }
                for (let c of fromEnum(this.xAxisBreaks)) {
                    b.add(c);
                }
            });
        }
        ri(a, b, c) {
            super.ri(a, b, c);
            if (this.au.dataSeries.count > 0) {
                if (this.ab1 == 1 && stringIsNullOrEmpty(this.j1)) {
                    this.bk.setXMemberPath(a, c.getMemberPathFor(17));
                }
                if (stringIsNullOrEmpty(this.j3)) {
                    this.bk.setYMemberPath(a, this.aga(c));
                }
                if (stringIsNullOrEmpty(this.jx)) {
                    this.bk.setLabelMemberPath(a, this.aga(c));
                }
                if (stringIsNullOrEmpty(this.ju)) {
                    this.bk.setContentMemberPath(a, this.aga(c));
                }
            }
        }
        af9(a) {
            switch (a) {
                case 0: return "Absolute Volume Oscillator";
                case 1: return "Accumulation/Distribution Indicator";
                case 2: return "Average Directional Index";
                case 3: return "Average True Range Indicator";
                case 4: return "Bollinger Bandwidth";
                case 5: return "Chaikin Oscillator";
                case 6: return "Chaikin Volatility Indicator";
                case 7: return "Commodity Channel Index";
                case 8: return "Detrended Price Oscillator";
                case 9: return "Ease of Movement Indicator";
                case 10: return "Fast Stochastic Oscillator";
                case 11: return "Force Index Indicator";
                case 12: return "Full Stochastic Oscillator";
                case 13: return "Market Facilitation Index";
                case 14: return "Mass Index Indicator";
                case 15: return "Median Price Indicator";
                case 16: return "Money Flow Index";
                case 17: return "MACD Indicator";
                case 18: return "Negative Volume Index";
                case 19: return "On Balance Volume Indicator";
                case 20: return "Percentage Price Oscillator";
                case 21: return "Percentage Volume Oscillator";
                case 22: return "Positive Volume Index";
                case 23: return "Price Volume Trend";
                case 24: return "ROC - Rate of Change Indicator";
                case 25: return "RSI - Relative Strength Index";
                case 26: return "Slow Stochastic Oscillator";
                case 27: return "Standard Deviation Indicator";
                case 28: return "Stoch RSI";
                case 29: return "TRIX Indicator";
                case 30: return "Typical Price Indicator";
                case 31: return "Ultimate Oscillator";
                case 32: return "Weighted Close Indicator";
                case 33: return "Williams %R Indicator";
                default: return "Unknown";
            }
        }
        y3(a) {
            super.y3(a);
            let b = a;
            this.aiw(b);
            if (a.bf != null) {
                for (let c of fromEnum(a.bf.series)) {
                    if (this.adm(c)) {
                        this.acg.setXAxis(c, b);
                    }
                    else if (this.adq(c)) {
                        this.ace.setXAxis(c, b);
                    }
                    else if (this.adn(c)) {
                        this.aci.setXAxis(c, b);
                    }
                    else if (this.adp(c)) {
                        this.acn.setXAxis(c, b);
                    }
                }
            }
            let d = a == this.zoomSliderXAxis;
            if (d) {
                a.jv = this.ajr;
                a.eq = this.ae3;
                this.y1(a, (e) => e.visibility = 1);
            }
            let e = a;
            e.minimumValue = this.aee;
            e.maximumValue = this.aed;
            a.b0 = this.adw;
        }
        y5(a) {
            super.y5(a);
            if (a.bf != null && a == this.yAxis) {
                for (let b of fromEnum(a.bf.series)) {
                    if (this.adm(b)) {
                        this.acg.setYAxis(b, this.yAxis);
                    }
                    else if (this.adq(b)) {
                        this.ace.setYAxis(b, this.yAxis);
                    }
                    else if (this.adn(b)) {
                        this.aci.setYAxis(b, this.yAxis);
                    }
                    else if (this.adp(b)) {
                        this.acn.setYAxis(b, this.yAxis);
                    }
                }
            }
            a.k8 = this.adx;
            a.l3 = this.ae1;
            a.l2 = this.ae0;
            if (a == this.yAxis) {
                a.lz = this.aez;
            }
            let c = a == this.zoomSliderAxis;
            if (c) {
                this.y1(a, (d) => d.visibility = 1);
            }
            a.b0 = this.ady;
        }
        aiw(a) {
            a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            a.fz = XYChart.wq(a, this.au.dataSeries);
            if (this.au.dataSeries.count > 0) {
                let b = this.au.dataSeries._inner[0].getMemberPathFor(17);
                a.hx(b);
            }
        }
        p8(a, b) {
            super.p8(a, b);
            if (a == null) {
                return;
            }
            let c = this.zoomSliderChart == a.cb;
            let d = this.dataChart != null && this.dataChart.series.contains(a);
            if ((d || c) && a.d3) {
                a.mm(this.aa3 != null ? ArrayExtension.getModulus$1(Brush.$, this.aa3, b) : null, this.aa4 != null ? ArrayExtension.getModulus$1(Brush.$, this.aa4, b) : null);
            }
            let e = this.adn(a);
            if (this.adp(a)) {
                a.o2 = this.aa5 != null ? ArrayExtension.getModulus$1(Brush.$, this.aa5, b) : null;
                a.o7 = this.aa6 != null ? ArrayExtension.getModulus$1(Brush.$, this.aa6, b) : null;
                a.gz = this.aeu;
            }
            else if (e) {
                a.o2 = this.aa1 != null ? ArrayExtension.getModulus$1(Brush.$, this.aa1, b) : null;
                a.gz = this.aes;
            }
            else if (!a.dc && (d || c)) {
                a.o2 = this.aa != null ? ArrayExtension.getModulus$1(Brush.$, this.aa, b) : null;
                a.o7 = this.ae != null ? ArrayExtension.getModulus$1(Brush.$, this.ae, b) : null;
            }
            let f = this.volumeChart != null && this.volumeChart == a.cb;
            if (f) {
                a.gz = this.aew;
            }
            a.legend = c || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.ado ? this.acc : null;
        }
        qt(a, b, c) {
            super.qt(a, b, c);
            switch (a) {
                case "YAxisIsLogarithmic":
                    this.yAxis.lg = this.adz;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.lg = this.adz;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.lg = this.adz;
                    }
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.l7 = this.afn;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.l7 = this.afn;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.l7 = this.afn;
                    }
                    break;
                case "VolumeType":
                    let d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                    if (this.abz == 0) {
                        this.volumeChart = null;
                    }
                    else if (this.volumeChart == null) {
                        this.volumeChart = ((() => {
                            let $ret = new XamDataChart();
                            $ret.name = "VolumeChart";
                            return $ret;
                        })());
                    }
                    else {
                        this.ai2();
                    }
                    break;
                case "VolumeChart":
                    this.ajm(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "DataChart":
                    if (typeCast(XamDataChart.$, b) !== null) {
                        let e = b;
                        e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.aii));
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.aif));
                        e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.ain));
                    }
                    if (this.dataChart != null) {
                        let f = this.dataChart;
                        f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.aii));
                        let g = this.dataChart;
                        g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.aif));
                        let h = this.dataChart;
                        h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.ain));
                    }
                    this.ajl();
                    break;
                case "XAxisMode":
                    this.xAxis = this.abe(this.ab1);
                    this.xAxis.name = "xAxis";
                    this.volumeXAxis = this.abe(this.ab1);
                    this.volumeXAxis.name = "volumeXAxis";
                    this.indicatorXAxis = this.abe(this.ab1);
                    this.indicatorXAxis.name = "indicatorXAxis_0";
                    this.zoomSliderXAxis = this.abe(this.ab1);
                    this.zoomSliderXAxis.name = "zoomSliderXAxis";
                    this.y1(this.zoomSliderXAxis, (i) => i.visibility = 1);
                    this.ah6();
                    if (this.ab1 == 1) {
                        this.ajf();
                    }
                    break;
                case "YAxisMode":
                    this.yAxis = this.acs(this.ab3);
                    this.yAxis.name = "yAxis";
                    this.zoomSliderAxis = this.acs(this.ab3);
                    this.zoomSliderAxis.name = "zoomSliderAxis";
                    this.volumeAxis = this.acs(this.ab3);
                    this.volumeAxis.name = "volumeAxis";
                    break;
                case "Toolbar":
                    let i = typeCast(FinancialChartToolbar.$, b);
                    if (i != null) {
                        i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.aim));
                        i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.aip));
                        i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.aiq));
                    }
                    if (this.abs != null) {
                        this.abs.ae = this.ab8;
                        this.abs.ag = this.aca;
                        this.abs.u = this.abp;
                        this.ajj(true);
                        let j = this.abs;
                        j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.aim));
                        let k = this.abs;
                        k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.aip));
                        let l = this.abs;
                        l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.aiq));
                    }
                    break;
                case "XAxis":
                    let m = typeCast(CategoryAxisBase.$, b);
                    if (m != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(m);
                        }
                    }
                    let n = typeCast(ITimeRangeSelectorAxis_$type, b);
                    if (n != null) {
                        n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.ait));
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.xAxis);
                    }
                    if (this.ei) {
                        this.y3(this.xAxis);
                        this.pq();
                    }
                    this.ajj(false);
                    this.ajk();
                    this.ai6();
                    let o = this.xAxis;
                    o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.ait));
                    break;
                case "ChartType":
                    this.rd();
                    break;
                case "VolumeXAxis":
                    this.ajc(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                    break;
                case "ZoomSliderXAxis":
                    this.ajc(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                    break;
                case "IndicatorXAxis":
                    this.ajg();
                    break;
                case "YAxis":
                    let p = typeCast(NumericYAxis.$, b);
                    if (p != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(p);
                        }
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.yAxis);
                    }
                    if (this.ei) {
                        this.y5(this.yAxis);
                        this.y5(this.yAxis);
                    }
                    let q = this.yAxis;
                    q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.aiu));
                    break;
                case "VolumeAxis":
                    let r = typeCast(Axis.$, b);
                    if (this.volumeChart != null && r != null) {
                        this.volumeChart.axes.remove(r);
                    }
                    if (this.volumeChart != null && this.volumeAxis != null) {
                        this.volumeChart.axes.add(this.volumeAxis);
                        this.ai2();
                    }
                    if (this.ei) {
                        this.y5(this.volumeAxis);
                    }
                    let s = this.volumeAxis;
                    s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.aiu));
                    break;
                case "IndicatorAxis":
                    if (this.indicatorCharts != null) {
                        for (let t = 0; t < this.indicatorCharts.count; t++) {
                            let u = this.indicatorCharts._inner[t];
                            let v = new List$1(Axis.$, 0);
                            for (let w of fromEnum(u.axes)) {
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                            for (let x of fromEnum(v)) {
                                u.axes.remove(x);
                            }
                            let y = null;
                            if (t == 0) {
                                y = this.indicatorAxis;
                            }
                            else if (this.ab3 == 1) {
                                y = this.acs(this.ab3);
                            }
                            else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                                y = new NumericYAxis();
                            }
                            if (y != null) {
                                u.axes.add(y);
                            }
                            if (this.ei) {
                                this.y5(y);
                            }
                        }
                    }
                    break;
                case "IsWindowSyncedToVisibleRange":
                    if (this.dataChart != null) {
                        this.dataChart.tt = this.e6 && this.e5;
                    }
                    if (this.volumeChart != null) {
                        this.volumeChart.tt = this.e6 && this.e5;
                    }
                    if (this.adt) {
                        this.ajd(this.dataChart);
                    }
                    else {
                        this.volumeChart.u0 = 1;
                    }
                    break;
                case "IndicatorTypes":
                    let z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                    if (z != null) {
                        z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.aij));
                    }
                    let aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                    if (aa != null) {
                        aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.aij));
                    }
                    this.ajg();
                    break;
                case "OverlayTypes":
                    let ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                    if (ab != null) {
                        ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.aik));
                    }
                    let ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                    if (ac != null) {
                        ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.aik));
                    }
                    this.aji();
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.zc((ad) => ad.k8 = this.adx);
                    break;
                case "YAxisMinimumValue":
                    this.zd((ad) => ad.l3 = this.ae1, false);
                    break;
                case "YAxisMaximumValue":
                    this.zd((ad) => ad.l2 = this.ae0, false);
                    break;
                case "YAxisInterval":
                    this.zd((ad) => ad.lz = this.aez, false);
                    break;
                case "Thickness":
                case "ZoomSliderType":
                    this.ajl();
                    break;
                case "ZoomSliderChart":
                    if (!this.ad0) {
                        return;
                    }
                    this.ajo(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.aic((ad, ae) => {
                        if (ad.d3) {
                            ad.mm(this.aa3 != null ? ArrayExtension.getModulus$1(Brush.$, this.aa3, ae) : null, this.aa4 != null ? ArrayExtension.getModulus$1(Brush.$, this.aa4, ae) : null);
                        }
                    }, true);
                    break;
                case "OverlayBrushes":
                    this.aib((ad, ae) => ad.o2 = this.aa5 != null ? ArrayExtension.getModulus$1(Brush.$, this.aa5, ae) : null);
                    break;
                case "OverlayOutlines":
                    this.aib((ad, ae) => ad.o7 = this.aa6 != null ? ArrayExtension.getModulus$1(Brush.$, this.aa6, ae) : null);
                    break;
                case "OverlayThickness":
                    this.aib((ad, ae) => ad.gz = this.aeu);
                    break;
                case "OverlayMultiplier":
                    this.aib((ad, ae) => this.acn.setMultiplier(ad, this.aet));
                    break;
                case "VolumeBrushes":
                    this.aid((ad, ae) => ad.o2 = ArrayExtension.getModulus$1(Brush.$, this.aa7, ae));
                    break;
                case "VolumeOutlines":
                    this.aid((ad, ae) => ad.o7 = ArrayExtension.getModulus$1(Brush.$, this.aa8, ae));
                    break;
                case "VolumeThickness":
                    this.aid((ad, ae) => ad.gz = this.aew);
                    break;
                case "IndicatorNegativeBrushes":
                    this.aia((ad, ae) => this.aci.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, this.aa2, ae)));
                    break;
                case "IndicatorBrushes":
                    this.aia((ad, ae) => ad.o2 = ArrayExtension.getModulus$1(Brush.$, this.aa1, ae));
                    break;
                case "IndicatorThickness":
                    this.aia((ad, ae) => ad.gz = this.aes);
                    break;
                case "IndicatorDisplayTypes":
                    this.aia((ad, ae) => this.aci.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.ack, ae)));
                    break;
                case "IndicatorPeriod":
                    this.aia((ad, ae) => {
                        if (this.afi == -2147483648) {
                            return;
                        }
                        this.aci.setPeriodOverride(ad, this.afi);
                    });
                    break;
                case "IndicatorMultiplier":
                    this.aia((ad, ae) => this.aci.setMultiplier(ad, this.aer));
                    break;
                case "IndicatorSmoothingPeriod":
                    this.aia((ad, ae) => this.aci.setSmoothingPeriod(ad, this.afl));
                    break;
                case "IndicatorShortPeriod":
                    this.aia((ad, ae) => this.aci.setShortPeriod(ad, this.afj));
                    break;
                case "IndicatorLongPeriod":
                    this.aia((ad, ae) => this.aci.setLongPeriod(ad, this.afh));
                    break;
                case "IndicatorSignalPeriod":
                    this.aia((ad, ae) => this.aci.setSignalPeriod(ad, this.afk));
                    break;
                case "RangeSelectorOptions":
                    let ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                    if (ad != null) {
                        ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.ail));
                    }
                    if (this.abq != null) {
                        let ae = this.abq;
                        ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.ail));
                    }
                    this.ai6();
                    break;
                case "CustomIndicatorNames":
                    let af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                    if (af != null) {
                        af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.aih));
                    }
                    if (this.customIndicatorNames != null) {
                        let ag = this.customIndicatorNames;
                        ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.aih));
                    }
                    this.ajg();
                    break;
                case "Legend":
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.legend = null;
                    }
                    break;
                case "Brushes":
                    this.aic((ah, ai) => ah.o2 = this.aa != null ? ArrayExtension.getModulus$1(Brush.$, this.aa, ai) : null, true);
                    break;
                case "Outlines":
                    this.aic((ah, ai) => ah.o7 = this.ae != null ? ArrayExtension.getModulus$1(Brush.$, this.ae, ai) : null, true);
                    break;
                case "XAxisLabelVisibility":
                    if (this.aar == 0 && this.zoomSliderXAxis != null) {
                        this.y1(this.zoomSliderXAxis, (ah) => ah.visibility = 1);
                    }
                    this.ah6();
                    break;
                case "YAxisLabelVisibility":
                    if (this.aas != 0 || this.zoomSliderAxis == null) {
                        break;
                    }
                    this.y1(this.zoomSliderAxis, (ah) => ah.visibility = 1);
                    break;
                case "ZoomSliderXAxisMajorStroke":
                    this.zoomSliderXAxis.jv = this.ajr;
                    break;
                case "ZoomSliderXAxisMajorStrokeThickness":
                    this.zoomSliderXAxis.eq = this.ae3;
                    break;
                case "FinancialChartLegend":
                case "IsLegendVisible":
                    let ah = this.ado && this.legend == null;
                    {
                        let ai = (aj, ak) => {
                            if (aj.isUsableInLegend) {
                                aj.legend = ah ? this.acc : null;
                            }
                        };
                        this.aic(ai, false);
                        this.aib(ai);
                    }
                    break;
                case "ZoomSliderAxis":
                    let aj = typeCast(Axis.$, b);
                    if (aj != null && this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.remove(aj);
                    }
                    if (this.zoomSliderAxis != null) {
                        if (this.zoomSliderChart != null) {
                            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                            this.ai3();
                            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                        }
                        if (this.ei) {
                            this.y5(this.zoomSliderAxis);
                        }
                        this.y1(this.zoomSliderAxis, (ak) => ak.visibility = 1);
                    }
                    break;
                case "XAxisMinimumValue":
                    this.y7((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.minimumValue = this.aee;
                        }
                    });
                    break;
                case "XAxisMaximumValue":
                    this.y7((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.maximumValue = this.aed;
                        }
                    });
                    break;
                case FinancialChart.ahi:
                    this.y8((ak) => ak.b0 = this.adw, a);
                    break;
                case FinancialChart.aho:
                    this.zc((ak) => ak.b0 = this.ady);
                    break;
            }
        }
        get_bi() {
            return 1;
        }
        get bi() {
            return this.get_bi();
        }
        get adz() {
            return this.adh;
        }
        set adz(a) {
            let b = this.adz;
            if (a != b) {
                this.adh = a;
                this.qt("YAxisIsLogarithmic", b, this.adz);
            }
        }
        get afn() {
            return this.aff;
        }
        set afn(a) {
            let b = this.afn;
            if (a != b) {
                this.aff = a;
                this.qt("YAxisLogarithmBase", b, this.afn);
            }
        }
        get aez() {
            return this.ael;
        }
        set aez(a) {
            let b = this.aez;
            if (a != b) {
                this.ael = a;
                this.qt("YAxisInterval", b, this.aez);
            }
        }
        get ae1() {
            return this.aen;
        }
        set ae1(a) {
            let b = this.ae1;
            if (a != b) {
                this.aen = a;
                this.qt("YAxisMinimumValue", b, this.ae1);
            }
        }
        get ae0() {
            return this.aem;
        }
        set ae0(a) {
            let b = this.ae0;
            if (a != b) {
                this.aem = a;
                this.qt("YAxisMaximumValue", b, this.ae0);
            }
        }
        get ae2() {
            return this.aeo;
        }
        set ae2(a) {
            let b = this.ae2;
            if (a != b) {
                this.aeo = a;
                this.qt("YAxisMinorInterval", b, this.ae2);
            }
        }
        get aey() {
            return this.yAxis.lv;
        }
        get aex() {
            return this.yAxis.lu;
        }
        get abz() {
            return this.abx;
        }
        set abz(a) {
            let b = this.abz;
            if (a != b) {
                this.abx = a;
                this.qt("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.abz));
            }
        }
        get ab1() {
            return this.ab0;
        }
        set ab1(a) {
            let b = this.ab1;
            if (a != b) {
                this.ab0 = a;
                this.qt("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.ab1));
            }
        }
        get ab3() {
            return this.ab2;
        }
        set ab3(a) {
            let b = this.ab3;
            if (a != b) {
                this.ab2 = a;
                this.qt("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.ab3));
            }
        }
        get ads() {
            return this.adc;
        }
        set ads(a) {
            let b = this.ads;
            if (a != b) {
                this.adc = a;
                this.qt("IsToolbarVisible", b, this.ads);
            }
        }
        get abu() {
            return this.abt;
        }
        set abu(a) {
            let b = this.abu;
            if (a != b) {
                this.abt = a;
                this.qt("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.abu));
            }
        }
        get_zm() {
            return super.get_zm();
        }
        set_zm(a) {
            super.set_zm(a);
        }
        get adt() {
            return this.add;
        }
        set adt(a) {
            let b = this.adt;
            if (a != b) {
                this.add = a;
                this.qt("IsWindowSyncedToVisibleRange", b, this.adt);
            }
        }
        get ab8() {
            return this.ab7;
        }
        set ab8(a) {
            let b = this.ab8;
            if (a != b) {
                this.ab7 = a;
                this.qt("IndicatorTypes", b, this.ab8);
            }
        }
        get aca() {
            return this.ab9;
        }
        set aca(a) {
            let b = this.aca;
            if (a != b) {
                this.ab9 = a;
                this.qt("OverlayTypes", b, this.aca);
            }
        }
        get indicatorCharts() {
            return this.ad4;
        }
        set indicatorCharts(a) {
            let b = this.indicatorCharts;
            if (a != b) {
                this.ad4 = a;
                this.qt("IndicatorCharts", b, this.indicatorCharts);
            }
        }
        get adx() {
            return this.adf;
        }
        set adx(a) {
            let b = this.adx;
            if (a != b) {
                this.adf = a;
                this.qt("YAxisAbbreviateLargeNumbers", b, this.adx);
            }
        }
        get_hn() {
            return super.get_hn();
        }
        set_hn(a) {
            super.set_hn(a);
        }
        get adw() {
            return this.ade;
        }
        set adw(a) {
            let b = this.adw;
            if (a != b) {
                this.ade = a;
                this.qt(FinancialChart.ahi, b, this.adw);
            }
        }
        get ady() {
            return this.adg;
        }
        set ady(a) {
            let b = this.ady;
            if (a != b) {
                this.adg = a;
                this.qt(FinancialChart.aho, b, this.ady);
            }
        }
        get zoomSliderChart() {
            return this.ac6;
        }
        set zoomSliderChart(a) {
            let b = this.zoomSliderChart;
            if (a != b) {
                this.ac6 = a;
                this.qt("ZoomSliderChart", b, this.zoomSliderChart);
            }
        }
        get zoomSliderAxis() {
            return this.acr;
        }
        set zoomSliderAxis(a) {
            let b = this.zoomSliderAxis;
            if (a != b) {
                this.acr = a;
                this.qt("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        }
        get zoomSliderXAxis() {
            return this.abc;
        }
        set zoomSliderXAxis(a) {
            let b = this.zoomSliderXAxis;
            if (a != b) {
                this.abc = a;
                this.qt("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        }
        get ab6() {
            return this.ab4;
        }
        set ab6(a) {
            let b = this.ab6;
            if (a != b) {
                this.ab4 = a;
                this.qt("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.ab6));
            }
        }
        get aa3() {
            return this.aav;
        }
        set aa3(a) {
            let b = this.aa3;
            if (a != b) {
                this.aav = a;
                this.qt("NegativeBrushes", b, this.aa3);
            }
        }
        get aa4() {
            return this.aaw;
        }
        set aa4(a) {
            let b = this.aa4;
            if (a != b) {
                this.aaw = a;
                this.qt("NegativeOutlines", b, this.aa4);
            }
        }
        get aa5() {
            return this.aax;
        }
        set aa5(a) {
            let b = this.aa5;
            if (a != b) {
                this.aax = a;
                this.qt("OverlayBrushes", b, this.aa5);
            }
        }
        get aa6() {
            return this.aay;
        }
        set aa6(a) {
            let b = this.aa6;
            if (a != b) {
                this.aay = a;
                this.qt("OverlayOutlines", b, this.aa6);
            }
        }
        get aa8() {
            return this.aa0;
        }
        set aa8(a) {
            let b = this.aa8;
            if (a != b) {
                this.aa0 = a;
                this.qt("VolumeOutlines", b, this.aa8);
            }
        }
        get aa7() {
            return this.aaz;
        }
        set aa7(a) {
            let b = this.aa7;
            if (a != b) {
                this.aaz = a;
                this.qt("VolumeBrushes", b, this.aa7);
            }
        }
        get aa2() {
            return this.aau;
        }
        set aa2(a) {
            let b = this.aa2;
            if (a != b) {
                this.aau = a;
                this.qt("IndicatorNegativeBrushes", b, this.aa2);
            }
        }
        get aa1() {
            return this.aat;
        }
        set aa1(a) {
            let b = this.aa1;
            if (a != b) {
                this.aat = a;
                this.qt("IndicatorBrushes", b, this.aa1);
            }
        }
        get aew() {
            return this.aek;
        }
        set aew(a) {
            let b = this.aew;
            if (a != b) {
                this.aek = a;
                this.qt("VolumeThickness", b, this.aew);
            }
        }
        get aeu() {
            return this.aei;
        }
        set aeu(a) {
            let b = this.aeu;
            if (a != b) {
                this.aei = a;
                this.qt("OverlayThickness", b, this.aeu);
            }
        }
        get aet() {
            return this.aeh;
        }
        set aet(a) {
            let b = this.aet;
            if (a != b) {
                this.aeh = a;
                this.qt("OverlayMultiplier", b, this.aet);
            }
        }
        get aes() {
            return this.aeg;
        }
        set aes(a) {
            let b = this.aes;
            if (a != b) {
                this.aeg = a;
                this.qt("IndicatorThickness", b, this.aes);
            }
        }
        get ack() {
            return this.acj;
        }
        set ack(a) {
            let b = this.ack;
            if (a != b) {
                this.acj = a;
                this.qt("IndicatorDisplayTypes", b, this.ack);
            }
        }
        get afi() {
            return this.afb;
        }
        set afi(a) {
            let b = this.afi;
            if (a != b) {
                this.afb = a;
                this.qt("IndicatorPeriod", b, this.afi);
            }
        }
        get aer() {
            return this.aef;
        }
        set aer(a) {
            let b = this.aer;
            if (a != b) {
                this.aef = a;
                this.qt("IndicatorMultiplier", b, this.aer);
            }
        }
        get afl() {
            return this.afe;
        }
        set afl(a) {
            let b = this.afl;
            if (a != b) {
                this.afe = a;
                this.qt("IndicatorSmoothingPeriod", b, this.afl);
            }
        }
        get afj() {
            return this.afc;
        }
        set afj(a) {
            let b = this.afj;
            if (a != b) {
                this.afc = a;
                this.qt("IndicatorShortPeriod", b, this.afj);
            }
        }
        get afh() {
            return this.afa;
        }
        set afh(a) {
            let b = this.afh;
            if (a != b) {
                this.afa = a;
                this.qt("IndicatorLongPeriod", b, this.afh);
            }
        }
        get afk() {
            return this.afd;
        }
        set afk(a) {
            let b = this.afk;
            if (a != b) {
                this.afd = a;
                this.qt("IndicatorSignalPeriod", b, this.afk);
            }
        }
        get abq() {
            return this.abo;
        }
        set abq(a) {
            let b = this.abq;
            if (a != b) {
                this.abo = a;
                this.qt("RangeSelectorOptions", b, this.abq);
            }
        }
        get customIndicatorNames() {
            return this.abk;
        }
        set customIndicatorNames(a) {
            let b = this.abk;
            if (a != b) {
                this.abk = a;
                this.qt("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        }
        get_e6() {
            return super.get_e6();
        }
        set_e6(a) {
            super.set_e6(a);
        }
        get ajr() {
            return this.ajq;
        }
        set ajr(a) {
            let b = this.ajr;
            if (a != b) {
                this.ajq = a;
                this.qt("ZoomSliderXAxisMajorStroke", b, this.ajr);
            }
        }
        get ae3() {
            return this.aep;
        }
        set ae3(a) {
            let b = this.ae3;
            if (a != b) {
                this.aep = a;
                this.qt("ZoomSliderXAxisMajorStrokeThickness", b, this.ae3);
            }
        }
        get ado() {
            return this.adb;
        }
        set ado(a) {
            let b = this.ado;
            if (a != b) {
                this.adb = a;
                this.qt("IsLegendVisible", b, this.ado);
            }
        }
        get acc() {
            return this.acb;
        }
        set acc(a) {
            let b = this.acc;
            if (a != b) {
                this.acb = a;
                this.qt("FinancialChartLegend", b, this.acc);
            }
        }
        get xAxis() {
            return this.abb;
        }
        set xAxis(a) {
            let b = this.xAxis;
            if (a != b) {
                this.abb = a;
                this.qt("XAxis", b, this.xAxis);
            }
        }
        get yAxis() {
            return this.acq;
        }
        set yAxis(a) {
            let b = this.yAxis;
            if (a != b) {
                this.acq = a;
                this.qt("YAxis", b, this.yAxis);
            }
        }
        get volumeAxis() {
            return this.acp;
        }
        set volumeAxis(a) {
            let b = this.volumeAxis;
            if (a != b) {
                this.acp = a;
                this.qt("VolumeAxis", b, this.volumeAxis);
            }
        }
        get volumeXAxis() {
            return this.aba;
        }
        set volumeXAxis(a) {
            let b = this.volumeXAxis;
            if (a != b) {
                this.aba = a;
                this.qt("VolumeXAxis", b, this.volumeXAxis);
            }
        }
        get indicatorAxis() {
            return this.aco;
        }
        set indicatorAxis(a) {
            let b = this.indicatorAxis;
            if (a != b) {
                this.aco = a;
                this.qt("IndicatorAxis", b, this.indicatorAxis);
            }
        }
        get indicatorXAxis() {
            return this.aa9;
        }
        set indicatorXAxis(a) {
            let b = this.indicatorXAxis;
            if (a != b) {
                this.aa9 = a;
                this.qt("IndicatorXAxis", b, this.indicatorXAxis);
            }
        }
        get ad6() {
            return this.ad3;
        }
        set ad6(a) {
            let b = this.ad6;
            if (a != b) {
                this.ad3 = a;
                this.qt("IndicatorAxes", b, this.ad6);
            }
        }
        get ad8() {
            return this.ad5;
        }
        set ad8(a) {
            let b = this.ad8;
            if (a != b) {
                this.ad5 = a;
                this.qt("IndicatorXAxes", b, this.ad8);
            }
        }
        get aee() {
            return this.aec;
        }
        set aee(a) {
            let b = this.aee;
            if (+a != +b) {
                this.aec = a;
                this.qt("XAxisMinimumValue", b, this.aee);
            }
        }
        get aed() {
            return this.aeb;
        }
        set aed(a) {
            let b = this.aed;
            if (+a != +b) {
                this.aeb = a;
                this.qt("XAxisMaximumValue", b, this.aed);
            }
        }
        get xAxisBreaks() {
            return this.ad9;
        }
    }
    FinancialChart.$t = /*@__PURE__*/ markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.afm = 0;
    FinancialChart.ahi = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    FinancialChart.aho = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return FinancialChart;
})();
/**
 * @hidden
 */
export let FinancialChartToolbar = /*@__PURE__*/ (() => {
    class FinancialChartToolbar extends TemplatedHtmlControl {
        constructor(a, b) {
            super("financialChartToolbar", b, "");
            this.o = null;
            this.r = null;
            this.z = null;
            this.p = null;
            this.w = null;
            this.aq = dateMaxValue();
            this.ap = dateMinValue();
            this.ao = dateMaxValue();
            this.an = dateMinValue();
            this.rangeChanged = null;
            this.chartTypeChanged = null;
            this.trendLineTypeChanged = null;
            this.volumeTypeChanged = null;
            this.indicatorTypesChanged = null;
            this.overlayTypesChanged = null;
            this.x = 0;
            this.ah = 0;
            this.ab = 0;
            this.ad = null;
            this.af = null;
            this.t = null;
            this.ak = false;
            this.o = a;
            this.w = new FinancialChartToolbarViewModel();
            this.s = new FinancialChartRangeSelector(a != null ? a.afy : null);
            this.aa = new FinancialChartTypePicker(a != null ? a.afv : null);
            this.q = new FinancialChartIndicatorMenu(1, a != null ? a.afw : null);
        }
        bg(a) {
            let b = a.querySelectorAll(".financialChartToolbarArea");
            if (b != null && b.length > 0) {
                this.g = b[0];
                if (!this.al) {
                    this.g.hide();
                }
            }
            let c = a.querySelectorAll(".financialChartIndicatorMenu");
            if (c != null && c.length > 0) {
                this.q.g = c[0];
            }
            let d = a.querySelectorAll(".financialChartRangeSelector");
            if (d != null && d.length > 0) {
                this.s.g = d[0];
            }
            let e = a.querySelectorAll(".financialChartTypePicker");
            if (e != null && e.length > 0) {
                this.aa.g = e[0];
            }
        }
        bl(a) {
            this.q.u(a);
            this.aa.u(a);
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        }
        get aa() {
            return this.z;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        }
        bm(a, b, c) {
            switch (a) {
                case "RangeStart":
                    if (this.s != null) {
                        this.s.t = this.as;
                    }
                    break;
                case "RangeEnd":
                    if (this.s != null) {
                        this.s.s = this.ar;
                    }
                    break;
                case "SelectionStart":
                    if (this.s != null) {
                        this.s.v = this.au;
                    }
                    break;
                case "SelectionEnd":
                    if (this.s != null) {
                        this.s.u = this.at;
                    }
                    break;
                case "RangeSelector":
                    let d = b;
                    if (d != null) {
                        d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                    }
                    if (this.s != null) {
                        this.s.t = this.as;
                        this.s.s = this.ar;
                        this.s.o = this.u;
                        this.s.v = this.au;
                        this.s.u = this.at;
                        let e = this.s;
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                    }
                    break;
                case "ChartTypePicker":
                    let f = b;
                    if (f != null) {
                        f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                    }
                    if (this.aa != null) {
                        this.aa.w = this.y;
                        let g = this.aa;
                        g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                    }
                    break;
                case "ChartType":
                    if (this.aa != null) {
                        this.aa.w = this.y;
                    }
                    break;
                case "RangeSelectorOptions":
                    if (this.s != null) {
                        this.s.o = this.u;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.g == null) {
                        break;
                    }
                    if (this.al) {
                        this.g.show();
                    }
                    else {
                        this.g.hide();
                    }
                    break;
                case "IndicatorMenu":
                    let h = typeCast(FinancialChartIndicatorMenu.$, b);
                    if (h != null) {
                        h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                    }
                    if (this.q != null) {
                        let i = this.q;
                        i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                    }
                    break;
                case "IndicatorTypes":
                    if (this.indicatorTypesChanged != null) {
                        this.indicatorTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "OverlayTypes":
                    if (this.overlayTypesChanged != null) {
                        this.overlayTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "TrendLineType":
                    if (this.trendLineTypeChanged != null) {
                        this.trendLineTypeChanged(this, EventArgs.empty);
                    }
                    break;
                case "VolumeType":
                    if (this.volumeTypeChanged != null) {
                        this.volumeTypeChanged(this, EventArgs.empty);
                    }
                    break;
            }
        }
        bh(a, b) {
            this.ag = this.q.z;
            this.ae = this.q.y;
            this.ai = this.q.aa;
            this.ac = this.q.x;
        }
        bi(a, b) {
            this.y = this.aa.w;
            if (this.chartTypeChanged != null) {
                this.chartTypeChanged(this, b);
            }
        }
        bj(a, b) {
            this.au = this.s.v;
            this.at = this.s.u;
            if (this.rangeChanged != null) {
                this.rangeChanged(this, b);
            }
        }
        v() {
            let a = new FinancialChartToolbarContext();
            a.container = this.d;
            a.vm = this.w;
            a.vm.financialChartIndicatorMenu = ((() => {
                let $ret = new FinancialChartIndicatorMenuContext();
                $ret.vm = this.q.p;
                return $ret;
            })());
            a.vm.financialChartTypePicker = ((() => {
                let $ret = new FinancialChartTypePickerContext();
                $ret.vm = this.aa.p;
                return $ret;
            })());
            a.vm.financialChartRangeSelector = ((() => {
                let $ret = new FinancialChartRangeSelectorContext();
                $ret.vm = this.s.q;
                return $ret;
            })());
            return a;
        }
        l(a) {
            super.l(a);
            if (a == null) {
                return;
            }
            this.s.l(a);
            this.aa.l(a);
            this.q.l(a);
            this.bk();
        }
        bk() {
        }
        get au() {
            return this.aq;
        }
        set au(a) {
            let b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        }
        get at() {
            return this.ap;
        }
        set at(a) {
            let b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        }
        get as() {
            return this.ao;
        }
        set as(a) {
            let b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        }
        get ar() {
            return this.an;
        }
        set ar(a) {
            let b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        }
        bn() {
            if (this.s != null) {
                this.s.ab();
            }
        }
        get y() {
            return this.x;
        }
        set y(a) {
            let b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        }
        get ac() {
            return this.ab;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        }
        get ae() {
            return this.ad;
        }
        set ae(a) {
            let b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            let b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        }
        static am(a, b) {
            if (a == b) {
                return true;
            }
            if ((a == null && b != null) || (a != null && b == null)) {
                return false;
            }
            if (a.count != b.count) {
                return false;
            }
            for (let c of fromEn(a)) {
                if (!b.contains(c)) {
                    return false;
                }
            }
            return true;
        }
        aj() {
            return ((() => {
                let $ret = new FinancialChartToolbarVisualData();
                $ret.rangeSelector = this.s == null ? null : this.s.r();
                return $ret;
            })());
        }
        get u() {
            return this.t;
        }
        set u(a) {
            let b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        }
    }
    FinancialChartToolbar.$t = /*@__PURE__*/ markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
})();
/**
 * @hidden
 */
export let FinancialChartRangeSelector = /*@__PURE__*/ (() => {
    class FinancialChartRangeSelector extends TemplatedHtmlControl {
        constructor(a) {
            super("financialChartRangeSelector", a, "");
            this.q = null;
            this.rangeChanged = null;
            this.p = null;
            this.p = new FinancialChartRangeSelectorView();
            this.q = new FinancialChartRangeSelectorViewModel();
            this.q.onRangeChanged = runOn(this, this.z);
            this.p.c = this.q;
        }
        get v() {
            return this.q.selectionStart;
        }
        set v(a) {
            this.q.selectionStart = a;
        }
        get u() {
            return this.q.selectionEnd;
        }
        set u(a) {
            this.q.selectionEnd = a;
        }
        get t() {
            return this.q.rangeStart;
        }
        set t(a) {
            this.q.rangeStart = a;
        }
        get s() {
            return this.q.rangeEnd;
        }
        set s(a) {
            this.q.rangeEnd = a;
        }
        ab() {
            if (this.q.onPropertiesChanged()) {
                this.p.g(this.q);
            }
        }
        l(a) {
            super.l(a);
            this.p.f(this.d, this.q);
        }
        z() {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, EventArgs.empty);
            }
        }
        r() {
            return this.p.d(this.g);
        }
        get o() {
            return this.q.options;
        }
        set o(a) {
            let b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        }
        aa() {
            if (this.q != null) {
                this.q.ao();
            }
            if (this.p != null) {
                this.p.i(this.o);
            }
        }
    }
    FinancialChartRangeSelector.$t = /*@__PURE__*/ markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
})();
