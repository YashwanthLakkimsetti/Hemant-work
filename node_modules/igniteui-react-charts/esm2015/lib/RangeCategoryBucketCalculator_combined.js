/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { markType, typeCast, markDep, Point_$type } from "igniteui-react-core";
import { isNaN_, truncate, isInfinity } from "igniteui-react-core";
import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { IHasHighLowValueCategory_$type } from "./IHasHighLowValueCategory";
import { RangeCategoryFramePreparer } from "./RangeCategoryFramePreparer";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { IScaler_$type } from "./IScaler";
import { CategorySeriesView } from "./CategorySeriesView";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { AxisRange } from "./AxisRange";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { CollisionAvoider } from "./CollisionAvoider";
import { ISupportsMarkers_$type } from "./ISupportsMarkers";
import { PropertyMetadata } from "igniteui-react-core";
import { FastFlattener } from "igniteui-react-core";
/**
 * @hidden
 */
export let RangeCategoryBucketCalculator = /*@__PURE__*/ (() => {
    class RangeCategoryBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
            this.j = null;
            this.l = 0;
            this.k = 0;
            this.i = null;
            this.h = null;
            this.j = a;
        }
        getBucketWithoutUnknowns(a) {
            let b = false;
            let c = this.i;
            let d = this.h;
            let e = this.l;
            let f = this.k;
            let g = Math.min(e, f);
            let h = a * this.d;
            let i = Math.min(h + this.d - 1, g - 1);
            let j = 1.7976931348623157E+308;
            let k = -1.7976931348623157E+308;
            let l = true;
            let m = 0;
            let n = 0;
            let o;
            let p;
            if (h <= i) {
                for (let q = h; q <= i; ++q) {
                    m = c[q];
                    n = d[q];
                    if (m < n) {
                        o = m;
                        p = n;
                    }
                    else {
                        p = m;
                        o = n;
                    }
                    if (!l) {
                        j = j < o ? j : o;
                        k = k > o ? k : o;
                        j = j < p ? j : p;
                        k = k > p ? k : p;
                    }
                    else {
                        j = Math.min(j, o);
                        k = Math.max(k, o);
                        k = Math.max(k, p);
                        j = Math.min(j, p);
                        l = false;
                    }
                }
            }
            if (b && n < m) {
                let r = j;
                j = k;
                k = r;
            }
            if (!l) {
                let s = new Array(3);
                s[0] = 0.5 * (h + i);
                s[1] = j;
                s[2] = k;
                return s;
            }
            let t = new Array(3);
            t[0] = NaN;
            t[1] = NaN;
            t[2] = NaN;
            return t;
        }
        getBucket(a) {
            let b = false;
            let c = this.i;
            let d = this.h;
            let e = this.l;
            let f = this.k;
            let g = Math.min(e, f);
            let h = a * this.d;
            let i = Math.min(h + this.d - 1, g - 1);
            let j = NaN;
            let k = NaN;
            let l = true;
            let m = 0;
            let n = 0;
            let o;
            let p;
            if (h <= i) {
                for (let q = h; q <= i; ++q) {
                    m = c[q];
                    n = d[q];
                    if (m < n) {
                        o = m;
                        p = n;
                    }
                    else {
                        p = m;
                        o = n;
                    }
                    if (!l) {
                        if (!isNaN_(o)) {
                            j = j < o ? j : o;
                            k = k > o ? k : o;
                        }
                        if (!isNaN_(p)) {
                            j = j < p ? j : p;
                            k = k > p ? k : p;
                        }
                    }
                    else {
                        if (!isNaN_(o)) {
                            if (isNaN_(j)) {
                                j = o;
                            }
                            else {
                                j = Math.min(j, o);
                            }
                            if (!isNaN_(k)) {
                                k = Math.max(k, o);
                            }
                        }
                        if (!isNaN_(p)) {
                            if (isNaN_(k)) {
                                k = p;
                            }
                            else {
                                k = Math.max(k, p);
                            }
                            if (!isNaN_(j)) {
                                j = Math.min(j, p);
                            }
                        }
                        if (!isNaN_(j) && !isNaN_(k)) {
                            l = false;
                        }
                    }
                }
            }
            if (n < m && b) {
                let r = j;
                j = k;
                k = r;
            }
            if (!l) {
                let s = new Array(3);
                s[0] = 0.5 * (h + i);
                s[1] = j;
                s[2] = k;
                return s;
            }
            let t = new Array(3);
            t[0] = NaN;
            t[1] = NaN;
            t[2] = NaN;
            return t;
        }
        cacheValues() {
            this.l = this.j.c0.lowColumn.count;
            this.k = this.j.c0.highColumn.count;
            this.i = this.j.c0.lowColumn.asArray();
            this.h = this.j.c0.highColumn.asArray();
        }
        unCacheValues() {
            this.i = null;
            this.h = null;
        }
    }
    RangeCategoryBucketCalculator.$t = /*@__PURE__*/ markType(RangeCategoryBucketCalculator, 'RangeCategoryBucketCalculator', CategoryBucketCalculator.$);
    return RangeCategoryBucketCalculator;
})();
/**
 * @hidden
 */
export let RangeCategorySeries = /*@__PURE__*/ (() => {
    class RangeCategorySeries extends CategorySeries {
        constructor() {
            super();
            this._RangeFramePreparer = null;
            this.th = null;
            this.tg = null;
            this.td = null;
            this.RangeFramePreparer = new RangeCategoryFramePreparer(1, this, this.tf, this, this, this.tf.cr);
        }
        bx() {
            return new RangeCategorySeriesView(this);
        }
        getHostReferenceValue() {
            return this.gc();
        }
        ly(a) {
            super.ly(a);
            this.tf = a;
        }
        get RangeFramePreparer() {
            return this._RangeFramePreparer;
        }
        set RangeFramePreparer(a) {
            this._RangeFramePreparer = a;
        }
        hw(a, b) {
            let c = this.jq(b);
            if (c == RangeCategorySeries.$$p[0]) {
                return this.hx(a, b, this.tl);
            }
            if (c == RangeCategorySeries.$$p[0]) {
                return this.hx(a, b, this.tl);
            }
            return super.hw(a, b);
        }
        get lowColumn() {
            return this.th;
        }
        set lowColumn(a) {
            if (this.th != a) {
                let b = this.th;
                this.th = a;
                this.raisePropertyChanged("LowColumn", b, this.th);
            }
        }
        get highColumn() {
            return this.tg;
        }
        set highColumn(a) {
            if (this.tg != a) {
                let b = this.tg;
                this.tg = a;
                this.raisePropertyChanged("HighColumn", b, this.tg);
            }
        }
        ry() {
            return 11;
        }
        s6(a, b) {
            super.s6(a, b);
            b.b3 = true;
            CategoryMarkerManager.e(this, a.m, b.cu, this.qg);
            this.s0(b, a);
        }
        tq(a, b, c, d, e, f) {
            this.tf.c1(a, b, c, d, e, f);
        }
        aq(a) {
            if (a.isEmpty && this.cd != null) {
                a = this.cd.sf;
            }
            let b = this.rn();
            if (this.lowColumn == null || this.highColumn == null) {
                return null;
            }
            let c = this.pq(this.b0);
            let d = new ScalerParams(0, a, this.cd.su, b.cg, this.getEffectiveViewport());
            let e = (b.el(c.left, d));
            let f = (b.el(c.right, d));
            if (b.cg) {
                let g = e;
                e = f;
                f = g;
            }
            let h = null;
            if (b.cm) {
                h = b;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            e = Math.max(0, Math.min(this.lowColumn.count - 1, e));
            f = Math.max(0, Math.min(this.lowColumn.count - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            for (let k = truncate(e); k <= truncate(f); k++) {
                let l = k;
                if (h != null) {
                    l = h.i$b._inner[k];
                }
                let m = this.lowColumn.item(l);
                if (this.lowColumn.mayContainUnknowns) {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                let n = this.highColumn.item(l);
                if (this.highColumn.mayContainUnknowns) {
                    if (isInfinity(n) || isNaN_(n)) {
                        continue;
                    }
                }
                i = Math.min(i, m);
                j = Math.max(j, n);
            }
            let o = new AxisRange(i, j);
            let p = this.r8();
            o = this.ao(o, p, a);
            return o;
        }
        en(a) {
            let b = new Rect(0, 0, 0, 1, 1);
            let c = this.b0 != null ? this.b0.bv : Rect.empty;
            c = c.copy();
            let d = this.b0 != null ? this.b0.bu : Rect.empty;
            let e = !c.isEmpty && !d.isEmpty && this.ck != null ? this.ck.indexOf(a) : -1;
            let f = this.fetchXAxis();
            let g = this.fetchYAxis();
            let h = this.ps(this.b0);
            let i;
            if (f != null) {
                let j = new ScalerParams(0, b, b, f.cg, h);
                i = f.ei(e, j);
            }
            else {
                i = NaN;
            }
            let k = f != null ? this.RangeFramePreparer.r(typeCast(ICategoryScaler_$type, f), b, b, h) : 0;
            i += k;
            if (e >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (!isNaN_(i)) {
                    if (i < c.left + 0.1 * c.width) {
                        i = i + 0.4 * c.width;
                    }
                    if (i > c.right - 0.1 * c.width) {
                        i = i - 0.4 * c.width;
                    }
                    c.x = i - 0.5 * c.width;
                }
                if (g != null && this.highColumn != null && e < this.highColumn.count) {
                    let l = new ScalerParams(0, b, b, g.cg, h);
                    l.b = this.gc();
                    let m = g.ei(this.highColumn.item(e), l);
                    let n = g.ei(this.lowColumn.item(e), l);
                    if (!isNaN_(m) && !isNaN_(n)) {
                        let o = Math.abs(n - m);
                        if (c.height < o) {
                            c.height = o;
                            c.y = Math.min(n, m);
                        }
                        else {
                            if (n < c.top + 0.1 * c.height) {
                                n = n + 0.4 * c.height;
                            }
                            if (n > c.bottom - 0.1 * c.height) {
                                n = n - 0.4 * c.height;
                            }
                            c.y = n - 0.5 * c.height;
                        }
                    }
                }
                if (this.b8 != null) {
                    this.b8.au(this.cd, c, true);
                }
            }
            return e >= 0;
        }
        l3(a, b, c, d) {
            super.l3(a, b, c, d);
            switch (b) {
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.lowColumn);
                        c.deregisterColumn(this.highColumn);
                        this.lowColumn = null;
                        this.highColumn = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.lowColumn = this.ch(this.to);
                        this.highColumn = this.ch(this.tl);
                    }
                    if (!this.si()) {
                        this.rx.cr.g(this.ft);
                        this.mh(false);
                    }
                    break;
                case RangeCategorySeries.$$p[1]:
                    if (this.ck != null) {
                        this.ck.deregisterColumn(this.lowColumn);
                        this.lowColumn = this.ch(this.to);
                    }
                    break;
                case "LowColumn":
                    if (!this.si()) {
                        this.rx.cr.g(this.ft);
                        this.mh(false);
                    }
                    break;
                case RangeCategorySeries.$$p[0]:
                    if (this.ck != null) {
                        this.ck.deregisterColumn(this.highColumn);
                        this.highColumn = this.ch(this.tl);
                    }
                    break;
                case "HighColumn":
                    if (!this.si()) {
                        this.rx.cr.g(this.ft);
                        this.mh(false);
                    }
                    break;
            }
        }
        ap(a) {
            if (this.lowColumn == null || this.lowColumn.count == 0 || this.highColumn == null || this.highColumn.count == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                let b = Math.min(this.lowColumn.count, this.highColumn.count);
                return new AxisRange(0, b - 1);
            }
            if (a == this.fetchYAxis()) {
                let c = Math.min(this.lowColumn.minimum, this.highColumn.minimum);
                let d = Math.max(this.lowColumn.maximum, this.highColumn.maximum);
                return new AxisRange(Math.min(c, d), Math.max(c, d));
            }
            return null;
        }
        k0(a, b, c, d) {
            if (this.fetchXAxis() != null && typeCast(ISortingAxis_$type, this.fetchXAxis()) !== null) {
                this.fetchXAxis().i$i();
            }
            let e = this.fetchXAxis();
            switch (a) {
                case 3:
                    if (d == this.to || d == this.tl) {
                        if (e != null) {
                            e.c0();
                        }
                        if (!this.si()) {
                            this.mh(true);
                        }
                    }
                    break;
                case 1:
                    if (e != null) {
                        e.c0();
                    }
                    this.rx.cr.g(this.ft);
                    if (!this.si()) {
                        this.mh(true);
                    }
                    break;
                case 0:
                    if (e != null) {
                        e.c0();
                    }
                    this.rx.cr.g(this.ft);
                    if (!this.si()) {
                        this.mh(true);
                    }
                    break;
                case 2:
                    if (e != null) {
                        e.c0();
                    }
                    if (this.to != null && this.tl != null && this.rx.cr.d > 0 && !this.si()) {
                        this.mh(true);
                    }
                    break;
                case 4:
                    if (e != null) {
                        e.c0();
                    }
                    this.rx.cr.g(this.ft);
                    if (!this.si()) {
                        this.mh(true);
                    }
                    break;
            }
        }
        e9(a, b, c) {
            let d = super.e9(a, b, c);
            if (this.lowColumn == null || this.lowColumn.count == 0 || this.highColumn == null || this.highColumn.count == 0) {
                d = false;
            }
            return d;
        }
        s3(a, b) {
            super.s3(a, b);
            this.RangeFramePreparer.d(a, b);
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.fetchXAxis()));
        }
        get scaler() {
            return typeCast(ICategoryScaler_$type, this.fetchXAxis());
        }
        get yScaler() {
            return typeCast(IScaler_$type, this.fetchYAxis());
        }
        get bucketizer() {
            return this.rx.cr;
        }
        get currentMode2Index() {
            return this.sr();
        }
        provideCollisionDetector() {
            return new CollisionAvoider();
        }
        get mayContainUnknowns() {
            return this.lowColumn == null || this.lowColumn.mayContainUnknowns || this.highColumn == null || this.highColumn.mayContainUnknowns;
        }
        mj(a, b) {
            let c = this.ez;
            super.mj(a, b);
            if (!c) {
                this.b0.a2(b);
                return;
            }
            this.b0.a2(b);
            if (this.cx(this.bz)) {
                return;
            }
            let d = new RangeCategoryFramePreparer(1, this, typeCast(ISupportsMarkers_$type, this.bz), this.cd.cq.o, this, this.bz.cr);
            if (!this.et) {
                this.rr = new CategoryFrame(3);
                this.rr.u();
                d.d(this.rr, this.bz);
            }
            this.et = false;
            this.s6(this.rr, this.bz);
            this.ez = false;
        }
        mg(a, b, c, d, e) {
            super.mg(a, b, c, d, e);
            let f = this.a6.a$h.item(d);
            let g = f;
            g.cr.g(this.ft);
            f.a1(c);
            if (this.cx(g)) {
                return;
            }
            let h = new RangeCategoryFramePreparer(1, this, typeCast(ISupportsMarkers_$type, f), f, this, f.cr);
            if (this.td == null) {
                this.td = new CategoryFrame(3);
            }
            this.td.u();
            h.d(this.td, g);
            this.s6(this.td, g);
        }
        gc() {
            return Series.gd(this.lowColumn, typeCast(ISortingAxis_$type, this.fetchXAxis()));
        }
        get useHighMarkerFidelity() {
            return this.sj;
        }
    }
    RangeCategorySeries.$t = /*@__PURE__*/ markType(RangeCategorySeries, 'RangeCategorySeries', CategorySeries.$, [IIsCategoryBased_$type, IHasHighLowValueCategory_$type]);
    RangeCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, RangeCategorySeries, 'raisePropertyChanged', ['HighMemberPath:tl:tr', [2, null], 'LowMemberPath:to:ts', [2, null]]);
    return RangeCategorySeries;
})();
/**
 * @hidden
 */
export let RangeCategorySeriesView = /*@__PURE__*/ (() => {
    class RangeCategorySeriesView extends CategorySeriesView {
        constructor(a) {
            super(a);
            this.c0 = null;
            this.c0 = a;
        }
        c1(a, b, c, d, e, f) {
            a.ak.clear();
            b.ak.clear();
            c.ak.clear();
            let g = FastFlattener.b(d, e, true, f, this.e.ft);
            let h = FastFlattener.b(d, e, false, f, this.e.ft);
            let i = g.count;
            let j = h.count;
            let k;
            let l;
            let m;
            let n;
            for (let o = 0; o < i; o++) {
                k = g.item(o);
                l = e._inner[k];
                m = l[0];
                n = l[1];
                a.ak.add({ $type: Point_$type, x: m, y: n });
                b.ak.add({ $type: Point_$type, x: m, y: n });
            }
            let p;
            let q;
            for (let r = 0; r < j; r++) {
                k = h.item(r);
                l = e._inner[k];
                if (f) {
                    p = l[0];
                    q = l[2];
                }
                else {
                    p = l[2];
                    q = l[3];
                }
                c.ak.add({ $type: Point_$type, x: p, y: q });
                b.ak.add({ $type: Point_$type, x: p, y: q });
            }
            a.ab = a.ak.count > 0;
            b.ab = b.ak.count > 0;
            c.ab = c.ak.count > 0;
        }
        cs() {
            return new RangeCategoryBucketCalculator(this);
        }
    }
    RangeCategorySeriesView.$t = /*@__PURE__*/ markType(RangeCategorySeriesView, 'RangeCategorySeriesView', CategorySeriesView.$);
    return RangeCategorySeriesView;
})();
