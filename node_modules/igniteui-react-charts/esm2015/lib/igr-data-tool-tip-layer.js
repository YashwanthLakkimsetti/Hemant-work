import { IgrAxis } from "./igr-axis";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { DataToolTipLayer } from "./DataToolTipLayer";
import { ensureBool, ensureEnum, brushToString, stringToBrush, arrayFindByName } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays grouped tooltips with summaries for series.
 * THIS IS A COMMUNITY TECHNOLOGY PREVIEW, not for use in production.
*/
export class IgrDataToolTipLayer extends IgrAnnotationLayer {
    createImplementation() {
        return new DataToolTipLayer();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets whether the series is an annotation layer displayed only when hovering over the chart.
    */
    get isAnnotationHoverLayer() {
        return this.i.db;
    }
    /**
     * Gets whether the default tooltip behaviors for the chart are disabled if this layer is present.
    */
    get isDefaultTooltipBehaviorDisabled() {
        return this.i.dk;
    }
    /**
     * Gets or sets the Axis to target this annotation to. If null, this annotation layer will not render content.
    */
    get targetAxis() {
        if (this.i.rg == null) {
            return null;
        }
        if (!this.i.rg.externalObject) {
            let e = IgrAxis._createFromInternal(this.i.rg);
            if (e) {
                e._implementation = this.i.rg;
            }
            this.i.rg.externalObject = e;
        }
        return this.i.rg.externalObject;
    }
    set targetAxis(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.rg = null : this.i.rg = v.i;
    }
    /**
     * Gets or sets whether to use value interpolation when drawing the tooltips.
    */
    get useInterpolation() {
        return this.i.su;
    }
    set useInterpolation(v) {
        this.i.su = ensureBool(v);
    }
    /**
     * Gets or sets the grouping mode to apply to use for the tooltip layer.
    */
    get groupingMode() {
        return this.i.ry;
    }
    set groupingMode(v) {
        this.i.ry = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
    }
    /**
     * Gets the actual resolved tooltip layer grouping mode.
    */
    get actualGroupingMode() {
        return this.i.rx;
    }
    set actualGroupingMode(v) {
        this.i.rx = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
    }
    /**
     * Gets or sets the offset of the tooltip layer on the X axis.
    */
    get positionOffsetX() {
        return this.i.s3;
    }
    set positionOffsetX(v) {
        this.i.s3 = +v;
    }
    /**
     * Gets or sets the offset of the tooltip layer on the Y axis.
    */
    get positionOffsetY() {
        return this.i.s4;
    }
    set positionOffsetY(v) {
        this.i.s4 = +v;
    }
    /**
     * Gets or sets the default offset of the tooltip layer on the X axis.
    */
    get defaultPositionOffsetX() {
        return this.i.s1;
    }
    set defaultPositionOffsetX(v) {
        this.i.s1 = +v;
    }
    /**
     * Gets or sets the default offset of the tooltip layer on the Y axis.
    */
    get defaultPositionOffsetY() {
        return this.i.s2;
    }
    set defaultPositionOffsetY(v) {
        this.i.s2 = +v;
    }
    /**
     * Gets or sets the tooltip position mode on the X axis for grouped series.
    */
    get groupedPositionModeX() {
        return this.i.rq;
    }
    set groupedPositionModeX(v) {
        this.i.rq = ensureEnum(DataTooltipGroupedPositionX_$type, v);
    }
    /**
     * Gets the actual resolved tooltip position mode on the X axis for grouped series.
    */
    get actualGroupedPositionModeX() {
        return this.i.rp;
    }
    set actualGroupedPositionModeX(v) {
        this.i.rp = ensureEnum(DataTooltipGroupedPositionX_$type, v);
    }
    /**
     * Gets or sets the tooltip position mode on the Y axis for grouped series.
    */
    get groupedPositionModeY() {
        return this.i.ru;
    }
    set groupedPositionModeY(v) {
        this.i.ru = ensureEnum(DataTooltipGroupedPositionY_$type, v);
    }
    /**
     * Gets the actual resolved tooltip position mode on the Y axis for grouped series.
    */
    get actualGroupedPositionModeY() {
        return this.i.rt;
    }
    set actualGroupedPositionModeY(v) {
        this.i.rt = ensureEnum(DataTooltipGroupedPositionY_$type, v);
    }
    /**
     * Gets or sets whether the data legend should update when the series data is mutated.
    */
    get shouldUpdateWhenSeriesDataChanges() {
        return this.i.st;
    }
    set shouldUpdateWhenSeriesDataChanges(v) {
        this.i.st = ensureBool(v);
    }
    /**
     * Gets or sets indexes or names of series to include in displaying in the data legend, e.g. "0, 1"
    */
    get includedSeries() {
        return this.i.rd;
    }
    set includedSeries(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.rd = v;
    }
    /**
     * Gets or sets indexes or names of series to exclude from displaying in the data legend, e.g. "0, 1"
     * The ExcludedSeries property takes precedences over values of IncludedSeries property
    */
    get excludedSeries() {
        return this.i.q8;
    }
    set excludedSeries(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.q8 = v;
    }
    /**
     * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedences over values of IncludedColumns property
    */
    get includedColumns() {
        return this.i.rc;
    }
    set includedColumns(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.rc = v;
    }
    /**
     * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedences over values of IncludedColumns property
    */
    get excludedColumns() {
        return this.i.q7;
    }
    set excludedColumns(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.q7 = v;
    }
    /**
     * Gets or sets mode for abbreviating large numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatAbbreviation() {
        return this.i.rh;
    }
    set valueFormatAbbreviation(v) {
        this.i.rh = ensureEnum(DataAbbreviationMode_$type, v);
    }
    /**
     * Gets or sets maximum digits for formating numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMaxFractions() {
        return this.i.t3;
    }
    set valueFormatMaxFractions(v) {
        this.i.t3 = +v;
    }
    /**
     * Gets or sets minimum digits for formating numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMinFractions() {
        return this.i.t4;
    }
    set valueFormatMinFractions(v) {
        this.i.t4 = +v;
    }
    /**
     * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
    */
    get valueFormatMode() {
        return this.i.rn;
    }
    set valueFormatMode(v) {
        this.i.rn = ensureEnum(DataLegendValueMode_$type, v);
    }
    /**
     * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatCulture() {
        return this.i.vy;
    }
    set valueFormatCulture(v) {
        this.i.vy = v;
    }
    /**
     * Gets or sets whether or not use groupping sperator, e.g, 15,000 for 15000
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatUseGrouping() {
        return this.i.sv;
    }
    set valueFormatUseGrouping(v) {
        this.i.sv = ensureBool(v);
    }
    /**
     * Gets or sets the format string for values displayed in the data legend.
    */
    get valueFormatString() {
        return this.i.v4;
    }
    set valueFormatString(v) {
        this.i.v4 = v;
    }
    /**
     * Gets or sets the format specifiers to use with the ValueFormatString string.
    */
    get valueFormatSpecifiers() {
        return this.i.re;
    }
    set valueFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.re = v;
    }
    get valueRowMarginBottom() {
        return this.i.yv ? this.i.yv.bottom : NaN;
    }
    set valueRowMarginBottom(v) {
        this.ensureValueRowMargin();
        this.i.yv.bottom = +v;
        this.i.yv = this.i.yv;
    }
    get valueRowMarginLeft() {
        return this.i.yv ? this.i.yv.left : NaN;
    }
    set valueRowMarginLeft(v) {
        this.ensureValueRowMargin();
        this.i.yv.left = +v;
        this.i.yv = this.i.yv;
    }
    get valueRowMarginRight() {
        return this.i.yv ? this.i.yv.right : NaN;
    }
    set valueRowMarginRight(v) {
        this.ensureValueRowMargin();
        this.i.yv.right = +v;
        this.i.yv = this.i.yv;
    }
    get valueRowMarginTop() {
        return this.i.yv ? this.i.yv.top : NaN;
    }
    set valueRowMarginTop(v) {
        this.ensureValueRowMargin();
        this.i.yv.top = +v;
        this.i.yv = this.i.yv;
    }
    ensureValueRowMargin() {
        if (this.i.yv) {
            return;
        }
        this.i.yv = new Thickness(2);
    }
    /**
     * Gets or sets whether to show series rows.
    */
    get valueRowVisible() {
        return this.i.sw;
    }
    set valueRowVisible(v) {
        this.i.sw = ensureBool(v);
    }
    /**
     * Gets or sets text displayed when data column is missing a value, e.g. "no data"
    */
    get valueTextWhenMissingData() {
        return this.i.wd;
    }
    set valueTextWhenMissingData(v) {
        this.i.wd = v;
    }
    /**
     * Gets or sets whether to use series colors when displaying values in the legend
    */
    get valueTextUseSeriesColors() {
        return this.i.sx;
    }
    set valueTextUseSeriesColors(v) {
        this.i.sx = ensureBool(v);
    }
    get valueTextMarginBottom() {
        return this.i.yw ? this.i.yw.bottom : NaN;
    }
    set valueTextMarginBottom(v) {
        this.ensureValueTextMargin();
        this.i.yw.bottom = +v;
        this.i.yw = this.i.yw;
    }
    get valueTextMarginLeft() {
        return this.i.yw ? this.i.yw.left : NaN;
    }
    set valueTextMarginLeft(v) {
        this.ensureValueTextMargin();
        this.i.yw.left = +v;
        this.i.yw = this.i.yw;
    }
    get valueTextMarginRight() {
        return this.i.yw ? this.i.yw.right : NaN;
    }
    set valueTextMarginRight(v) {
        this.ensureValueTextMargin();
        this.i.yw.right = +v;
        this.i.yw = this.i.yw;
    }
    get valueTextMarginTop() {
        return this.i.yw ? this.i.yw.top : NaN;
    }
    set valueTextMarginTop(v) {
        this.ensureValueTextMargin();
        this.i.yw.top = +v;
        this.i.yw = this.i.yw;
    }
    ensureValueTextMargin() {
        if (this.i.yw) {
            return;
        }
        this.i.yw = new Thickness(2);
    }
    /**
     * Gets or sets the units text color.
    */
    get valueTextColor() {
        return brushToString(this.i.yg);
    }
    set valueTextColor(v) {
        this.i.yg = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get valueTextStyle() {
        if (this.i.sk == null) {
            return null;
        }
        return this.i.sk.fontString;
    }
    set valueTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.sk = fi;
    }
    /**
     * Gets or sets the format string for header text displayed in the data legend.
    */
    get headerFormatString() {
        return this.i.um;
    }
    set headerFormatString(v) {
        this.i.um = v;
    }
    /**
     * Gets or sets the format specifiers to use with the HeaderFormatString string.
    */
    get headerFormatSpecifiers() {
        return this.i.rb;
    }
    set headerFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.rb = v;
    }
    /**
     * Gets or sets globalization culture when displaying header as date time
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatCulture() {
        return this.i.ui;
    }
    set headerFormatCulture(v) {
        this.i.ui = v;
    }
    /**
     * Gets or sets date format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatDate() {
        return this.i.ri;
    }
    set headerFormatDate(v) {
        this.i.ri = ensureEnum(DataLegendHeaderDateMode_$type, v);
    }
    /**
     * Gets or sets time format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatTime() {
        return this.i.rj;
    }
    set headerFormatTime(v) {
        this.i.rj = ensureEnum(DataLegendHeaderTimeMode_$type, v);
    }
    /**
     * Gets or sets the HeaderText for the data legend.
    */
    get headerText() {
        return this.i.ur;
    }
    set headerText(v) {
        this.i.ur = v;
    }
    /**
     * Gets or sets the header text color.
    */
    get headerTextColor() {
        return brushToString(this.i.x8);
    }
    set headerTextColor(v) {
        this.i.x8 = stringToBrush(v);
    }
    get headerTextMarginBottom() {
        return this.i.yp ? this.i.yp.bottom : NaN;
    }
    set headerTextMarginBottom(v) {
        this.ensureHeaderTextMargin();
        this.i.yp.bottom = +v;
        this.i.yp = this.i.yp;
    }
    get headerTextMarginLeft() {
        return this.i.yp ? this.i.yp.left : NaN;
    }
    set headerTextMarginLeft(v) {
        this.ensureHeaderTextMargin();
        this.i.yp.left = +v;
        this.i.yp = this.i.yp;
    }
    get headerTextMarginRight() {
        return this.i.yp ? this.i.yp.right : NaN;
    }
    set headerTextMarginRight(v) {
        this.ensureHeaderTextMargin();
        this.i.yp.right = +v;
        this.i.yp = this.i.yp;
    }
    get headerTextMarginTop() {
        return this.i.yp ? this.i.yp.top : NaN;
    }
    set headerTextMarginTop(v) {
        this.ensureHeaderTextMargin();
        this.i.yp.top = +v;
        this.i.yp = this.i.yp;
    }
    ensureHeaderTextMargin() {
        if (this.i.yp) {
            return;
        }
        this.i.yp = new Thickness(2);
    }
    get headerRowMarginBottom() {
        return this.i.yo ? this.i.yo.bottom : NaN;
    }
    set headerRowMarginBottom(v) {
        this.ensureHeaderRowMargin();
        this.i.yo.bottom = +v;
        this.i.yo = this.i.yo;
    }
    get headerRowMarginLeft() {
        return this.i.yo ? this.i.yo.left : NaN;
    }
    set headerRowMarginLeft(v) {
        this.ensureHeaderRowMargin();
        this.i.yo.left = +v;
        this.i.yo = this.i.yo;
    }
    get headerRowMarginRight() {
        return this.i.yo ? this.i.yo.right : NaN;
    }
    set headerRowMarginRight(v) {
        this.ensureHeaderRowMargin();
        this.i.yo.right = +v;
        this.i.yo = this.i.yo;
    }
    get headerRowMarginTop() {
        return this.i.yo ? this.i.yo.top : NaN;
    }
    set headerRowMarginTop(v) {
        this.ensureHeaderRowMargin();
        this.i.yo.top = +v;
        this.i.yo = this.i.yo;
    }
    ensureHeaderRowMargin() {
        if (this.i.yo) {
            return;
        }
        this.i.yo = new Thickness(2);
    }
    /**
     * Gets or sets whether to show Header row.
    */
    get headerRowVisible() {
        return this.i.sm;
    }
    set headerRowVisible(v) {
        this.i.sm = ensureBool(v);
    }
    /**
     * Gets or Sets the style to use for the header text.
    */
    get headerTextStyle() {
        if (this.i.sc == null) {
            return null;
        }
        return this.i.sc.fontString;
    }
    set headerTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.sc = fi;
    }
    /**
     * Gets or sets the summary text color.
    */
    get summaryTitleTextColor() {
        return brushToString(this.i.yb);
    }
    set summaryTitleTextColor(v) {
        this.i.yb = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the summary text.
    */
    get summaryTitleTextStyle() {
        if (this.i.sf == null) {
            return null;
        }
        return this.i.sf.fontString;
    }
    set summaryTitleTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.sf = fi;
    }
    /**
     * Gets or sets the SummaryType for the data legend.
    */
    get summaryType() {
        return this.i.rl;
    }
    set summaryType(v) {
        this.i.rl = ensureEnum(DataLegendSummaryType_$type, v);
    }
    /**
     * Gets or sets the SummaryTitleText for the data legend.
    */
    get summaryTitleText() {
        return this.i.va;
    }
    set summaryTitleText(v) {
        this.i.va = v;
    }
    get summaryTitleTextMarginBottom() {
        return this.i.ys ? this.i.ys.bottom : NaN;
    }
    set summaryTitleTextMarginBottom(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.ys.bottom = +v;
        this.i.ys = this.i.ys;
    }
    get summaryTitleTextMarginLeft() {
        return this.i.ys ? this.i.ys.left : NaN;
    }
    set summaryTitleTextMarginLeft(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.ys.left = +v;
        this.i.ys = this.i.ys;
    }
    get summaryTitleTextMarginRight() {
        return this.i.ys ? this.i.ys.right : NaN;
    }
    set summaryTitleTextMarginRight(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.ys.right = +v;
        this.i.ys = this.i.ys;
    }
    get summaryTitleTextMarginTop() {
        return this.i.ys ? this.i.ys.top : NaN;
    }
    set summaryTitleTextMarginTop(v) {
        this.ensureSummaryTitleTextMargin();
        this.i.ys.top = +v;
        this.i.ys = this.i.ys;
    }
    ensureSummaryTitleTextMargin() {
        if (this.i.ys) {
            return;
        }
        this.i.ys = new Thickness(2);
    }
    get summaryRowMarginBottom() {
        return this.i.yr ? this.i.yr.bottom : NaN;
    }
    set summaryRowMarginBottom(v) {
        this.ensureSummaryRowMargin();
        this.i.yr.bottom = +v;
        this.i.yr = this.i.yr;
    }
    get summaryRowMarginLeft() {
        return this.i.yr ? this.i.yr.left : NaN;
    }
    set summaryRowMarginLeft(v) {
        this.ensureSummaryRowMargin();
        this.i.yr.left = +v;
        this.i.yr = this.i.yr;
    }
    get summaryRowMarginRight() {
        return this.i.yr ? this.i.yr.right : NaN;
    }
    set summaryRowMarginRight(v) {
        this.ensureSummaryRowMargin();
        this.i.yr.right = +v;
        this.i.yr = this.i.yr;
    }
    get summaryRowMarginTop() {
        return this.i.yr ? this.i.yr.top : NaN;
    }
    set summaryRowMarginTop(v) {
        this.ensureSummaryRowMargin();
        this.i.yr.top = +v;
        this.i.yr = this.i.yr;
    }
    ensureSummaryRowMargin() {
        if (this.i.yr) {
            return;
        }
        this.i.yr = new Thickness(2);
    }
    /**
     * Gets or sets the units text color.
    */
    get summaryValueTextColor() {
        return brushToString(this.i.yd);
    }
    set summaryValueTextColor(v) {
        this.i.yd = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryValueTextStyle() {
        if (this.i.sh == null) {
            return null;
        }
        return this.i.sh.fontString;
    }
    set summaryValueTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.sh = fi;
    }
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryLabelText() {
        return this.i.u5;
    }
    set summaryLabelText(v) {
        this.i.u5 = v;
    }
    /**
     * Gets or sets the units text color.
    */
    get summaryLabelTextColor() {
        return brushToString(this.i.ya);
    }
    set summaryLabelTextColor(v) {
        this.i.ya = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryLabelTextStyle() {
        if (this.i.se == null) {
            return null;
        }
        return this.i.se.fontString;
    }
    set summaryLabelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.se = fi;
    }
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryUnitsText() {
        return this.i.vg;
    }
    set summaryUnitsText(v) {
        this.i.vg = v;
    }
    /**
     * Gets or sets the units text color.
    */
    get summaryUnitsTextColor() {
        return brushToString(this.i.yc);
    }
    set summaryUnitsTextColor(v) {
        this.i.yc = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryUnitsTextStyle() {
        if (this.i.sg == null) {
            return null;
        }
        return this.i.sg.fontString;
    }
    set summaryUnitsTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.sg = fi;
    }
    get badgeMarginBottom() {
        return this.i.yn ? this.i.yn.bottom : NaN;
    }
    set badgeMarginBottom(v) {
        this.ensureBadgeMargin();
        this.i.yn.bottom = +v;
        this.i.yn = this.i.yn;
    }
    get badgeMarginLeft() {
        return this.i.yn ? this.i.yn.left : NaN;
    }
    set badgeMarginLeft(v) {
        this.ensureBadgeMargin();
        this.i.yn.left = +v;
        this.i.yn = this.i.yn;
    }
    get badgeMarginRight() {
        return this.i.yn ? this.i.yn.right : NaN;
    }
    set badgeMarginRight(v) {
        this.ensureBadgeMargin();
        this.i.yn.right = +v;
        this.i.yn = this.i.yn;
    }
    get badgeMarginTop() {
        return this.i.yn ? this.i.yn.top : NaN;
    }
    set badgeMarginTop(v) {
        this.ensureBadgeMargin();
        this.i.yn.top = +v;
        this.i.yn = this.i.yn;
    }
    ensureBadgeMargin() {
        if (this.i.yn) {
            return;
        }
        this.i.yn = new Thickness(2);
    }
    /**
     * Gets or sets the BadgeShape for the data legend.
    */
    get badgeShape() {
        return this.i.r2;
    }
    set badgeShape(v) {
        this.i.r2 = ensureEnum(LegendItemBadgeShape_$type, v);
    }
    /**
     * Gets or sets the UnitsMode for the data legend.
    */
    get unitsDisplayMode() {
        return this.i.rm;
    }
    set unitsDisplayMode(v) {
        this.i.rm = ensureEnum(DataLegendUnitsMode_$type, v);
    }
    /**
     * Gets or sets the units text for the data legend.
    */
    get unitsText() {
        return this.i.vr;
    }
    set unitsText(v) {
        this.i.vr = v;
    }
    /**
     * Gets or sets the units text color.
    */
    get unitsTextColor() {
        return brushToString(this.i.yf);
    }
    set unitsTextColor(v) {
        this.i.yf = stringToBrush(v);
    }
    get unitsTextMarginBottom() {
        return this.i.yu ? this.i.yu.bottom : NaN;
    }
    set unitsTextMarginBottom(v) {
        this.ensureUnitsTextMargin();
        this.i.yu.bottom = +v;
        this.i.yu = this.i.yu;
    }
    get unitsTextMarginLeft() {
        return this.i.yu ? this.i.yu.left : NaN;
    }
    set unitsTextMarginLeft(v) {
        this.ensureUnitsTextMargin();
        this.i.yu.left = +v;
        this.i.yu = this.i.yu;
    }
    get unitsTextMarginRight() {
        return this.i.yu ? this.i.yu.right : NaN;
    }
    set unitsTextMarginRight(v) {
        this.ensureUnitsTextMargin();
        this.i.yu.right = +v;
        this.i.yu = this.i.yu;
    }
    get unitsTextMarginTop() {
        return this.i.yu ? this.i.yu.top : NaN;
    }
    set unitsTextMarginTop(v) {
        this.ensureUnitsTextMargin();
        this.i.yu.top = +v;
        this.i.yu = this.i.yu;
    }
    ensureUnitsTextMargin() {
        if (this.i.yu) {
            return;
        }
        this.i.yu = new Thickness(2);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get unitsTextStyle() {
        if (this.i.sj == null) {
            return null;
        }
        return this.i.sj.fontString;
    }
    set unitsTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.sj = fi;
    }
    get titleTextMarginBottom() {
        return this.i.yt ? this.i.yt.bottom : NaN;
    }
    set titleTextMarginBottom(v) {
        this.ensureTitleTextMargin();
        this.i.yt.bottom = +v;
        this.i.yt = this.i.yt;
    }
    get titleTextMarginLeft() {
        return this.i.yt ? this.i.yt.left : NaN;
    }
    set titleTextMarginLeft(v) {
        this.ensureTitleTextMargin();
        this.i.yt.left = +v;
        this.i.yt = this.i.yt;
    }
    get titleTextMarginRight() {
        return this.i.yt ? this.i.yt.right : NaN;
    }
    set titleTextMarginRight(v) {
        this.ensureTitleTextMargin();
        this.i.yt.right = +v;
        this.i.yt = this.i.yt;
    }
    get titleTextMarginTop() {
        return this.i.yt ? this.i.yt.top : NaN;
    }
    set titleTextMarginTop(v) {
        this.ensureTitleTextMargin();
        this.i.yt.top = +v;
        this.i.yt = this.i.yt;
    }
    ensureTitleTextMargin() {
        if (this.i.yt) {
            return;
        }
        this.i.yt = new Thickness(2);
    }
    /**
     * Gets or sets the display text color.
    */
    get titleTextColor() {
        return brushToString(this.i.ye);
    }
    set titleTextColor(v) {
        this.i.ye = stringToBrush(v);
    }
    /**
     * Gets or Sets the style to use for the display text.
    */
    get titleTextStyle() {
        if (this.i.si == null) {
            return null;
        }
        return this.i.si.fontString;
    }
    set titleTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.si = fi;
    }
    /**
     * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
    */
    get labelDisplayMode() {
        return this.i.rk;
    }
    set labelDisplayMode(v) {
        this.i.rk = ensureEnum(DataLegendLabelMode_$type, v);
    }
    /**
     * Gets or sets the units text color.
    */
    get labelTextColor() {
        return brushToString(this.i.x9);
    }
    set labelTextColor(v) {
        this.i.x9 = stringToBrush(v);
    }
    get labelTextMarginBottom() {
        return this.i.yq ? this.i.yq.bottom : NaN;
    }
    set labelTextMarginBottom(v) {
        this.ensureLabelTextMargin();
        this.i.yq.bottom = +v;
        this.i.yq = this.i.yq;
    }
    get labelTextMarginLeft() {
        return this.i.yq ? this.i.yq.left : NaN;
    }
    set labelTextMarginLeft(v) {
        this.ensureLabelTextMargin();
        this.i.yq.left = +v;
        this.i.yq = this.i.yq;
    }
    get labelTextMarginRight() {
        return this.i.yq ? this.i.yq.right : NaN;
    }
    set labelTextMarginRight(v) {
        this.ensureLabelTextMargin();
        this.i.yq.right = +v;
        this.i.yq = this.i.yq;
    }
    get labelTextMarginTop() {
        return this.i.yq ? this.i.yq.top : NaN;
    }
    set labelTextMarginTop(v) {
        this.ensureLabelTextMargin();
        this.i.yq.top = +v;
        this.i.yq = this.i.yq;
    }
    ensureLabelTextMargin() {
        if (this.i.yq) {
            return;
        }
        this.i.yq = new Thickness(2);
    }
    /**
     * Gets or Sets the style to use for the units text.
    */
    get labelTextStyle() {
        if (this.i.sd == null) {
            return null;
        }
        return this.i.sd.fontString;
    }
    set labelTextStyle(v) {
        let fi = new FontInfo();
        fi.fontString = v;
        this.i.sd = fi;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
            return this.targetAxis;
        }
        if (this.valueFormatSpecifiers != null && arrayFindByName(this.valueFormatSpecifiers, name)) {
            return arrayFindByName(this.valueFormatSpecifiers, name);
        }
        if (this.headerFormatSpecifiers != null && arrayFindByName(this.headerFormatSpecifiers, name)) {
            return arrayFindByName(this.headerFormatSpecifiers, name);
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.targetAxis && this.targetAxis._styling) {
            this.targetAxis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    hideToolTips() {
        this.i.ld();
    }
}
