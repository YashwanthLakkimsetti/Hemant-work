/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { Brush } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { runOn, markType, markDep, fromEnum } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { ArrayExtension } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
/**
 * @hidden
 */
export let WaterfallSeries = /*@__PURE__*/ (() => {
    class WaterfallSeries extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.ab = WaterfallSeries.$;
        }
        get_ek() {
            return true;
        }
        get_d2() {
            return true;
        }
        gu() {
            if (!isNaN_(this.gt)) {
                return super.gu();
            }
            return Defaults.h;
        }
        get_dt() {
            return true;
        }
        bx() {
            return new WaterfallSeriesView(this);
        }
        ly(a) {
            super.ly(a);
            this.u6 = a;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        get_d3() {
            return true;
        }
        mm(a, b) {
            super.mm(a, b);
            this.vh = a;
            this.vi = b;
        }
        o8() {
            return this.vh;
        }
        o9() {
            return this.vi;
        }
        b3() {
            if (this.b4 == 0) {
                return 2;
            }
            return super.b3();
        }
        get_c2() {
            return true;
        }
        l3(a, b, c, d) {
            super.l3(a, b, c, d);
            switch (b) {
                case WaterfallSeries.$$p[3]:
                case WaterfallSeries.$$p[2]:
                case WaterfallSeries.$$p[0]:
                case WaterfallSeries.$$p[1]:
                    this.mh(false);
                    break;
            }
        }
        ev(a, b) {
            if (this.ey(a, b)) {
                return true;
            }
            if (this.qf(a, b)) {
                return true;
            }
            return false;
        }
        pu(a) {
            if (this.u6 == null || this.u6.db == null || this.u6.db.count == 0 || this.xAxis == null) {
                return Rect.empty;
            }
            let b = this.u6.db;
            let c = this.pg(a);
            let d = -1;
            let e = this.xAxis.cg;
            let f = this.py.right * 2;
            if (e) {
                d = ArrayExtension.binarySearch$1(Rectangle.$, b, (g) => {
                    let h = this.u6.di(g);
                    return (f - c.x) < (f - (h.left + h.width / 2)) ? -1 : ((f - c.x) > (f - (h.left + h.width / 2)) ? 1 : 0);
                });
            }
            else {
                d = ArrayExtension.binarySearch$1(Rectangle.$, b, (g) => {
                    let h = this.u6.di(g);
                    return c.x < (h.left + h.width / 2) ? -1 : (c.x > (h.left + h.width / 2) ? 1 : 0);
                });
            }
            if (d < 0) {
                d = ~d;
                d--;
            }
            if (d < 0) {
                d = 0;
            }
            if (d > b.count - 1) {
                d = b.count - 1;
            }
            let g = d;
            let h = d;
            if (g < 0) {
                g--;
            }
            if (h < b.count - 1) {
                h++;
            }
            let i = this.vj(g);
            let j = this.vj(d);
            let k = this.vj(h);
            let l = i.left + i.width / 2;
            let m = j.left + j.width / 2;
            let n = k.left + k.width / 2;
            let o = Math.abs(l - c.x);
            let p = Math.abs(m - c.x);
            let q = Math.abs(n - c.x);
            let r = i.containsPoint(c);
            let s = j.containsPoint(c);
            let t = k.containsPoint(c);
            if (p <= o && p <= q) {
                if (!e && t) {
                    return k;
                }
                if (e && r) {
                    return i;
                }
                return j;
            }
            if (o <= p && o <= q) {
                if (!e && s) {
                    return j;
                }
                return i;
            }
            if (q <= p && q <= o) {
                if (e && s) {
                    return j;
                }
                return k;
            }
            return Rect.empty;
        }
        vj(a) {
            return this.u6.dh(a);
        }
        ry() {
            return 1;
        }
        kx(a, b) {
            super.kx(a, b);
            this.u6.db.count = 0;
        }
        get_tr() {
            return 1;
        }
        ga() {
            return this.un.k3(this.b0.bv, this.b0.bu, this.getEffectiveViewport1(this.b0));
        }
        s6(a, b) {
            let c = b;
            super.s6(a, b);
            let d = b.bv;
            let e = b.bu;
            let f = this.getEffectiveViewport1(b);
            let g = this.un.k3(d, e, f);
            let h = this.u7;
            let i = this.u8;
            let j;
            let k = this.tp(b);
            let l = NaN;
            let m = c.db;
            let n;
            let o = 0;
            this.rw.a0(this, this.sg(), runOn(this, this.rh), this.so(b), this.sp(b));
            this.rw.r = this.u7;
            this.rw.s = this.u8;
            this.rw.k = this.u7;
            this.rw.l = this.u8;
            let p = false;
            let q = this.rw.b;
            if (q != null) {
                p = true;
            }
            let r = this.un.cm;
            let s = this.valueColumn.count;
            let t = a.f;
            let u = this.un;
            let v = new ScalerParams(0, d, e, this.un.cg, f);
            let w = this.oy;
            let x = this.vh;
            let y = this.o1;
            let z = this.vi || y;
            if (a.f.count > 0) {
                j = a.f._inner[0][0] - 0.5 * g;
                let aa = a.f._inner[0][1];
                if (!isNaN_(aa)) {
                    if (aa > k) {
                        n = m.item(o);
                        o++;
                        c.dg(n, j, k);
                        n.width = g;
                        n.height = Math.abs(k - aa);
                        this.rw.ak = x;
                        this.rw.ag = x;
                        this.rw.al = z;
                        this.rw.ah = z;
                        this.rw.f = true;
                        if (p) {
                            this.s2(t, 0, s, u, v, b.q);
                        }
                        this.rw.ad(n, false, false, false, false);
                        n.am = this.rw.k;
                        n.an = this.rw.l;
                    }
                    else {
                        n = m.item(o);
                        o++;
                        c.dg(n, j, aa);
                        n.width = g;
                        n.height = Math.abs(aa - k);
                        this.rw.ak = w;
                        this.rw.ag = w;
                        this.rw.al = y;
                        this.rw.ah = y;
                        this.rw.f = false;
                        if (p) {
                            this.s2(t, 0, s, u, v, b.q);
                        }
                        this.rw.ad(n, false, false, false, false);
                        n.am = this.rw.k;
                        n.an = this.rw.l;
                    }
                    l = aa;
                }
                else {
                    l = k;
                }
            }
            for (let ab = 1; ab < a.f.count; ++ab) {
                let ac = a.f._inner[ab];
                j = a.f._inner[ab][0] - 0.5 * g;
                let ad = ac[1];
                if (!isNaN_(ad)) {
                    n = m.item(o);
                    o++;
                    c.dg(n, j, Math.min(l, ad));
                    n.width = g;
                    n.height = Math.abs(l - ad);
                    this.rw.ak = w;
                    this.rw.ag = w;
                    this.rw.al = y;
                    this.rw.ah = y;
                    this.rw.f = false;
                    if (l > ad) {
                        if (p) {
                            this.s2(t, ab, s, u, v, b.q);
                        }
                    }
                    else {
                        this.rw.ak = x;
                        this.rw.ag = x;
                        this.rw.al = z;
                        this.rw.ah = z;
                        this.rw.f = true;
                        if (p) {
                            this.s2(t, ab, s, u, v, b.q);
                        }
                    }
                    this.rw.ad(n, false, false, false, false);
                    n.am = this.rw.k;
                    n.an = this.rw.l;
                    l = ad;
                }
            }
            m.count = o;
            b.cy(a);
        }
        get useHighMarkerFidelity() {
            return this.sj;
        }
    }
    WaterfallSeries.$t = /*@__PURE__*/ markType(WaterfallSeries, 'WaterfallSeries', HorizontalAnchoredCategorySeries.$);
    WaterfallSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, WaterfallSeries, 'raisePropertyChanged', ['NegativeBrush:vh:vd', [Brush.$, null], 'NegativeOutline:vi:ve', [Brush.$, null], 'RadiusX:u7:vf', [1, 0], 'RadiusY:u8:vg', [1, 0]]);
    return WaterfallSeries;
})();
/**
 * @hidden
 */
export let WaterfallSeriesView = /*@__PURE__*/ (() => {
    class WaterfallSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.dc = null;
            this.dj = new Rectangle();
            this.db = null;
            this.da = a;
            this.db = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.dk);
                $ret.activate = runOn(this, this.dd);
                $ret.disactivate = runOn(this, this.df);
                $ret.destroy = runOn(this, this.de);
                return $ret;
            })());
        }
        as() {
            super.as();
            this.dc = new List$1(Rectangle.$, 0);
            if (!this.q) {
                this.da.qc = Defaults.c;
                this.da.gz = Defaults.i;
                this.da.vh = Defaults.ah;
                this.da.vi = Defaults.ai;
            }
        }
        dk() {
            let a = new Rectangle();
            this.dc.add(a);
            a._visibility = 1;
            return a;
        }
        dd(a) {
            a._visibility = 0;
        }
        df(a) {
            a._visibility = 1;
        }
        de(a) {
            this.dc.remove(a);
        }
        dg(a, b, c) {
            let d = false;
            if (a.o != c) {
                d = true;
                a.o = c;
            }
            if (a.n != b) {
                d = true;
                a.n = b;
            }
            if (d) {
                this.aq();
            }
        }
        ac(a) {
            return this.dc._inner[a];
        }
        ab(a) {
            let b = this.dc._inner[a];
            this.dj._visibility = b._visibility;
            this.dj.n = b.n;
            this.dj.o = b.o;
            this.dj.width = b.width;
            this.dj.height = b.height;
            let c = this.bp(a);
            this.dj._fill = c;
            this.dj._stroke = c;
            this.dj.ac = this.e.fu + 3;
            return this.dj;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                for (let c = 0; c < this.dc.count; c++) {
                    let d = this.aa(c, b);
                    this.bd(d, c, b);
                    a.v(d);
                }
            }
        }
        al(a) {
            super.al(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.db.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.n < f.n) {
                    return -1;
                }
                else if (e.n > f.n) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                let f = "Negative";
                if (e._fill == this.e.oy) {
                    f = "Positive";
                }
                this.e.a8.exportRectangleData(a, e, "column" + b, ["Main", f]);
            }
            b++;
        }
        dh(a) {
            let b = this.db.item(a);
            return new Rect(0, b.n, b.o, b.width, b.height);
        }
        di(a) {
            return new Rect(0, a.n, a.o, a.width, a.height);
        }
    }
    WaterfallSeriesView.$t = /*@__PURE__*/ markType(WaterfallSeriesView, 'WaterfallSeriesView', AnchoredCategorySeriesView.$);
    return WaterfallSeriesView;
})();
