/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, INotifyPropertyChanged_$type, BaseError, PropertyChangedEventArgs, Delegate_$type, fromEnum, String_$type, runOn, delegateCombine, EnumUtil, enumGetBox, typeCast, delegateRemove, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { IDataLegendTarget_$type } from "igniteui-react-core";
import { ArrayExtension } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesType_$type } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { Color } from "igniteui-react-core";
import { ColorUtil } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { TrendLineType_$type } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode_$type } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode_$type } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeMode_$type } from "igniteui-react-core";
import { ToolTipType_$type } from "./ToolTipType";
import { CrosshairsDisplayMode_$type } from "./CrosshairsDisplayMode";
import { SeriesViewerScrollbarMode_$type } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition_$type } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition_$type } from "./SeriesViewerVerticalScrollbarPosition";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { DeviceUtils } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { DataSeriesAdapter } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Random } from "igniteui-react-core";
import { ObservableColorCollection } from "igniteui-react-core";
import { BrushCollectionUtil } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { BrushUtil } from "igniteui-react-core";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { isNaN_ } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringEmpty, stringStartsWith } from "igniteui-react-core";
/**
 * @hidden
 */
export let DomainChart = /*@__PURE__*/ (() => {
    class DomainChart extends Base {
        constructor() {
            super();
            this.iu = null;
            this.it = null;
            this.ff = null;
            this.gc = NaN;
            this.is = null;
            this.gp = 0;
            this.gq = 0;
            this.gr = 0;
            this.go = 0;
            this.gk = 0;
            this.gm = 0;
            this.gl = 0;
            this.gj = 0;
            this.r8 = null;
            this.r9 = null;
            this.f9 = NaN;
            this.gs = NaN;
            this.gi = NaN;
            this.fw = NaN;
            this.ih = 0;
            this.c7 = null;
            this.h7 = null;
            this.e7 = false;
            this.bo = null;
            this.ji = null;
            this.jk = null;
            this.c5 = null;
            this.fj = null;
            this.propertyChanged = null;
            this.ig = 0;
            this.e1 = false;
            this.bj = null;
            this.fe = null;
            this.bn = null;
            this.d9 = false;
            this.bb = 0;
            this.f0 = NaN;
            this.f1 = NaN;
            this.fy = DeviceUtils.g(10);
            this.fz = DeviceUtils.g(10);
            this.a7 = 0;
            this.a9 = 0;
            this.d2 = true;
            this.e = null;
            this.b = null;
            this.d = null;
            this.a = null;
            this.ar = 0;
            this.ib = -1;
            this.ic = -1;
            this.a5 = 0;
            this.je = stringEmpty();
            this.d3 = true;
            this.jf = null;
            this.f = null;
            this.tg = new Thickness(0, DeviceUtils.g(5));
            this.d4 = true;
            this.jg = "N/A";
            this.d5 = false;
            this.th = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(2), DeviceUtils.g(0));
            this.r3 = null;
            this.dh = null;
            this.i8 = null;
            this.c = null;
            this.i7 = stringEmpty();
            this.av = 0;
            this.ax = 0;
            this.i9 = null;
            this.rv = null;
            this.ta = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.s9 = new Thickness(0, DeviceUtils.g(5));
            this.d1 = true;
            this.c9 = null;
            this.ry = null;
            this.dc = null;
            this.a1 = 0;
            this.jb = null;
            this.td = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.tc = new Thickness(0, DeviceUtils.g(5));
            this.r0 = null;
            this.de = null;
            this.ja = null;
            this.rx = null;
            this.db = null;
            this.jc = null;
            this.rz = null;
            this.dd = null;
            this.s8 = new Thickness(0, DeviceUtils.g(0));
            this.bu = 0;
            this.a3 = 0;
            this.jd = null;
            this.r2 = null;
            this.tf = new Thickness(0, DeviceUtils.g(0));
            this.dg = null;
            this.te = new Thickness(0, DeviceUtils.g(0));
            this.r1 = null;
            this.df = null;
            this.az = 0;
            this.rw = null;
            this.tb = new Thickness(1, DeviceUtils.g(8), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.da = null;
            this.seriesAdded = null;
            this.seriesRemoved = null;
            this.seriesPointerEnter = null;
            this.seriesPointerLeave = null;
            this.seriesPointerMove = null;
            this.seriesPointerDown = null;
            this.seriesPointerUp = null;
            this.calloutStyleUpdating = null;
            this.calloutRenderStyleUpdating = null;
            this.fi = null;
            this.dt = null;
            this.dw = false;
            this.fc = new Dictionary$2(String_$type, Base.$, 0);
            this.fd = new List$1(String_$type, 0);
            this.fp = null;
            this.fn = null;
            this.h = null;
            this.g = null;
            this.t = null;
            this.w = null;
            this.r = null;
            this.s = null;
            this.bl = null;
            this.d8 = true;
            this.eb = true;
            this.ed = false;
            this.ee = false;
            this.ea = false;
            this.s5 = new Rect(0, 0, 0, 1, 1);
            this.jj = null;
            this.jh = null;
            this.rm = 1;
            this.rl = 1;
            this.c3 = 0;
            this.gh = NaN;
            this.gn = NaN;
            this.cl = 0;
            this.b2 = 0;
            this.b0 = 0;
            this.ga = NaN;
            this.gb = NaN;
            this.b7 = null;
            this.by = 4;
            this.u = null;
            this.v = null;
            this.ie = 400;
            this.fv = NaN;
            this.dv = false;
            this.x = null;
            this.c1 = 0;
            this.gt = DeviceUtils.g(1.5);
            this.du = true;
            this.ge = NaN;
            this.gg = NaN;
            this.gf = NaN;
            this.gd = NaN;
            this.an = 0;
            this.cn = 0;
            this.cp = 0;
            this.cj = 0;
            this.ch = 0;
            this.bq = 0;
            this.bv = 0;
            this.bs = 0;
            this.ii = 7;
            this.cz = 4;
            this.ap = 0;
            this.d0 = false;
            this.ru = null;
            this.fx = NaN;
            this.rt = null;
            this.dz = true;
            this.rp = null;
            this.rr = null;
            this.rq = null;
            this.rs = null;
            this.h9 = -1;
            this.ia = -1;
            this.ec = false;
            this.d6 = false;
            this.r4 = null;
            this.r5 = null;
            this.id = -1;
            this.dy = false;
            this.dx = false;
            this.fo = null;
            this.ah = null;
            this.i5 = null;
            this.i6 = null;
            this.i4 = "CalloutLabel";
            this.i3 = "CalloutContent";
            this.ct = 0;
            this.cu = 0;
            this.cr = 0;
            this.cx = 0;
            this.r6 = null;
            this.r7 = null;
            this.f6 = NaN;
            this.f5 = NaN;
            this.f2 = NaN;
            this.f3 = NaN;
            this.f4 = NaN;
            this.f8 = NaN;
            this.f7 = NaN;
            this.d7 = true;
            this.sa = null;
            this.sb = null;
            this.gx = NaN;
            this.gw = NaN;
            this.gu = NaN;
            this.g0 = NaN;
            this.gv = NaN;
            this.gz = NaN;
            this.gy = NaN;
            this.ef = true;
            this.fi = new List$1(Delegate_$type, 0);
            this.p5();
            this.pl();
        }
        provideContainer(a) {
            if (a == null) {
                this.ql((b) => {
                    b.destroy();
                    b.provideContainer(null);
                });
                return;
            }
            let b = this.iu;
            this.iu = a;
            if (this.dt != null && this.iu != null && b == null) {
                this.iu.setTimeout(this.dt, 0);
                this.dt = null;
            }
            let c = ((() => {
                let $ret = new XamDataChart();
                $ret.eb = true;
                return $ret;
            })());
            c.provideContainer(a);
            this.dataChart = c;
            this.p6();
        }
        destroy() {
            this.provideContainer(null);
        }
        p6() {
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.cq.j.e();
            this.aa = a.a;
            this.ae = a.f;
            this.ac = a.b;
            this.ad = a.c;
            this.ag = a.g;
            this.g3 = Defaults.j;
            this.p7();
        }
        p7() {
        }
        p3(a) {
            if (a == null) {
                return;
            }
            a.gv = this.hx;
            a.gt = this.hv;
            a.gu = this.hw;
            a.gs = this.hu;
            a.r1 = this.s1;
            a.gp = this.hq;
            a.gr = this.hs;
            a.gq = this.hr;
            a.go = this.hp;
            a.r0 = this.s0;
            if (!isNaN_(this.hi)) {
                a.gl = this.hi;
            }
        }
        p0() {
        }
        p9(a, b) {
            a.hm = this.iq;
            a.cf = this.c8;
        }
        qu(a, b, c) {
            switch (a) {
                case "TitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gv = this.hx;
                    }
                    break;
                case "TitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gt = this.hv;
                    }
                    break;
                case "PixelScalingRatio":
                    if (this.dataChart != null) {
                        this.ql((d) => d.gl = this.hi);
                    }
                    break;
                case "TitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gu = this.hw;
                    }
                    break;
                case "TitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gs = this.hu;
                    }
                    break;
                case "TitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.r1 = this.s1;
                    }
                    break;
                case "SubtitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gp = this.hq;
                    }
                    break;
                case "SubtitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gr = this.hs;
                    }
                    break;
                case "SubtitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gq = this.hr;
                    }
                    break;
                case "SubtitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.go = this.hp;
                    }
                    break;
                case "SubtitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.r0 = this.s0;
                    }
                    break;
                case "LeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gk = this.hf;
                    }
                    break;
                case "TopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gw = this.hy;
                    }
                    break;
                case "RightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gn = this.ho;
                    }
                    break;
                case "BottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.f9 = this.g2;
                    }
                    break;
                case "TransitionDuration":
                    this.pw((d) => d.hm = this.iq);
                    break;
                case "TransitionEasingFunction":
                    this.pw((d) => d.cf = this.c8);
                    break;
            }
        }
        get tooltipTemplate() {
            return ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, 0);
        }
        set tooltipTemplate(a) {
            this.tooltipTemplates = a == null ? null : new List$1(Base.$, 1, [a]);
        }
        get tooltipTemplates() {
            return this.ff;
        }
        set tooltipTemplates(a) {
            let b = this.tooltipTemplates;
            if (a != b) {
                this.ff = a;
                this.qt("TooltipTemplates", b, this.tooltipTemplates);
            }
        }
        get hi() {
            return this.gc;
        }
        set hi(a) {
            let b = this.gc;
            if (a != b) {
                this.gc = a;
                this.qt("PixelScalingRatio", b, this.hi);
            }
        }
        get toolTip() {
            return this.is;
        }
        set toolTip(a) {
            let b = this.toolTip;
            if (b != a) {
                this.is = a;
                this.qt("ToolTip", b, this.toolTip);
            }
        }
        get hv() {
            return this.gp;
        }
        set hv(a) {
            let b = this.hv;
            if (a != b) {
                this.gp = a;
                this.qt("TitleLeftMargin", b, this.hv);
            }
        }
        get hw() {
            return this.gq;
        }
        set hw(a) {
            let b = this.hw;
            if (a != b) {
                this.gq = a;
                this.qt("TitleRightMargin", b, this.hw);
            }
        }
        get hx() {
            return this.gr;
        }
        set hx(a) {
            let b = this.hx;
            if (a != b) {
                this.gr = a;
                this.qt("TitleTopMargin", b, this.hx);
            }
        }
        get hu() {
            return this.go;
        }
        set hu(a) {
            let b = this.hu;
            if (a != b) {
                this.go = a;
                this.qt("TitleBottomMargin", b, this.hu);
            }
        }
        get hq() {
            return this.gk;
        }
        set hq(a) {
            let b = this.hq;
            if (a != b) {
                this.gk = a;
                this.qt("SubtitleLeftMargin", b, this.hq);
            }
        }
        get hs() {
            return this.gm;
        }
        set hs(a) {
            let b = this.hs;
            if (a != b) {
                this.gm = a;
                this.qt("SubtitleTopMargin", b, this.hs);
            }
        }
        get hr() {
            return this.gl;
        }
        set hr(a) {
            let b = this.hr;
            if (a != b) {
                this.gl = a;
                this.qt("SubtitleRightMargin", b, this.hr);
            }
        }
        get hp() {
            return this.gj;
        }
        set hp(a) {
            let b = this.hp;
            if (a != b) {
                this.gj = a;
                this.qt("SubtitleBottomMargin", b, this.hp);
            }
        }
        get s0() {
            return this.r8;
        }
        set s0(a) {
            let b = this.s0;
            if (a != b) {
                this.r8 = a;
                this.qt("SubtitleTextColor", b, this.s0);
            }
        }
        get s1() {
            return this.r9;
        }
        set s1(a) {
            let b = this.s1;
            if (a != b) {
                this.r9 = a;
                this.qt("TitleTextColor", b, this.s1);
            }
        }
        get_hf() {
            return this.f9;
        }
        set_hf(a) {
            let b = this.hf;
            if (a != b) {
                this.f9 = a;
                this.qt("LeftMargin", b, this.hf);
            }
        }
        get hf() {
            return this.get_hf();
        }
        set hf(a) {
            this.set_hf(a);
        }
        get hy() {
            return this.gs;
        }
        set hy(a) {
            let b = this.hy;
            if (a != b) {
                this.gs = a;
                this.qt("TopMargin", b, this.hy);
            }
        }
        get ho() {
            return this.gi;
        }
        set ho(a) {
            let b = this.ho;
            if (a != b) {
                this.gi = a;
                this.qt("RightMargin", b, this.ho);
            }
        }
        get g2() {
            return this.fw;
        }
        set g2(a) {
            let b = this.g2;
            if (a != b) {
                this.fw = a;
                this.qt("BottomMargin", b, this.g2);
            }
        }
        get iq() {
            return this.ih;
        }
        set iq(a) {
            let b = this.iq;
            if (a != b) {
                this.ih = a;
                this.qt("TransitionDuration", b, this.iq);
            }
        }
        get c8() {
            return this.c7;
        }
        set c8(a) {
            let b = this.c8;
            if (a != b) {
                this.c7 = a;
                this.qt("TransitionEasingFunction", b, this.c8);
            }
        }
        p4(a) {
            if (this.dataChart == null) {
                return;
            }
            a.j3 = this.oo;
            a.jr = this.od;
        }
        qa(a, b) {
            this.qb(a, b);
        }
        p1() {
        }
        qb(a, b) {
            if (a == null) {
                return;
            }
            let toolTipTemplate_ = ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, b);
            if (toolTipTemplate_ == null) {
                a.er = true;
            }
            else {
                let series_ = a;
                a.er = false;
                series_.externalObject.tooltipTemplate = toolTipTemplate_;
            }
        }
        rj(a, b, c) {
        }
        iw(a) {
            return a;
            return null;
        }
        h8(a) {
            return null;
        }
        qv(a, b, c) {
            switch (a) {
                case "SubtitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.jr = this.od;
                    }
                    break;
                case "TitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.j3 = this.oo;
                    }
                    break;
                case "TooltipTemplate":
                    if (this.e7) {
                        return;
                    }
                    this.e7 = true;
                    this.tooltipTemplate = this.iw(this.tooltipTemplate);
                    this.e7 = false;
                    if (this.dataChart != null) {
                        this.dataChart.hj = this.tooltipTemplate;
                    }
                    this.toolTip = this.tooltipTemplate;
                    break;
                case "ToolTip":
                    this.px((d, e) => this.qb(d, e));
                    break;
                case "TooltipTemplates":
                    if (this.tooltipTemplates == null) {
                        break;
                    }
                    this.e7 = true;
                    this.px((d, e) => {
                        let f = this.iw(ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, e));
                        let series_ = d;
                        let templ_ = f;
                        series_.externalObject.tooltipTemplate = templ_;
                    });
                    this.e7 = false;
                    break;
            }
        }
        get bp() {
            return this.bo;
        }
        set bp(a) {
            let b = this.bp;
            if (a != b) {
                this.bo = a;
                this.qt("Widget", b, this.bp);
            }
        }
        get od() {
            return this.ji;
        }
        set od(a) {
            let b = this.od;
            if (a != b) {
                this.ji = a;
                this.qt("SubtitleTextStyle", b, this.od);
            }
        }
        get oo() {
            return this.jk;
        }
        set oo(a) {
            let b = this.oo;
            if (a != b) {
                this.jk = a;
                this.qt("TitleTextStyle", b, this.oo);
            }
        }
        get dataChart() {
            return this.c5;
        }
        set dataChart(a) {
            let b = this.dataChart;
            if (b != a) {
                this.c5 = a;
                this.qt("DataChart", b, this.dataChart);
            }
        }
        onDetachedFromUI() {
            this.ql((a) => a.onDetachedFromUI());
        }
        onAttachedToUI() {
            this.ql((a) => a.onAttachedToUI());
        }
        p5() {
            this.fj = new List$1(MarkerType_$type, 0);
            this.au = new DataSeriesAdapter().e;
            if (this.q != null) {
                this.au.includedProperties = this.q;
            }
            if (this.o != null) {
                this.au.excludedProperties = this.o;
            }
            this.au.supportedSeriesTypes = this.fl.toArray();
            this.au.rules.clear();
            for (let a of fromEnum(this.fk)) {
                this.au.rules.add(a);
            }
            let b = new List$1(String_$type, 0);
            for (let c of fromEnum(this.au.rules)) {
                b.add(getInstanceType(c).typeName);
            }
            let d = this.au.dataSeries;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.qo));
        }
        e3(a) {
            return a != 24 && this.fl.contains(a);
        }
        notifyResized() {
            this.ql((a) => a.notifyContainerResized());
        }
        qj() {
            this.ql((a) => {
                for (let b = 0; b < a.series.count; b++) {
                    a.series._inner[b].lq();
                }
            });
        }
        pq() {
            if (this.dataChart == null) {
                return;
            }
            if (this.e1) {
                this.rd();
            }
            this.dataChart.flush();
        }
        py() {
            if (this.dataChart == null) {
                return;
            }
            this.dataChart.ld();
        }
        q1(a) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        ps(a) {
            this.pt((b, c) => a(b));
        }
        pt(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                a(this.dataChart.series._inner[b], b);
            }
        }
        pw(a) {
            this.px((b, c) => a(b));
        }
        px(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!c.db) {
                    a(c, b);
                }
            }
        }
        pu(a) {
            this.pv((b, c) => a(b));
        }
        pv(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (c.dc) {
                    a(c, b);
                }
            }
        }
        ra() {
            this.ps((a) => a.mk());
        }
        ql(a) {
            this.qm(a, true);
        }
        qm(a, b) {
            this.qn(a, b, null);
        }
        qn(a, b, c) {
            if (this.dataChart == null) {
                return;
            }
            a(this.dataChart);
        }
        e4(a) {
            if (!this.e3(a.suggestedSeries)) {
                return false;
            }
            let b = a.data;
            if (b == null) {
                return false;
            }
            return true;
        }
        ew() {
            if (this.dataChart == null) {
                return false;
            }
            return true;
        }
        mt(a) {
            let b = "series_" + (this.dataChart.series.count + 1) + "_" + EnumUtil.getName(DataSeriesType_$type, a.suggestedSeries);
            return b;
        }
        mu(a, b) {
            if (this.ez && this.fa) {
                let c = "";
                let d = 5 + Math.round(DomainChart.i1.nextDouble() * 4);
                for (let e = 0; e < d; e++) {
                    c = c + "\u2588";
                }
                return c;
            }
            if (stringIsNullOrEmpty(a.title)) {
                let f = EnumUtil.getName(DataSeriesType_$type, b);
                return f + (this.dataChart.series.count + 1);
            }
            else {
                return a.title;
            }
        }
        ms() {
            return stringEmpty();
        }
        rd() {
            if (this.dataChart == null) {
                return;
            }
            this.e1 = false;
            this.rf();
            if (this.actualItemsSource == null) {
                return;
            }
            let a = new List$1(MarkerType_$type, 0);
            for (let b of fromEnum(this.au.dataSeries)) {
                a.add(this.b4(b.suggestedMarker));
            }
            this.fj = a;
            let c = 0;
            for (let d of fromEnum(this.au.dataSeries)) {
                if (!this.e4(d)) {
                    continue;
                }
                if (d.index < 0) {
                    d.index = c;
                }
                this.rb(d);
                this.rc(d);
                c++;
            }
            this.rk();
            this.pt(runOn(this, this.p8));
        }
        cg(seriesType_) {
            return (this.externalObject.createSeries(seriesType_).i);
        }
        b9() {
            return this.cg(28);
        }
        cb() {
            return this.cg(27);
        }
        cd() {
            return this.cg(29);
        }
        ce() {
            return this.cg(25);
        }
        ca() {
            return this.cg(26);
        }
        cc() {
            return this.cg(32);
        }
        get bk() {
            if (TypeRegistrar.isRegistered("AnnotationLayerProxy")) {
                return TypeRegistrar.create("AnnotationLayerProxy");
            }
            else {
                throw new BaseError(1, "annotation layer module is not loaded, but is required.");
            }
        }
        get et() {
            return (TypeRegistrar.isRegistered("AnnotationLayerProxy"));
        }
        ev(a) {
            if (!this.et) {
                return false;
            }
            return this.bk.matchesType(a);
        }
        rk() {
            let a = this.fh("", true);
            if (a != null) {
                for (let b = 0; b < a.count; b++) {
                    this.dataChart.series.add(a._inner[b]);
                }
            }
        }
        ex() {
            return this.aq == 0 || this.aq == 4 || this.aq == 2;
        }
        ey() {
            return this.aq == 0 || this.aq == 4 || this.aq == 3;
        }
        fh(a, b) {
            if (!this.et) {
                return null;
            }
            let c = new List$1(Series.$, 0);
            if (b) {
                if (this.dy) {
                    let d = 1;
                    if (this.fo == null) {
                        for (let e of fromEnum(this.dataChart.series)) {
                            let f = this.b9();
                            this.bk.setTargetSeries(f, e);
                            this.bk.setCollisionChannel(f, "MainChartCollisionChannel");
                            this.ri(f, e, this.au.dataSeries._inner[d - 1]);
                            f.name = a + getInstanceType(f).typeName + d.toString();
                            c.add(f);
                            d++;
                        }
                        ;
                    }
                    else {
                        let g = this.b9();
                        this.ri(g, null, this.au.dataSeries._inner[d - 1]);
                        g.name = a + getInstanceType(g).typeName + d.toString();
                        c.add(g);
                    }
                }
            }
            switch (this.ap) {
                case 0:
                case 4:
                case 3:
                case 2:
                    {
                        let h = this.cb();
                        this.bk.setCrosshairThickness(h, this.fx);
                        this.bk.setCrosshairUseInterpolation(h, !this.d0);
                        this.bk.setCrosshairHorizontalLineVisibility(h, this.ex() ? 0 : 1);
                        this.bk.setCrosshairHorizontalLineStroke(h, this.rt);
                        this.bk.setCrosshairVerticalLineVisibility(h, this.ey() ? 0 : 1);
                        this.bk.setCrosshairVerticalLineStroke(h, this.ru);
                        this.bk.setCrosshairOnAxesEnabled(h, this.dz);
                        this.bk.setCrosshairXAxisBackground(h, this.rp);
                        this.bk.setCrosshairXAxisForeground(h, this.rq);
                        this.bk.setCrosshairYAxisBackground(h, this.rr);
                        this.bk.setCrosshairYAxisForeground(h, this.rs);
                        this.bk.setCrosshairXAxisPrecision(h, this.h9);
                        this.bk.setCrosshairYAxisPrecision(h, this.ia);
                        c.add(h);
                        break;
                    }
                case 1:
                    {
                        break;
                    }
            }
            if (this.d6) {
                let i = this.cd();
                this.bk.setFinalValueBackground(i, this.r4);
                this.bk.setFinalValueForeground(i, this.r5);
                this.bk.setFinalValuePrecision(i, this.id);
                c.add(i);
            }
            if (b) {
                switch (this.cz) {
                    case 1:
                        {
                            let j = this.ce();
                            c.add(j);
                            break;
                        }
                    case 2:
                        {
                            let k = this.ca();
                            c.add(k);
                            break;
                        }
                    case 4:
                        {
                            let l = this.cc();
                            c.add(l);
                            break;
                        }
                    case 3:
                        {
                            this.ps((m) => m.er = false);
                            break;
                        }
                    case 0:
                        {
                            this.ps((m) => m.er = true);
                            break;
                        }
                }
            }
            for (let m of fromEnum(c)) {
                if (stringIsNullOrEmpty(m.name) == false) {
                    continue;
                }
                m.name = a + getInstanceType(m).typeName;
            }
            return c;
        }
        ri(a, b, c) {
            a.itemsSource = this.fo != null ? this.fo : b.itemsSource;
            this.bk.setXMemberPath(a, this.i5);
            this.bk.setYMemberPath(a, this.i6);
            this.bk.setLabelMemberPath(a, this.i4);
            this.bk.setContentMemberPath(a, this.i3);
            if (this.ah != null) {
                this.bk.setCalloutsAllowedPositions(a, this.ah);
            }
        }
        rf() {
            this.rg(this.dataChart);
        }
        rg(a) {
            if (a != null && a == this.dataChart) {
                this.re();
            }
            if (a == null || a.series.count == 0) {
                return;
            }
            this.ps((b) => {
                if (this.ev(b) && this.bk.isCalloutLayer(b)) {
                    this.bk.removeCalloutStyleUpdating(b, runOn(this, this.q0));
                }
                if (this.ev(b) && this.bk.isCalloutLayer(b)) {
                    this.bk.removeCalloutRenderStyleUpdating(b, runOn(this, this.qz));
                }
                this.q8(b);
            });
            for (let b of fromEnum(a.series)) {
                this.rh(b);
            }
            a.series.clear();
        }
        rh(a) {
            a.itemsSource = null;
            a.legend = null;
            a.ku();
        }
        qo(a, b) {
            if (this.dataChart == null) {
                return;
            }
            let c = b.oldItems == null ? "null" : b.oldItems.count.toString();
            let d = b.newItems == null ? "null" : b.newItems.count.toString();
            if (this.e1) {
                return;
            }
            let e = this.qy(runOn(this, this.po), this.e1);
            this.e1 = e.p1;
        }
        po() {
            this.rd();
        }
        st(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.y, a);
        }
        sw(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.z, a);
        }
        su(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ac, a);
        }
        sv(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ad, a);
        }
        s4(a) {
            let b = new Color();
            if (this.y == null || this.y.count == 0) {
                b = ArrayExtension.getModulus$1(Color.$, this.fg, a);
            }
            else {
                let c = ArrayExtension.getModulus$1(Brush.$, this.y, a);
                if (c == null) {
                    b = ArrayExtension.getModulus$1(Color.$, this.fg, a);
                }
                else {
                    b = ColorUtil.q(c);
                }
            }
            return b;
        }
        ds(a) {
            let b = new ObservableColorCollection();
            b.add(ColorUtil.v(a, 0.5));
            b.add(a);
            return b;
        }
        ab(a) {
            let b = this.ds(a);
            let c = BrushCollectionUtil.a(b);
            return c;
        }
        get fg() {
            if (this.fe != null) {
                return this.fe;
            }
            this.fe = new List$1(Color.$, 0);
            this.fe.add(ColorUtil.r("#8BDC5C"));
            this.fe.add(ColorUtil.r("#8961A9"));
            this.fe.add(ColorUtil.r("#6DB1FF"));
            this.fe.add(ColorUtil.r("#82E9D9"));
            this.fe.add(ColorUtil.r("#EA3C63"));
            this.fe.add(ColorUtil.r("#735656"));
            this.fe.add(ColorUtil.r("#F8CE4F"));
            this.fe.add(ColorUtil.r("#A8A8B7"));
            this.fe.add(ColorUtil.r("#E051A9"));
            this.fe.add(ColorUtil.r("#FF903B"));
            return this.fe;
        }
        iv() {
            if (this.dataChart == null) {
                return null;
            }
            return this.dataChart.u2();
        }
        qc(a, b) {
        }
        qd(a, b, c) {
        }
        b4(a) {
            if (a == 2) {
                return 3;
            }
            else if (a == 12) {
                return 13;
            }
            else if (a == 6) {
                return 7;
            }
            else if (a == 8) {
                return 9;
            }
            else if (a == 11) {
                return 12;
            }
            else if (a == 1) {
                return 1;
            }
            else if (a == 7) {
                return 8;
            }
            else if (a == 10) {
                return 11;
            }
            else if (a == 4) {
                return 5;
            }
            else if (a == 5) {
                return 6;
            }
            else if (a == 9) {
                return 10;
            }
            else if (a == 3) {
                return 4;
            }
            else if (a == 13) {
                return 0;
            }
            return 2;
        }
        attachDataLegend(a) {
            this.pk(a);
        }
        pk(a) {
            this.bn = a;
            if (this.dataChart != null) {
                if (!this.d9) {
                    this.d9 = true;
                    this.dataChart.attachDataLegend(a);
                }
            }
        }
        detachDataLegend(a) {
            this.pn(a);
        }
        pn(a) {
            if (this.dataChart != null) {
                this.d9 = false;
                this.dataChart.detachDataLegend(a);
            }
            this.bn = null;
        }
        getDataLegendSeries() {
            return this.p();
        }
        p() {
            if (this.dataChart != null) {
                return this.dataChart.getDataLegendSeries();
            }
            else {
                return new Array(0);
            }
        }
        qi(source_, a, b, c) {
            if (this.au != null) {
                this.au.notifySetItem(source_, a, b, c);
            }
            if (this.dataChart != null) {
                this.dataChart.lv(source_, a, b, c);
            }
        }
        qe(source_) {
            if (this.au != null) {
                this.au.notifyClearItems(source_);
            }
            if (this.dataChart != null) {
                this.dataChart.lm(source_);
            }
        }
        qf(source_, a, b) {
            if (this.au != null) {
                this.au.notifyInsertItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.lt(source_, a, b);
            }
        }
        qg(source_, a, b) {
            if (this.au != null) {
                this.au.notifyRemoveItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.lu(source_, a, b);
            }
        }
        get bc() {
            return this.bb;
        }
        set bc(a) {
            let b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.qt("DataToolTipGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.bb));
            }
        }
        get g6() {
            return this.f0;
        }
        set g6(a) {
            let b = this.f0;
            this.f0 = a;
            if (b != this.f0) {
                this.qt("DataToolTipPositionOffsetX", b, this.f0);
            }
        }
        get g7() {
            return this.f1;
        }
        set g7(a) {
            let b = this.f1;
            this.f1 = a;
            if (b != this.f1) {
                this.qt("DataToolTipPositionOffsetY", b, this.f1);
            }
        }
        get g4() {
            return this.fy;
        }
        set g4(a) {
            let b = this.fy;
            this.fy = a;
            if (b != this.fy) {
                this.qt("DataToolTipDefaultPositionOffsetX", b, this.fy);
            }
        }
        get g5() {
            return this.fz;
        }
        set g5(a) {
            let b = this.fz;
            this.fz = a;
            if (b != this.fz) {
                this.qt("DataToolTipDefaultPositionOffsetY", b, this.fz);
            }
        }
        get a8() {
            return this.a7;
        }
        set a8(a) {
            let b = this.a7;
            this.a7 = a;
            if (b != this.a7) {
                this.qt("DataToolTipGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.a7));
            }
        }
        get ba() {
            return this.a9;
        }
        set ba(a) {
            let b = this.a9;
            this.a9 = a;
            if (b != this.a9) {
                this.qt("DataToolTipGroupedPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.a9));
            }
        }
        get eo() {
            return this.d2;
        }
        set eo(a) {
            let b = this.d2;
            this.d2 = a;
            if (b != this.d2) {
                this.qt(DomainChart.le, b, this.d2);
            }
        }
        get m() {
            return this.e;
        }
        set m(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.qt("DataToolTipIncludedSeries", b, this.e);
            }
        }
        get j() {
            return this.b;
        }
        set j(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.qt("DataToolTipExcludedSeries", b, this.b);
            }
        }
        get l() {
            return this.d;
        }
        set l(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.qt("DataToolTipIncludedColumns", b, this.d);
            }
        }
        get i() {
            return this.a;
        }
        set i(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.qt("DataToolTipExcludedColumns", b, this.a);
            }
        }
        get as() {
            return this.ar;
        }
        set as(a) {
            let b = this.ar;
            this.ar = a;
            if (b != this.ar) {
                this.qt("DataToolTipValueFormatAbbreviation", enumGetBox(DataAbbreviationMode_$type, b), enumGetBox(DataAbbreviationMode_$type, this.ar));
            }
        }
        get il() {
            return this.ib;
        }
        set il(a) {
            let b = this.ib;
            this.ib = a;
            if (b != this.ib) {
                this.qt("DataToolTipValueFormatMaxFractions", b, this.ib);
            }
        }
        get im() {
            return this.ic;
        }
        set im(a) {
            let b = this.ic;
            this.ic = a;
            if (b != this.ic) {
                this.qt("DataToolTipValueFormatMinFractions", b, this.ic);
            }
        }
        get a6() {
            return this.a5;
        }
        set a6(a) {
            let b = this.a5;
            this.a5 = a;
            if (b != this.a5) {
                this.qt("DataToolTipValueFormatMode", enumGetBox(DataLegendValueMode_$type, b), enumGetBox(DataLegendValueMode_$type, this.a5));
            }
        }
        get l6() {
            return this.je;
        }
        set l6(a) {
            let b = this.je;
            this.je = a;
            if (b != this.je) {
                this.qt("DataToolTipValueFormatCulture", b, this.je);
            }
        }
        get ep() {
            return this.d3;
        }
        set ep(a) {
            let b = this.d3;
            this.d3 = a;
            if (b != this.d3) {
                this.qt("DataToolTipValueFormatUseGrouping", b, this.d3);
            }
        }
        get mc() {
            return this.jf;
        }
        set mc(a) {
            let b = this.jf;
            this.jf = a;
            if (b != this.jf) {
                this.qt("DataToolTipValueFormatString", b, this.jf);
            }
        }
        get n() {
            return this.f;
        }
        set n(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.qt("DataToolTipValueFormatSpecifiers", b, this.f);
            }
        }
        get tq() {
            return this.tg;
        }
        set tq(a) {
            let b = this.tg;
            this.tg = a;
            if (b != this.tg) {
                this.qt("DataToolTipValueRowMargin", b, this.tg);
            }
        }
        get eq() {
            return this.d4;
        }
        set eq(a) {
            let b = this.d4;
            this.d4 = a;
            if (b != this.d4) {
                this.qt("DataToolTipValueRowVisible", b, this.d4);
            }
        }
        get ml() {
            return this.jg;
        }
        set ml(a) {
            let b = this.jg;
            this.jg = a;
            if (b != this.jg) {
                this.qt("DataToolTipValueTextWhenMissingData", b, this.jg);
            }
        }
        get er() {
            return this.d5;
        }
        set er(a) {
            let b = this.d5;
            this.d5 = a;
            if (b != this.d5) {
                this.qt("DataToolTipValueTextUseSeriesColors", b, this.d5);
            }
        }
        get tr() {
            return this.th;
        }
        set tr(a) {
            let b = this.th;
            this.th = a;
            if (b != this.th) {
                this.qt("DataToolTipValueTextMargin", b, this.th);
            }
        }
        get sq() {
            return this.r3;
        }
        set sq(a) {
            let b = this.r3;
            this.r3 = a;
            if (b != this.r3) {
                this.qt("DataToolTipValueTextColor", b, this.r3);
            }
        }
        get dr() {
            return this.dh;
        }
        set dr(a) {
            let b = this.dh;
            this.dh = a;
            if (b != this.dh) {
                this.qt("DataToolTipValueTextStyle", b, this.dh);
            }
        }
        get kw() {
            return this.i8;
        }
        set kw(a) {
            let b = this.i8;
            this.i8 = a;
            if (b != this.i8) {
                this.qt("DataToolTipHeaderFormatString", b, this.i8);
            }
        }
        get k() {
            return this.c;
        }
        set k(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.qt("DataToolTipHeaderFormatSpecifiers", b, this.c);
            }
        }
        get ks() {
            return this.i7;
        }
        set ks(a) {
            let b = this.i7;
            this.i7 = a;
            if (b != this.i7) {
                this.qt("DataToolTipHeaderFormatCulture", b, this.i7);
            }
        }
        get aw() {
            return this.av;
        }
        set aw(a) {
            let b = this.av;
            this.av = a;
            if (b != this.av) {
                this.qt("DataToolTipHeaderFormatDate", enumGetBox(DataLegendHeaderDateMode_$type, b), enumGetBox(DataLegendHeaderDateMode_$type, this.av));
            }
        }
        get ay() {
            return this.ax;
        }
        set ay(a) {
            let b = this.ax;
            this.ax = a;
            if (b != this.ax) {
                this.qt("DataToolTipHeaderFormatTime", enumGetBox(DataLegendHeaderTimeMode_$type, b), enumGetBox(DataLegendHeaderTimeMode_$type, this.ax));
            }
        }
        get k1() {
            return this.i9;
        }
        set k1(a) {
            let b = this.i9;
            this.i9 = a;
            if (b != this.i9) {
                this.qt("DataToolTipHeaderText", b, this.i9);
            }
        }
        get si() {
            return this.rv;
        }
        set si(a) {
            let b = this.rv;
            this.rv = a;
            if (b != this.rv) {
                this.qt("DataToolTipHeaderTextColor", b, this.rv);
            }
        }
        get tk() {
            return this.ta;
        }
        set tk(a) {
            let b = this.ta;
            this.ta = a;
            if (b != this.ta) {
                this.qt("DataToolTipHeaderTextMargin", b, this.ta);
            }
        }
        get tj() {
            return this.s9;
        }
        set tj(a) {
            let b = this.s9;
            this.s9 = a;
            if (b != this.s9) {
                this.qt("DataToolTipHeaderRowMargin", b, this.s9);
            }
        }
        get en() {
            return this.d1;
        }
        set en(a) {
            let b = this.d1;
            this.d1 = a;
            if (b != this.d1) {
                this.qt("DataToolTipHeaderRowVisible", b, this.d1);
            }
        }
        get di() {
            return this.c9;
        }
        set di(a) {
            let b = this.c9;
            this.c9 = a;
            if (b != this.c9) {
                this.qt("DataToolTipHeaderTextStyle", b, this.c9);
            }
        }
        get sl() {
            return this.ry;
        }
        set sl(a) {
            let b = this.ry;
            this.ry = a;
            if (b != this.ry) {
                this.qt("DataToolTipSummaryTitleTextColor", b, this.ry);
            }
        }
        get dl() {
            return this.dc;
        }
        set dl(a) {
            let b = this.dc;
            this.dc = a;
            if (b != this.dc) {
                this.qt("DataToolTipSummaryTitleTextStyle", b, this.dc);
            }
        }
        get a2() {
            return this.a1;
        }
        set a2(a) {
            let b = this.a1;
            this.a1 = a;
            if (b != this.a1) {
                this.qt("DataToolTipSummaryType", enumGetBox(DataLegendSummaryType_$type, b), enumGetBox(DataLegendSummaryType_$type, this.a1));
            }
        }
        get lk() {
            return this.jb;
        }
        set lk(a) {
            let b = this.jb;
            this.jb = a;
            if (b != this.jb) {
                this.qt("DataToolTipSummaryTitleText", b, this.jb);
            }
        }
        get tn() {
            return this.td;
        }
        set tn(a) {
            let b = this.td;
            this.td = a;
            if (b != this.td) {
                this.qt("DataToolTipSummaryTitleTextMargin", b, this.td);
            }
        }
        get tm() {
            return this.tc;
        }
        set tm(a) {
            let b = this.tc;
            this.tc = a;
            if (b != this.tc) {
                this.qt("DataToolTipSummaryRowMargin", b, this.tc);
            }
        }
        get sn() {
            return this.r0;
        }
        set sn(a) {
            let b = this.r0;
            this.r0 = a;
            if (b != this.r0) {
                this.qt("DataToolTipSummaryValueTextColor", b, this.r0);
            }
        }
        get dn() {
            return this.de;
        }
        set dn(a) {
            let b = this.de;
            this.de = a;
            if (b != this.de) {
                this.qt("DataToolTipSummaryValueTextStyle", b, this.de);
            }
        }
        get lf() {
            return this.ja;
        }
        set lf(a) {
            let b = this.ja;
            this.ja = a;
            if (b != this.ja) {
                this.qt("DataToolTipSummaryLabelText", b, this.ja);
            }
        }
        get sk() {
            return this.rx;
        }
        set sk(a) {
            let b = this.rx;
            this.rx = a;
            if (b != this.rx) {
                this.qt("DataToolTipSummaryLabelTextColor", b, this.rx);
            }
        }
        get dk() {
            return this.db;
        }
        set dk(a) {
            let b = this.db;
            this.db = a;
            if (b != this.db) {
                this.qt("DataToolTipSummaryLabelTextStyle", b, this.db);
            }
        }
        get lq() {
            return this.jc;
        }
        set lq(a) {
            let b = this.jc;
            this.jc = a;
            if (b != this.jc) {
                this.qt("DataToolTipSummaryUnitsText", b, this.jc);
            }
        }
        get sm() {
            return this.rz;
        }
        set sm(a) {
            let b = this.rz;
            this.rz = a;
            if (b != this.rz) {
                this.qt("DataToolTipSummaryUnitsTextColor", b, this.rz);
            }
        }
        get dm() {
            return this.dd;
        }
        set dm(a) {
            let b = this.dd;
            this.dd = a;
            if (b != this.dd) {
                this.qt("DataToolTipSummaryUnitsTextStyle", b, this.dd);
            }
        }
        get ti() {
            return this.s8;
        }
        set ti(a) {
            let b = this.s8;
            this.s8 = a;
            if (b != this.s8) {
                this.qt("DataToolTipBadgeMargin", b, this.s8);
            }
        }
        get bw() {
            return this.bu;
        }
        set bw(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.qt("DataToolTipBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.bu));
            }
        }
        get a4() {
            return this.a3;
        }
        set a4(a) {
            let b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.qt("DataToolTipUnitsDisplayMode", enumGetBox(DataLegendUnitsMode_$type, b), enumGetBox(DataLegendUnitsMode_$type, this.a3));
            }
        }
        get l0() {
            return this.jd;
        }
        set l0(a) {
            let b = this.jd;
            this.jd = a;
            if (b != this.jd) {
                this.qt("DataToolTipUnitsText", b, this.jd);
            }
        }
        get sp() {
            return this.r2;
        }
        set sp(a) {
            let b = this.r2;
            this.r2 = a;
            if (b != this.r2) {
                this.qt("DataToolTipUnitsTextColor", b, this.r2);
            }
        }
        get tp() {
            return this.tf;
        }
        set tp(a) {
            let b = this.tf;
            this.tf = a;
            if (b != this.tf) {
                this.qt("DataToolTipUnitsTextMargin", b, this.tf);
            }
        }
        get dq() {
            return this.dg;
        }
        set dq(a) {
            let b = this.dg;
            this.dg = a;
            if (b != this.dg) {
                this.qt("DataToolTipUnitsTextStyle", b, this.dg);
            }
        }
        get to() {
            return this.te;
        }
        set to(a) {
            let b = this.te;
            this.te = a;
            if (b != this.te) {
                this.qt("DataToolTipTitleTextMargin", b, this.te);
            }
        }
        get so() {
            return this.r1;
        }
        set so(a) {
            let b = this.r1;
            this.r1 = a;
            if (b != this.r1) {
                this.qt("DataToolTipTitleTextColor", b, this.r1);
            }
        }
        get dp() {
            return this.df;
        }
        set dp(a) {
            let b = this.df;
            this.df = a;
            if (b != this.df) {
                this.qt("DataToolTipTitleTextStyle", b, this.df);
            }
        }
        get a0() {
            return this.az;
        }
        set a0(a) {
            let b = this.az;
            this.az = a;
            if (b != this.az) {
                this.qt("DataToolTipLabelDisplayMode", enumGetBox(DataLegendLabelMode_$type, b), enumGetBox(DataLegendLabelMode_$type, this.az));
            }
        }
        get sj() {
            return this.rw;
        }
        set sj(a) {
            let b = this.rw;
            this.rw = a;
            if (b != this.rw) {
                this.qt("DataToolTipLabelTextColor", b, this.rw);
            }
        }
        get tl() {
            return this.tb;
        }
        set tl(a) {
            let b = this.tb;
            this.tb = a;
            if (b != this.tb) {
                this.qt("DataToolTipLabelTextMargin", b, this.tb);
            }
        }
        get dj() {
            return this.da;
        }
        set dj(a) {
            let b = this.da;
            this.da = a;
            if (b != this.da) {
                this.qt("DataToolTipLabelTextStyle", b, this.da);
            }
        }
        q2(a) {
            if (this.seriesAdded != null && a != null) {
                this.seriesAdded(this, new ChartSeriesEventArgs(a));
            }
        }
        q8(a) {
            if (this.seriesRemoved != null && a != null) {
                this.seriesRemoved(this, new ChartSeriesEventArgs(a));
            }
        }
        q4(a, b) {
            if (this.seriesPointerEnter != null && a != null) {
                this.seriesPointerEnter(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        q5(a, b) {
            if (this.seriesPointerLeave != null && a != null) {
                this.seriesPointerLeave(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        q6(a, b) {
            if (this.seriesPointerMove != null && a != null) {
                this.seriesPointerMove(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        q3(a, b) {
            if (this.seriesPointerDown != null && a != null) {
                this.seriesPointerDown(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        q7(a, b) {
            if (this.seriesPointerUp != null && a != null) {
                this.seriesPointerUp(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        q0(a, b) {
            if (this.calloutStyleUpdating != null && a != null) {
                this.calloutStyleUpdating(this, b);
            }
        }
        qz(a, b) {
            if (this.calloutRenderStyleUpdating != null && a != null) {
                this.calloutRenderStyleUpdating(this, b);
            }
        }
        qx(a) {
            if (!this.fi.contains(a)) {
                this.fi.add(a);
                let b = false;
                let c = this.qy(() => {
                    a();
                    this.fi.remove(a);
                }, b);
                b = c.p1;
            }
        }
        qy(a, b) {
            if (!b) {
                b = true;
                if (this.iu != null) {
                    this.iu.setTimeout(a, 0);
                }
                else {
                    this.dt = a;
                }
            }
            return {
                p1: b
            };
        }
        get_e5() {
            return true;
        }
        get e5() {
            return this.get_e5();
        }
        p2(a) {
            let b = a == this.dataChart;
            if (b) {
                a.ag = this.y;
            }
            if (b) {
                a.aj = this.z;
            }
            a.ah = this.ac;
            a.ai = this.ad;
            a.ba = this.bz;
            a.legend = this.legend;
            a.tq = this.e0;
            a.tt = this.e6 && this.e5;
            if (b) {
                a.b1 = this.cv;
                a.b2 = this.cw;
                a.gc = this.g8;
                a.ru = this.sx;
                a.gd = this.g9;
                a.ge = this.ha;
                a.gf = this.hb;
                a.rv = this.sy;
                a.by = this.cs;
                a.d1 = this.eu;
                a.gg = this.hc;
                a.gh = this.hd;
                a.gi = this.he;
                a.gx = this.h0;
                a.r3 = this.s2;
                a.g3 = this.h6;
                a.gy = this.h1;
                a.gz = this.h2;
                a.r4 = this.s3;
                a.b3 = this.cy;
                a.fd = this.fb;
                a.g0 = this.h3;
                a.g1 = this.h4;
                a.g2 = this.h5;
            }
            a.tb = this.co;
            a.te = this.cq;
            if (this.bn != null) {
                if (!this.d9) {
                    this.pk(this.bn);
                }
            }
            if (a.br != this.ck || a.bp != this.ci) {
                a.cq.b4(this.iu);
                a.br = this.ck;
                a.bp = this.ci;
            }
            a.s4 = this.ao;
            if (!isNaN_(this.hk)) {
                a.uv = this.hk;
            }
            if (!isNaN_(this.hm)) {
                a.ux = this.hm;
            }
            if (!isNaN_(this.hl)) {
                a.uw = this.hl;
            }
            if (!isNaN_(this.hj)) {
                a.uu = this.hj;
            }
            a.a7 = this.br;
            a.seriesMouseEnter = delegateCombine(a.seriesMouseEnter, (c, d) => this.q4(d.series, d.item));
            a.seriesMouseLeave = delegateCombine(a.seriesMouseLeave, (c, d) => this.q5(d.series, d.item));
            a.seriesMouseMove = delegateCombine(a.seriesMouseMove, (c, d) => this.q6(d.series, d.item));
            a.seriesMouseLeftButtonDown = delegateCombine(a.seriesMouseLeftButtonDown, (c, d) => this.q3(d.series, d.item));
            a.seriesMouseLeftButtonUp = delegateCombine(a.seriesMouseLeftButtonUp, (c, d) => this.q7(d.series, d.item));
            if (b) {
                a.sv = this.s7;
            }
            if (b) {
                a.jw = this.oh;
            }
            a.re = this.ro;
            if (b) {
                a.jk = this.n6;
            }
            a.rd = this.rn;
            a.tm = this.eg;
            a.dn = this.eh;
            a.gk = this.hf;
            a.gn = this.ho;
            a.gw = this.hy;
            a.f9 = this.g2;
            if (a == this.dataChart) {
                this.rd();
            }
            this.p3(a);
            this.p4(a);
        }
        af(a) {
            if (!this.e9 || !this.fa || this.itemsSource != null) {
                return a;
            }
            if (a == null) {
                return null;
            }
            let b = new BrushCollection();
            for (let c of fromEnum(a)) {
                let d = BrushUtil.r(c);
                b.add(d);
            }
            return b;
        }
        sz(a) {
            if (!this.e9 || !this.fa || this.itemsSource != null) {
                return a;
            }
            let b = BrushUtil.g(0, 0, 0, 0);
            return b;
        }
        p8(a, b) {
            if (!isNaN_(this.hn)) {
                a.gt = this.hn;
            }
            if (!isNaN_(this.ht) && !a.dc) {
                a.gz = this.ht;
            }
            if (!isNaN_(this.g3) && a.dc) {
                a.gz = this.g3;
            }
            a.legendItemBadgeShape = this.bx;
            a.a9 = this.bt;
            a.bt = this.cm;
            a.mz(this.b3);
            a.my(this.b1);
            a.gq = this.hg;
            if (!isNaN_(this.hh)) {
                a.m0(this.hh);
            }
            if (!isNaN_(this.g1)) {
                a.fz = this.g1;
            }
            if (a.isUsableInLegend) {
                a.legend = this.legend;
            }
            if (typeCast(IUnknownValuePlotting_$type, a) !== null) {
                a.unknownValuePlotting = this.c4;
            }
            a.dw = this.e2;
            if (this.ev(a) && this.bk.isCalloutLayer(a)) {
                this.bk.setCalloutStyleUpdatingEventEnabled(a, this.ej);
                this.bk.addCalloutStyleUpdating(a, runOn(this, this.q0));
            }
            if (this.ev(a) && this.bk.isCalloutLayer(a)) {
                this.bk.setCalloutRenderStyleUpdatingEventEnabled(a, this.ej);
                this.bk.addCalloutRenderStyleUpdating(a, runOn(this, this.qz));
            }
            if (this.ev(a) && this.bk.isDataToolTipLayer(a)) {
                this.ph(a);
            }
            this.pi(a, b);
            this.pj(a, b);
            this.p9(a, b);
            this.qa(a, b);
            this.q2(a);
        }
        get ei() {
            return this.dw;
        }
        pp() {
            if (!this.dw) {
                this.dw = true;
                this.pz();
            }
        }
        pz() {
            this.p0();
            this.p1();
        }
        q9(a) {
            if (this.d9 && this.bn != null) {
                this.d9 = false;
                if (a != null) {
                    a.detachDataLegend(this.bn);
                }
            }
            this.rg(a);
        }
        pj(a, b) {
            let c = typeCast(ITrendLineSeries_$type, a);
            if (c != null) {
                c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.ag, b);
                c.trendLineThickness = this.hz;
                c.trendLineType = this.c2;
                c.trendLinePeriod = this.ir;
            }
        }
        b6(a, b) {
            if (this.b8 == null || this.b8.count == 0) {
                if (this.fj == null || this.fj.count == 0) {
                    return a != null && a.d2 ? 1 : 2;
                }
                let c = ArrayExtension.getModulus$1(MarkerType_$type, this.fj, b);
                if (c == 0 && a != null) {
                    c = a.d2 ? 1 : 2;
                    if (c == 2) {
                        c = this.b5(a);
                    }
                }
                if (c == 2) {
                    if (a == null) {
                        return 1;
                    }
                    else {
                        return 2;
                    }
                }
                return c;
            }
            return ArrayExtension.getModulus$1(MarkerType_$type, this.b8, b);
        }
        b5(a) {
            return 2;
        }
        ft() {
            if (this.itemsSource != null) {
                return this.itemsSource;
            }
            if (this.e9) {
                return this.fu();
            }
            return null;
        }
        get_ez() {
            if (this.itemsSource == null && this.e9) {
                if (this.fu() != null) {
                    return true;
                }
            }
            return false;
        }
        get ez() {
            return this.get_ez();
        }
        fu() {
            return null;
        }
        qt(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            switch (a) {
                case "DataChart":
                    this.q9(typeCast(XamDataChart.$, b));
                    this.p2(typeCast(XamDataChart.$, c));
                    break;
                case "ShouldUseSkeletonStyleForMockData":
                case "ShouldDisplayMockData":
                    this.actualItemsSource = this.ft();
                    this.y = this.af(this.aa);
                    this.z = this.af(this.ae);
                    break;
                case "ActualBrushes":
                    this.qn((d) => d.ag = this.y, true, a);
                    break;
                case "ActualOutlines":
                    this.qn((d) => d.aj = this.z, true, a);
                    break;
                case "ActualItemsSource":
                    if (this.e9) {
                        this.y = this.af(this.aa);
                        this.z = this.af(this.ae);
                    }
                    this.au.itemsSource = this.actualItemsSource;
                    break;
                case "ItemsSource":
                    this.actualItemsSource = this.ft();
                    break;
                case "IncludedProperties":
                    this.au.includedProperties = this.q;
                    break;
                case "ExcludedProperties":
                    this.au.excludedProperties = this.o;
                    break;
                case "Brushes":
                    this.y = this.af(this.aa);
                    break;
                case "Outlines":
                    this.z = this.af(this.ae);
                    break;
                case "Legend":
                    this.ql((d) => d.legend = this.legend);
                    break;
                case "HighlightingMode":
                    this.ql((d) => d.br = this.ck);
                    break;
                case "HighlightingBehavior":
                    this.ql((d) => d.bp = this.ci);
                    break;
                case "LegendHighlightingMode":
                    this.ql((d) => d.a7 = this.br);
                    break;
                case "LegendItemBadgeShape":
                    this.ql((d) => d.a9 = this.bx);
                    break;
                case "LegendItemBadgeMode":
                    this.ql((d) => d.a8 = this.bt);
                    break;
                case "PlotAreaMarginLeft":
                    this.ql((d) => d.uv = this.hk);
                    break;
                case "PlotAreaMarginTop":
                    this.ql((d) => d.ux = this.hm);
                    break;
                case "PlotAreaMarginRight":
                    this.ql((d) => d.uw = this.hl);
                    break;
                case "PlotAreaMarginBottom":
                    this.ql((d) => d.uu = this.hj);
                    break;
                case "ComputedPlotAreaMarginMode":
                    this.ql((d) => d.s4 = this.ao);
                    break;
                case "IsHorizontalZoomEnabled":
                    this.ql((d) => d.tq = this.e0);
                    break;
                case "IsVerticalZoomEnabled":
                    this.ql((d) => d.tt = this.e6);
                    break;
                case "WindowRect":
                    this.qm((d) => d.sv = this.s7, false);
                    break;
                case "Title":
                    this.qm((d) => d.jw = this.oh, false);
                    break;
                case "Subtitle":
                    this.qm((d) => d.jk = this.n6, false);
                    break;
                case "TitleAlignment":
                    this.ql((d) => d.re = this.ro);
                    break;
                case "SubtitleAlignment":
                    this.ql((d) => d.rd = this.rn);
                    break;
                case "UnknownValuePlotting":
                    this.ps((d) => {
                        if (typeCast(IUnknownValuePlotting_$type, d) !== null) {
                            d.unknownValuePlotting = this.c4;
                        }
                    });
                    break;
                case "IsSeriesHighlightingEnabled":
                    this.ps((d) => d.dw = this.e2);
                    break;
                case "Thickness":
                    if (!isNaN_(this.ht)) {
                        this.pw((d) => d.gz = this.ht);
                    }
                    break;
                case "OutlineMode":
                    this.pw((d) => d.bt = this.cm);
                    break;
                case "MarkerFillOpacity":
                    this.pw((d) => d.gq = this.hg);
                    break;
                case "MarkerThickness":
                    if (!isNaN_(this.hh)) {
                        this.pw((d) => d.m0(this.hh));
                    }
                    break;
                case "MarkerOutlineMode":
                    this.pw((d) => d.mz(this.b3));
                    break;
                case "MarkerFillMode":
                    this.pw((d) => d.my(this.b1));
                    break;
                case "Resolution":
                    if (!isNaN_(this.hn)) {
                        this.ps((d) => d.gt = this.hn);
                    }
                    break;
                case "AreaFillOpacity":
                    if (!isNaN_(this.g1)) {
                        this.ps((d) => d.fz = this.g1);
                    }
                    break;
                case "ShouldAvoidAxisAnnotationCollisions":
                    this.pr((d) => {
                        d.ct = this.e8;
                        d.cv = this.e8;
                    }, true);
                    break;
                case "TrendLineBrushes":
                case "TrendLineType":
                case "TrendLineThickness":
                case "TrendLinePeriod":
                    this.pt((d, e) => this.pj(d, e));
                    break;
                case "MarkerMaxCount":
                    this.px((d, e) => this.pi(d, e));
                    break;
                case "MarkerTypes":
                    let d = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), b);
                    if (d != null) {
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.qr));
                    }
                    let e = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), c);
                    if (e != null) {
                        e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.qr));
                    }
                    this.px((f, g) => this.pi(f, g));
                    break;
                case "MarkerAutomaticBehavior":
                    this.ql((f) => f.ba = this.bz);
                    this.px((f, g) => this.pi(f, g));
                    break;
                case "MarkerBrushes":
                    this.ql((f) => f.ah = this.ac);
                    break;
                case "MarkerOutlines":
                    this.ql((f) => f.ai = this.ad);
                    break;
                case "AlignsGridLinesToPixels":
                    this.ql((f) => f.tm = this.eg);
                    break;
                case "AnimateSeriesWhenAxisRangeChanges":
                    this.ql((f) => f.dn = this.eh);
                    break;
                case "ToolTipType":
                case "CrosshairsDisplayMode":
                case "CrosshairsSnapToData":
                case "CrosshairsLineVerticalStroke":
                case "CrosshairsLineHorizontalStroke":
                case "CrosshairsLineThickness":
                case "CrosshairsAnnotationXAxisBackground":
                case "CrosshairsAnnotationXAxisTextColor":
                case "CrosshairsAnnotationYAxisBackground":
                case "CrosshairsAnnotationYAxisTextColor":
                case "CrosshairsAnnotationEnabled":
                case "CrosshairsAnnotationXAxisPrecision":
                case "CrosshairsAnnotationYAxisPrecision":
                case "FinalValueAnnotationsVisible":
                case "FinalValueAnnotationsPrecision":
                case "FinalValueAnnotationsTextColor":
                case "FinalValueAnnotationsBackground":
                case "CalloutsVisible":
                case "CalloutsAllowedPositions":
                case "CalloutsItemsSource":
                case "CalloutsXMemberPath":
                case "CalloutsYMemberPath":
                case "CalloutsLabelMemberPath":
                case "CalloutsContentMemberPath":
                    let f = this.qy(runOn(this, this.po), this.e1);
                    this.e1 = f.p1;
                    break;
                case "DataToolTipGroupingMode":
                case "DataToolTipPositionOffsetX":
                case "DataToolTipPositionOffsetY":
                case "DataToolTipDefaultPositionOffsetX":
                case "DataToolTipDefaultPositionOffsetY":
                case "DataToolTipGroupedPositionModeX":
                case "DataToolTipGroupedPositionModeY":
                case DomainChart.le:
                case "DataToolTipIncludedSeries":
                case "DataToolTipExcludedSeries":
                case "DataToolTipIncludedColumns":
                case "DataToolTipExcludedColumns":
                case "DataToolTipValueFormatAbbreviation":
                case "DataToolTipValueFormatMaxFractions":
                case "DataToolTipValueFormatMinFractions":
                case "DataToolTipValueFormatMode":
                case "DataToolTipValueFormatCulture":
                case "DataToolTipValueFormatUseGrouping":
                case "DataToolTipValueFormatString":
                case "DataToolTipValueFormatSpecifiers":
                case "DataToolTipValueRowMargin":
                case "DataToolTipValueRowVisible":
                case "DataToolTipValueTextWhenMissingData":
                case "DataToolTipValueTextUseSeriesColors":
                case "DataToolTipValueTextMargin":
                case "DataToolTipValueTextColor":
                case "DataToolTipValueTextStyle":
                case "DataToolTipHeaderFormatString":
                case "DataToolTipHeaderFormatSpecifiers":
                case "DataToolTipHeaderFormatCulture":
                case "DataToolTipHeaderFormatDate":
                case "DataToolTipHeaderFormatTime":
                case "DataToolTipHeaderText":
                case "DataToolTipHeaderTextColor":
                case "DataToolTipHeaderTextMargin":
                case "DataToolTipHeaderRowMargin":
                case "DataToolTipHeaderRowVisible":
                case "DataToolTipHeaderTextStyle":
                case "DataToolTipSummaryTitleTextColor":
                case "DataToolTipSummaryTitleTextStyle":
                case "DataToolTipSummaryType":
                case "DataToolTipSummaryTitleText":
                case "DataToolTipSummaryTitleTextMargin":
                case "DataToolTipSummaryRowMargin":
                case "DataToolTipSummaryValueTextColor":
                case "DataToolTipSummaryValueTextStyle":
                case "DataToolTipSummaryLabelText":
                case "DataToolTipSummaryLabelTextColor":
                case "DataToolTipSummaryLabelTextStyle":
                case "DataToolTipSummaryUnitsText":
                case "DataToolTipSummaryUnitsTextColor":
                case "DataToolTipSummaryUnitsTextStyle":
                case "DataToolTipBadgeMargin":
                case "DataToolTipBadgeShape":
                case "DataToolTipUnitsDisplayMode":
                case "DataToolTipUnitsText":
                case "DataToolTipUnitsTextColor":
                case "DataToolTipUnitsTextMargin":
                case "DataToolTipUnitsTextStyle":
                case "DataToolTipTitleTextMargin":
                case "DataToolTipTitleTextColor":
                case "DataToolTipTitleTextStyle":
                case "DataToolTipLabelDisplayMode":
                case "DataToolTipLabelTextColor":
                case "DataToolTipLabelTextMargin":
                case "DataToolTipLabelTextStyle":
                    this.qp(a, b, c);
                    break;
                case "HorizontalViewScrollbarMode":
                    this.ql((g) => g.b1 = this.cv);
                    break;
                case "VerticalViewScrollbarMode":
                    this.ql((g) => g.b2 = this.cw);
                    break;
                case "HorizontalViewScrollbarCornerRadius":
                    this.ql((g) => g.gc = this.g8);
                    break;
                case "HorizontalViewScrollbarFill":
                    this.ql((g) => g.ru = this.sx);
                    break;
                case "HorizontalViewScrollbarMaxOpacity":
                    this.ql((g) => g.gf = this.hb);
                    break;
                case "HorizontalViewScrollbarOutline":
                    this.ql((g) => g.rv = this.sy);
                    break;
                case "HorizontalViewScrollbarStrokeThickness":
                    this.ql((g) => g.gg = this.hc);
                    break;
                case "VerticalViewScrollbarCornerRadius":
                    this.ql((g) => g.gx = this.h0);
                    break;
                case "VerticalViewScrollbarFill":
                    this.ql((g) => g.r3 = this.s2);
                    break;
                case "VerticalViewScrollbarMaxOpacity":
                    this.ql((g) => g.gz = this.h2);
                    break;
                case "VerticalViewScrollbarOutline":
                    this.ql((g) => g.r4 = this.s3);
                    break;
                case "VerticalViewScrollbarStrokeThickness":
                    this.ql((g) => g.g0 = this.h3);
                    break;
                case "HorizontalViewScrollbarHeight":
                    this.ql((g) => g.gd = this.g9);
                    break;
                case "HorizontalViewScrollbarInset":
                    this.ql((g) => g.ge = this.ha);
                    break;
                case DomainChart.m5:
                    this.ql((g) => g.d1 = this.eu);
                    break;
                case "HorizontalViewScrollbarTrackStartInset":
                    this.ql((g) => g.gi = this.he);
                    break;
                case "HorizontalViewScrollbarTrackEndInset":
                    this.ql((g) => g.gh = this.hd);
                    break;
                case "VerticalViewScrollbarPosition":
                    this.ql((g) => g.b3 = this.cy);
                    break;
                case "HorizontalViewScrollbarPosition":
                    this.ql((g) => g.by = this.cs);
                    break;
            }
            this.qu(a, b, c);
            this.qv(a, b, c);
        }
        qp(a, b, c) {
            if (!this.fc.containsKey(a)) {
                this.fd.add(a);
                this.fc.addItem(a, c);
            }
            else {
                this.fc.item(a, c);
            }
            this.pu((d) => {
                if (this.bk.isDataToolTipLayer(d)) {
                    this.ph(d);
                }
            });
        }
        ph(a) {
            for (let b = 0; b < this.fd.count; b++) {
                let c = this.fd._inner[b];
                let d = this.fc.item(c);
                if (stringStartsWith(c, "DataToolTip")) {
                    c = c.substr(("DataToolTip").length);
                }
                this.bk.updateDataToolTipPropertyByName(a, c, d);
            }
        }
        qr(a, b) {
            this.px((c, d) => this.pi(c, d));
        }
        get itemsSource() {
            return this.fp;
        }
        set itemsSource(a) {
            let b = this.itemsSource;
            if (b != a) {
                this.fp = a;
                this.qt("ItemsSource", b, this.itemsSource);
            }
        }
        get actualItemsSource() {
            return this.fn;
        }
        set actualItemsSource(a) {
            let b = this.actualItemsSource;
            if (b != a) {
                this.fn = a;
                this.qt("ActualItemsSource", b, this.actualItemsSource);
            }
        }
        get q() {
            return this.h;
        }
        set q(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.qt("IncludedProperties", b, this.h);
            }
        }
        get o() {
            return this.g;
        }
        set o(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.qt("ExcludedProperties", b, this.g);
            }
        }
        get aa() {
            return this.t;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.t = a;
                this.qt("Brushes", b, this.aa);
            }
        }
        get ae() {
            return this.w;
        }
        set ae(a) {
            let b = this.ae;
            if (a != b) {
                this.w = a;
                this.qt("Outlines", b, this.ae);
            }
        }
        get y() {
            return this.r;
        }
        set y(a) {
            let b = this.r;
            if (a != b) {
                this.r = a;
                this.qt("ActualBrushes", b, this.y);
            }
        }
        get z() {
            return this.s;
        }
        set z(a) {
            let b = this.s;
            if (a != b) {
                this.s = a;
                this.qt("ActualOutlines", b, this.z);
            }
        }
        get legend() {
            return this.bl;
        }
        set legend(a) {
            let b = this.legend;
            if (a != b) {
                this.bl = a;
                this.qt("Legend", b, this.legend);
            }
        }
        get_e0() {
            return this.d8;
        }
        set_e0(a) {
            let b = this.e0;
            if (a != b) {
                this.d8 = a;
                this.qt("IsHorizontalZoomEnabled", b, this.e0);
            }
        }
        get e0() {
            return this.get_e0();
        }
        set e0(a) {
            this.set_e0(a);
        }
        get_e6() {
            return this.eb;
        }
        set_e6(a) {
            let b = this.e6;
            if (a != b) {
                this.eb = a;
                this.qt("IsVerticalZoomEnabled", b, this.e6);
            }
        }
        get e6() {
            return this.get_e6();
        }
        set e6(a) {
            this.set_e6(a);
        }
        get_e9() {
            return this.ed;
        }
        set_e9(a) {
            let b = this.e9;
            if (a != b) {
                this.ed = a;
                this.qt("ShouldDisplayMockData", b, this.e9);
            }
        }
        get e9() {
            return this.get_e9();
        }
        set e9(a) {
            this.set_e9(a);
        }
        get_fa() {
            return this.ee;
        }
        set_fa(a) {
            let b = this.fa;
            if (a != b) {
                this.ee = a;
                this.qt("ShouldUseSkeletonStyleForMockData", b, this.fa);
            }
        }
        get fa() {
            return this.get_fa();
        }
        set fa(a) {
            this.set_fa(a);
        }
        get_e2() {
            return this.ea;
        }
        set_e2(a) {
            let b = this.e2;
            if (a != b) {
                this.ea = a;
                this.qt("IsSeriesHighlightingEnabled", b, this.e2);
            }
        }
        get e2() {
            return this.get_e2();
        }
        set e2(a) {
            this.set_e2(a);
        }
        get s7() {
            return this.s5;
        }
        set s7(a) {
            let b = this.s7;
            if (Rect.l_op_Inequality(a, b)) {
                this.s5 = a;
                this.qt("WindowRect", b, this.s7);
            }
        }
        get s6() {
            return this.dataChart != null ? this.dataChart.su : Rect.empty;
        }
        get oh() {
            return this.jj;
        }
        set oh(a) {
            let b = this.oh;
            if (a != b) {
                this.jj = a;
                this.qt("Title", b, this.oh);
            }
        }
        get n6() {
            return this.jh;
        }
        set n6(a) {
            let b = this.n6;
            if (a != b) {
                this.jh = a;
                this.qt("Subtitle", b, this.n6);
            }
        }
        get ro() {
            return this.rm;
        }
        set ro(a) {
            let b = this.ro;
            if (b != a) {
                this.rm = a;
                this.qt("TitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.ro));
            }
        }
        get rn() {
            return this.rl;
        }
        set rn(a) {
            let b = this.rn;
            if (b != a) {
                this.rl = a;
                this.qt("SubtitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.rn));
            }
        }
        get c4() {
            return this.c3;
        }
        set c4(a) {
            let b = this.c4;
            if (a != b) {
                this.c3 = a;
                this.qt("UnknownValuePlotting", enumGetBox(UnknownValuePlotting_$type, b), enumGetBox(UnknownValuePlotting_$type, this.c4));
            }
        }
        get_hn() {
            return this.gh;
        }
        set_hn(a) {
            let b = this.hn;
            if (a != b) {
                this.gh = a;
                this.qt("Resolution", b, this.hn);
            }
        }
        get hn() {
            return this.get_hn();
        }
        set hn(a) {
            this.set_hn(a);
        }
        get ht() {
            return this.gn;
        }
        set ht(a) {
            let b = this.ht;
            if (a != b) {
                this.gn = a;
                this.qt("Thickness", b, this.ht);
            }
        }
        get cm() {
            return this.cl;
        }
        set cm(a) {
            let b = this.cm;
            if (a != b) {
                this.cl = a;
                this.qt("OutlineMode", enumGetBox(SeriesOutlineMode_$type, b), enumGetBox(SeriesOutlineMode_$type, this.cm));
            }
        }
        get b3() {
            return this.b2;
        }
        set b3(a) {
            let b = this.b3;
            if (a != b) {
                this.b2 = a;
                this.qt("MarkerOutlineMode", enumGetBox(MarkerOutlineMode_$type, b), enumGetBox(MarkerOutlineMode_$type, this.b3));
            }
        }
        get b1() {
            return this.b0;
        }
        set b1(a) {
            let b = this.b1;
            if (a != b) {
                this.b0 = a;
                this.qt("MarkerFillMode", enumGetBox(MarkerFillMode_$type, b), enumGetBox(MarkerFillMode_$type, this.b1));
            }
        }
        get hg() {
            return this.ga;
        }
        set hg(a) {
            let b = this.hg;
            if (a != b) {
                this.ga = a;
                this.qt("MarkerFillOpacity", b, this.hg);
            }
        }
        get hh() {
            return this.gb;
        }
        set hh(a) {
            let b = this.hh;
            if (a != b) {
                this.gb = a;
                this.qt("MarkerThickness", b, this.hh);
            }
        }
        get b8() {
            return this.b7;
        }
        set b8(a) {
            let b = this.b8;
            if (a != b) {
                this.b7 = a;
                this.qt("MarkerTypes", b, this.b8);
            }
        }
        get bz() {
            return this.by;
        }
        set bz(a) {
            let b = this.bz;
            if (a != b) {
                this.by = a;
                this.qt("MarkerAutomaticBehavior", enumGetBox(MarkerAutomaticBehavior_$type, b), enumGetBox(MarkerAutomaticBehavior_$type, this.bz));
            }
        }
        get ac() {
            return this.u;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.u = a;
                this.qt("MarkerBrushes", b, this.ac);
            }
        }
        get ad() {
            return this.v;
        }
        set ad(a) {
            let b = this.ad;
            if (!Base.equalsStatic(a, b)) {
                this.v = a;
                this.qt("MarkerOutlines", b, this.ad);
            }
        }
        get ip() {
            return this.ie;
        }
        set ip(a) {
            let b = this.ie;
            if (a != b) {
                this.ie = a;
                this.qt("MarkerMaxCount", b, this.ie);
            }
        }
        get g1() {
            return this.fv;
        }
        set g1(a) {
            let b = this.g1;
            if (a != b) {
                this.fv = a;
                this.qt("AreaFillOpacity", b, this.g1);
            }
        }
        get eh() {
            return this.dv;
        }
        set eh(a) {
            let b = this.dv;
            if (a != b) {
                this.dv = a;
                this.qt("AnimateSeriesWhenAxisRangeChanges", b, this.dv);
            }
        }
        get ag() {
            return this.x;
        }
        set ag(a) {
            let b = this.ag;
            if (a != b) {
                this.x = a;
                this.qt("TrendLineBrushes", b, this.ag);
            }
        }
        get c2() {
            return this.c1;
        }
        set c2(a) {
            let b = this.c2;
            if (a != b) {
                this.c1 = a;
                this.qt("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.c2));
            }
        }
        get hz() {
            return this.gt;
        }
        set hz(a) {
            let b = this.hz;
            if (a != b) {
                this.gt = a;
                this.qt("TrendLineThickness", b, this.hz);
            }
        }
        get eg() {
            return this.du;
        }
        set eg(a) {
            let b = this.eg;
            if (a != b) {
                this.du = a;
                this.qt("AlignsGridLinesToPixels", b, this.eg);
            }
        }
        get hk() {
            return this.ge;
        }
        set hk(a) {
            let b = this.ge;
            this.ge = a;
            if (a != b) {
                this.qt("PlotAreaMarginLeft", b, a);
            }
        }
        get hm() {
            return this.gg;
        }
        set hm(a) {
            let b = this.gg;
            this.gg = a;
            if (a != b) {
                this.qt("PlotAreaMarginTop", b, a);
            }
        }
        get hl() {
            return this.gf;
        }
        set hl(a) {
            let b = this.gf;
            this.gf = a;
            if (a != b) {
                this.qt("PlotAreaMarginRight", b, a);
            }
        }
        get hj() {
            return this.gd;
        }
        set hj(a) {
            let b = this.gd;
            this.gd = a;
            if (a != b) {
                this.qt("PlotAreaMarginBottom", b, a);
            }
        }
        qs() {
        }
        get ao() {
            return this.an;
        }
        set ao(a) {
            let b = this.ao;
            if (a != b) {
                this.an = a;
                this.qt("ComputedPlotAreaMarginMode", enumGetBox(ComputedPlotAreaMarginMode_$type, b), enumGetBox(ComputedPlotAreaMarginMode_$type, this.ao));
            }
        }
        get co() {
            return this.cn;
        }
        set co(a) {
            let b = this.co;
            if (a != b) {
                this.cn = a;
                this.qt("SeriesPlotAreaMarginHorizontalMode", enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, b), enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, this.co));
            }
        }
        get cq() {
            return this.cp;
        }
        set cq(a) {
            let b = this.cq;
            if (a != b) {
                this.cp = a;
                this.qt("SeriesPlotAreaMarginVerticalMode", enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, b), enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, this.cq));
            }
        }
        get ck() {
            return this.cj;
        }
        set ck(a) {
            let b = this.ck;
            if (a != b) {
                this.cj = a;
                this.qt("HighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.ck));
            }
        }
        get ci() {
            return this.ch;
        }
        set ci(a) {
            let b = this.ci;
            if (a != b) {
                this.ch = a;
                this.qt("HighlightingBehavior", enumGetBox(SeriesHighlightingBehavior_$type, b), enumGetBox(SeriesHighlightingBehavior_$type, this.ci));
            }
        }
        get br() {
            return this.bq;
        }
        set br(a) {
            let b = this.br;
            if (a != b) {
                this.bq = a;
                this.qt("LegendHighlightingMode", enumGetBox(LegendHighlightingMode_$type, b), enumGetBox(LegendHighlightingMode_$type, this.br));
            }
        }
        get bx() {
            return this.bv;
        }
        set bx(a) {
            let b = this.bx;
            if (a != b) {
                this.bv = a;
                this.qt("LegendItemBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.bx));
            }
        }
        get bt() {
            return this.bs;
        }
        set bt(a) {
            let b = this.bt;
            if (a != b) {
                this.bs = a;
                this.qt("LegendItemBadgeMode", enumGetBox(LegendItemBadgeMode_$type, b), enumGetBox(LegendItemBadgeMode_$type, this.bt));
            }
        }
        get ir() {
            return this.ii;
        }
        set ir(a) {
            let b = this.ir;
            if (a != b) {
                this.ii = a;
                this.qt("TrendLinePeriod", b, this.ir);
            }
        }
        get c0() {
            return this.cz;
        }
        set c0(a) {
            let b = this.c0;
            if (a != b) {
                this.cz = a;
                this.qt("ToolTipType", enumGetBox(ToolTipType_$type, b), enumGetBox(ToolTipType_$type, this.c0));
            }
        }
        get aq() {
            return this.ap;
        }
        set aq(a) {
            let b = this.aq;
            if (a != b) {
                this.ap = a;
                this.qt("CrosshairsDisplayMode", enumGetBox(CrosshairsDisplayMode_$type, b), enumGetBox(CrosshairsDisplayMode_$type, this.aq));
            }
        }
        get em() {
            return this.d0;
        }
        set em(a) {
            let b = this.em;
            if (a != b) {
                this.d0 = a;
                this.qt("CrosshairsSnapToData", b, this.em);
            }
        }
        get sh() {
            return this.ru;
        }
        set sh(a) {
            let b = this.sh;
            if (a != b) {
                this.ru = a;
                this.qt("CrosshairsLineVerticalStroke", b, this.sh);
            }
        }
        get g3() {
            return this.fx;
        }
        set g3(a) {
            let b = this.g3;
            if (a != b) {
                this.fx = a;
                this.qt("CrosshairsLineThickness", b, this.g3);
            }
        }
        get sg() {
            return this.rt;
        }
        set sg(a) {
            let b = this.sg;
            if (a != b) {
                this.rt = a;
                this.qt("CrosshairsLineHorizontalStroke", b, this.sg);
            }
        }
        get el() {
            return this.dz;
        }
        set el(a) {
            let b = this.el;
            if (a != b) {
                this.dz = a;
                this.qt("CrosshairsAnnotationEnabled", b, this.el);
            }
        }
        get sc() {
            return this.rp;
        }
        set sc(a) {
            let b = this.sc;
            if (a != b) {
                this.rp = a;
                this.qt("CrosshairsAnnotationXAxisBackground", b, this.sc);
            }
        }
        get se() {
            return this.rr;
        }
        set se(a) {
            let b = this.se;
            if (a != b) {
                this.rr = a;
                this.qt("CrosshairsAnnotationYAxisBackground", b, this.se);
            }
        }
        get sd() {
            return this.rq;
        }
        set sd(a) {
            let b = this.sd;
            if (a != b) {
                this.rq = a;
                this.qt("CrosshairsAnnotationXAxisTextColor", b, this.sd);
            }
        }
        get sf() {
            return this.rs;
        }
        set sf(a) {
            let b = this.sf;
            if (a != b) {
                this.rs = a;
                this.qt("CrosshairsAnnotationYAxisTextColor", b, this.sf);
            }
        }
        get ij() {
            return this.h9;
        }
        set ij(a) {
            let b = this.ij;
            if (a != b) {
                this.h9 = a;
                this.qt("CrosshairsAnnotationXAxisPrecision", b, this.ij);
            }
        }
        get ik() {
            return this.ia;
        }
        set ik(a) {
            let b = this.ik;
            if (a != b) {
                this.ia = a;
                this.qt("CrosshairsAnnotationYAxisPrecision", b, this.ik);
            }
        }
        get e8() {
            return this.ec;
        }
        set e8(a) {
            let b = this.e8;
            if (a != b) {
                this.ec = a;
                this.qt("ShouldAvoidAxisAnnotationCollisions", b, this.e8);
            }
        }
        get es() {
            return this.d6;
        }
        set es(a) {
            let b = this.es;
            if (a != b) {
                this.d6 = a;
                this.qt("FinalValueAnnotationsVisible", b, this.es);
            }
        }
        get sr() {
            return this.r4;
        }
        set sr(a) {
            let b = this.sr;
            if (a != b) {
                this.r4 = a;
                this.qt("FinalValueAnnotationsBackground", b, this.sr);
            }
        }
        get ss() {
            return this.r5;
        }
        set ss(a) {
            let b = this.ss;
            if (a != b) {
                this.r5 = a;
                this.qt("FinalValueAnnotationsTextColor", b, this.ss);
            }
        }
        get io() {
            return this.id;
        }
        set io(a) {
            let b = this.io;
            if (a != b) {
                this.id = a;
                this.qt("FinalValueAnnotationsPrecision", b, this.io);
            }
        }
        get ek() {
            return this.dy;
        }
        set ek(a) {
            let b = this.ek;
            if (a != b) {
                this.dy = a;
                this.qt("CalloutsVisible", b, this.ek);
            }
        }
        get ej() {
            return this.dx;
        }
        set ej(a) {
            let b = this.ej;
            if (a != b) {
                this.dx = a;
                this.qt("CalloutStyleUpdatingEventEnabled", b, this.ej);
            }
        }
        get calloutsItemsSource() {
            return this.fo;
        }
        set calloutsItemsSource(a) {
            let b = this.calloutsItemsSource;
            if (a != b) {
                this.fo = a;
                this.qt("CalloutsItemsSource", b, this.calloutsItemsSource);
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.qt("CalloutsAllowedPositions", b, this.ai);
            }
        }
        get j1() {
            return this.i5;
        }
        set j1(a) {
            let b = this.j1;
            if (a != b) {
                this.i5 = a;
                this.qt("CalloutsXMemberPath", b, this.j1);
            }
        }
        get j3() {
            return this.i6;
        }
        set j3(a) {
            let b = this.j3;
            if (a != b) {
                this.i6 = a;
                this.qt("CalloutsYMemberPath", b, this.j3);
            }
        }
        get jx() {
            return this.i4;
        }
        set jx(a) {
            let b = this.jx;
            if (a != b) {
                this.i4 = a;
                this.qt("CalloutsLabelMemberPath", b, this.jx);
            }
        }
        get ju() {
            return this.i3;
        }
        set ju(a) {
            let b = this.ju;
            if (a != b) {
                this.i3 = a;
                this.qt("CalloutsContentMemberPath", b, this.ju);
            }
        }
        get cv() {
            return this.ct;
        }
        set cv(a) {
            let b = this.ct;
            this.ct = a;
            if (b != this.ct) {
                this.qt("HorizontalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.ct));
            }
        }
        get cw() {
            return this.cu;
        }
        set cw(a) {
            let b = this.cu;
            this.cu = a;
            if (b != this.cu) {
                this.qt("VerticalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.cu));
            }
        }
        get cs() {
            return this.cr;
        }
        set cs(a) {
            let b = this.cr;
            this.cr = a;
            if (b != this.cr) {
                this.qt("HorizontalViewScrollbarPosition", enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, b), enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, this.cr));
            }
        }
        get cy() {
            return this.cx;
        }
        set cy(a) {
            let b = this.cx;
            this.cx = a;
            if (b != this.cx) {
                this.qt("VerticalViewScrollbarPosition", enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, b), enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, this.cx));
            }
        }
        get sx() {
            return this.r6;
        }
        set sx(a) {
            let b = this.r6;
            this.r6 = a;
            if (b != this.r6) {
                this.qt("HorizontalViewScrollbarFill", b, this.r6);
            }
        }
        get sy() {
            return this.r7;
        }
        set sy(a) {
            let b = this.r7;
            this.r7 = a;
            if (b != this.r7) {
                this.qt("HorizontalViewScrollbarOutline", b, this.r7);
            }
        }
        get hc() {
            return this.f6;
        }
        set hc(a) {
            let b = this.f6;
            this.f6 = a;
            if (b != this.f6) {
                this.qt("HorizontalViewScrollbarStrokeThickness", b, this.f6);
            }
        }
        get hb() {
            return this.f5;
        }
        set hb(a) {
            let b = this.f5;
            this.f5 = a;
            if (b != this.f5) {
                this.qt("HorizontalViewScrollbarMaxOpacity", b, this.f5);
            }
        }
        get g8() {
            return this.f2;
        }
        set g8(a) {
            let b = this.f2;
            this.f2 = a;
            if (b != this.f2) {
                this.qt("HorizontalViewScrollbarCornerRadius", b, this.f2);
            }
        }
        get g9() {
            return this.f3;
        }
        set g9(a) {
            let b = this.f3;
            this.f3 = a;
            if (b != this.f3) {
                this.qt("HorizontalViewScrollbarHeight", b, this.f3);
            }
        }
        get ha() {
            return this.f4;
        }
        set ha(a) {
            let b = this.f4;
            this.f4 = a;
            if (b != this.f4) {
                this.qt("HorizontalViewScrollbarInset", b, this.f4);
            }
        }
        get he() {
            return this.f8;
        }
        set he(a) {
            let b = this.f8;
            this.f8 = a;
            if (b != this.f8) {
                this.qt("HorizontalViewScrollbarTrackStartInset", b, this.f8);
            }
        }
        get hd() {
            return this.f7;
        }
        set hd(a) {
            let b = this.f7;
            this.f7 = a;
            if (b != this.f7) {
                this.qt("HorizontalViewScrollbarTrackEndInset", b, this.f7);
            }
        }
        get eu() {
            return this.d7;
        }
        set eu(a) {
            let b = this.d7;
            this.d7 = a;
            if (b != this.d7) {
                this.qt(DomainChart.m5, b, this.d7);
            }
        }
        get s2() {
            return this.sa;
        }
        set s2(a) {
            let b = this.sa;
            this.sa = a;
            if (b != this.sa) {
                this.qt("VerticalViewScrollbarFill", b, this.sa);
            }
        }
        get s3() {
            return this.sb;
        }
        set s3(a) {
            let b = this.sb;
            this.sb = a;
            if (b != this.sb) {
                this.qt("VerticalViewScrollbarOutline", b, this.sb);
            }
        }
        get h3() {
            return this.gx;
        }
        set h3(a) {
            let b = this.gx;
            this.gx = a;
            if (b != this.gx) {
                this.qt("VerticalViewScrollbarStrokeThickness", b, this.gx);
            }
        }
        get h2() {
            return this.gw;
        }
        set h2(a) {
            let b = this.gw;
            this.gw = a;
            if (b != this.gw) {
                this.qt("VerticalViewScrollbarMaxOpacity", b, this.gw);
            }
        }
        get h0() {
            return this.gu;
        }
        set h0(a) {
            let b = this.gu;
            this.gu = a;
            if (b != this.gu) {
                this.qt("VerticalViewScrollbarCornerRadius", b, this.gu);
            }
        }
        get h6() {
            return this.g0;
        }
        set h6(a) {
            let b = this.g0;
            this.g0 = a;
            if (b != this.g0) {
                this.qt("VerticalViewScrollbarWidth", b, this.g0);
            }
        }
        get h1() {
            return this.gv;
        }
        set h1(a) {
            let b = this.gv;
            this.gv = a;
            if (b != this.gv) {
                this.qt("VerticalViewScrollbarInset", b, this.gv);
            }
        }
        get h5() {
            return this.gz;
        }
        set h5(a) {
            let b = this.gz;
            this.gz = a;
            if (b != this.gz) {
                this.qt("VerticalViewScrollbarTrackStartInset", b, this.gz);
            }
        }
        get h4() {
            return this.gy;
        }
        set h4(a) {
            let b = this.gy;
            this.gy = a;
            if (b != this.gy) {
                this.qt("VerticalViewScrollbarTrackEndInset", b, this.gy);
            }
        }
        get fb() {
            return this.ef;
        }
        set fb(a) {
            let b = this.ef;
            this.ef = a;
            if (b != this.ef) {
                this.qt(DomainChart.pa, b, this.ef);
            }
        }
    }
    DomainChart.$t = /*@__PURE__*/ markType(DomainChart, 'DomainChart', Base.$, [INotifyPropertyChanged_$type, IDataLegendTarget_$type]);
    DomainChart.i2 = /*@__PURE__*/ new Random(0);
    DomainChart.i1 = /*@__PURE__*/ new Random(0);
    DomainChart.le = "DataToolTipShouldUpdateWhenSeriesDataChanges";
    DomainChart.m5 = "HorizontalViewScrollbarShouldAddAutoTrackInsets";
    DomainChart.pa = "VerticalViewScrollbarShouldAddAutoTrackInsets";
    return DomainChart;
})();
