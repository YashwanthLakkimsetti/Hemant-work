/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PolarLineSeriesBase } from "./PolarLineSeriesBase";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { runOn, enumGetBox, markType, markDep, Point_$type } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { PolarLineSeriesBaseView } from "./PolarLineSeriesBaseView";
import { Defaults } from "./Defaults";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let PolarAreaSeries = /*@__PURE__*/ (() => {
    class PolarAreaSeries extends PolarLineSeriesBase {
        constructor() {
            super();
            this.ab = PolarAreaSeries.$;
        }
        get_dd() {
            return true;
        }
        bx() {
            return new PolarAreaSeriesView(this);
        }
        ly(a) {
            super.ly(a);
            this.vf = a;
        }
        vd(a) {
            let b = a;
            b.c5();
        }
        ve(a, b) {
            if (a.m.count > 0) {
                let c = a.m._inner[0];
                let d = a.m._inner[a.m.count - 1];
                let e = c.x == d.x && c.y == d.y;
                if (!e) {
                    a.m.add(a.m._inner[0]);
                }
            }
            let f = b;
            f.c6(a.m, this.ft);
            this.r5.ax(this, this.ss(), runOn(this, this.ri));
            let g = false;
            let h = this.r5.b;
            if (h != null) {
                g = true;
            }
            if (g) {
                this.t0(-1, this.se.count, b.q);
            }
            let i = f.dc;
            let j = f.db;
            this.r5.ad(i, true, false, true, true);
            this.r5.ad(j, false, true, false, false);
            j._opacity = this.r5.j * this.fq;
        }
        get_va() {
            return true;
        }
        u5() {
            return this.vg;
        }
    }
    PolarAreaSeries.$t = /*@__PURE__*/ markType(PolarAreaSeries, 'PolarAreaSeries', PolarLineSeriesBase.$);
    PolarAreaSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, PolarAreaSeries, 'raisePropertyChanged', ['UnknownValuePlotting:vg:vi', [UnknownValuePlotting_$type, /*@__PURE__*/ enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return PolarAreaSeries;
})();
/**
 * @hidden
 */
export let PolarAreaSeriesView = /*@__PURE__*/ (() => {
    class PolarAreaSeriesView extends PolarLineSeriesBaseView {
        constructor(a) {
            super(a);
            this.c4 = null;
            this.da = new Path();
            this.c9 = new Path();
            this.c8 = new Path();
            this.c7 = new Path();
            this.c4 = a;
        }
        as() {
            super.as();
            if (!this.q) {
                this.c4.qc = Defaults.e;
            }
        }
        get db() {
            return this.c9;
        }
        get dc() {
            return this.da;
        }
        c5() {
            this.c9.ak = null;
            this.da.ak = null;
            this.c7.ak = null;
            this.c8.ak = null;
            this.aq();
        }
        c6(a, b) {
            let c = new List$1(Point_$type, 1, a);
            this.c4.u2.d(this.da, c, b);
            this.c4.u2.d(this.c9, c, b);
            this.aq();
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.c8.ak = this.da.ak;
            this.c7.ak = this.c9.ak;
            this.c8._stroke = a;
            this.c8.ac = this.e.fu + 3;
            this.c7._fill = a;
            this.c7._opacity = 1;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.c7);
                    a.s(this.c8);
                }
                else {
                    a.s(this.c9);
                    a.s(this.da);
                }
            }
        }
        al(a) {
            super.al(a);
            this.e.a8.exportPathData(a, this.da, "polarShape", ["Main"]);
            this.e.a8.exportPathData(a, this.c9, "fillShape", ["Fill"]);
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.pa = a;
            this.e.gw = 5;
            this.e.gx = 5;
            this.e.gy = 5;
        }
    }
    PolarAreaSeriesView.$t = /*@__PURE__*/ markType(PolarAreaSeriesView, 'PolarAreaSeriesView', PolarLineSeriesBaseView.$);
    return PolarAreaSeriesView;
})();
