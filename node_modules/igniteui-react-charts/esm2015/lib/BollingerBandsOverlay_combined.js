/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialOverlay } from "./FinancialOverlay";
import { DependencyProperty } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Number_$type, typeCast, runOn, markType, markDep, getEnumerator, Point_$type, fromEnum } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { Series } from "./Series";
import { SafeEnumerable } from "./SafeEnumerable";
import { TrendCalculators } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { Polyline } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { Flattener } from "igniteui-react-core";
/**
 * @hidden
 */
export let BollingerBandsOverlay = /*@__PURE__*/ (() => {
    class BollingerBandsOverlay extends FinancialOverlay {
        constructor() {
            super();
            this.tt = 0;
            this.tu = 0;
            this.tr = new List$1(Number_$type, 0);
            this.ts = new List$1(Number_$type, 0);
            this.ab = BollingerBandsOverlay.$;
            this.qf = new CategoryFrame(4);
            this.qh = new CategoryFrame(4);
            this.qd = new CategoryFrame(4);
        }
        l3(a, b, c, d) {
            if (this.ru().contains(b)) {
                this.tl = false;
            }
            super.l3(a, b, c, d);
            switch (b) {
                case BollingerBandsOverlay.$$p[1]:
                    this.tl = false;
                    this.mh(false);
                    break;
                case BollingerBandsOverlay.$$p[0]:
                    this.mh(false);
                    break;
            }
        }
        tm() {
            this.tr.clear();
            this.ts.clear();
            let a = getEnumerator(TrendCalculators.e(new SafeEnumerable(this.rt), this.tw));
            let b = getEnumerator(TrendCalculators.f(new SafeEnumerable(this.rt), this.tw));
            this.tu = 1.7976931348623157E+308;
            this.tt = -1.7976931348623157E+308;
            let c = true;
            let d = true;
            let e = this.tv;
            while (c || d) {
                if (a.moveNext()) {
                    this.tr.add(a.current);
                }
                else {
                    c = false;
                }
                if (b.moveNext()) {
                    this.ts.add(b.current);
                }
                else {
                    d = false;
                }
                if (c && d) {
                    this.tu = Math.min(this.tu, a.current - b.current * e);
                    this.tt = Math.max(this.tt, a.current + b.current * e);
                }
            }
            return true;
        }
        ap(a) {
            if (this.tr == null || this.ts == null || a == null || this.ck == null || a != this.qx) {
                return null;
            }
            let b = new AxisRange(this.tu, this.tt);
            return b;
        }
        s2(a, b) {
            super.s2(a, b);
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = this.qb;
            let g = this.qx;
            let h = new ScalerParams(0, c, d, f.cg, e);
            let i = new ScalerParams(0, c, d, g.cg, e);
            a.f.clear();
            a.m.clear();
            a.p.clear();
            let j = typeCast(ISortingAxis_$type, this.qb);
            if (j != null && j.i$b.count != this.ck.count) {
                return;
            }
            let k = 0;
            k = this.r2(c, d, e);
            if (!this.tl) {
                this.tl = this.tm();
                if (this.qx != null) {
                    this.qx.c1(true);
                }
            }
            i.b = this.gc();
            let l = this.qb.el(2, h) - this.qb.el(1, h);
            for (let m = b.bx.c; m <= b.bx.d; ++m) {
                let n;
                if (j == null) {
                    n = b.bx.getBucket(m);
                }
                else {
                    let o = j.i$b._inner[m];
                    let p = j.i$d(o);
                    let q = this.tr._inner[m];
                    let r = this.ts._inner[m];
                    let s = q;
                    let t = r;
                    let u = p;
                    let v = 1;
                    while (m < b.bx.d) {
                        o = j.i$b._inner[m + 1];
                        u = j.i$d(o);
                        if (u - p > l) {
                            break;
                        }
                        m++;
                        s += this.tr._inner[m];
                        t += this.ts._inner[m];
                        v++;
                    }
                    s /= v;
                    t /= v;
                    let w = s - t * this.tv;
                    let x = s;
                    let y = s + t * this.tv;
                    let z = NaN;
                    if (!isNaN_(p)) {
                        z = this.qb.ei(p, h);
                    }
                    n = [z, w, x, y];
                }
                let aa = Math.max(1, l);
                if (!isNaN_(n[0]) && m * aa >= this.tn) {
                    if (this.qb != null && typeCast(ISortingAxis_$type, this.qb) !== null) {
                        n[0] = n[0] + k;
                    }
                    else {
                        n[0] = f.ei(n[0], h) + k;
                    }
                    n[1] = g.ei(n[1], i);
                    n[2] = g.ei(n[2], i);
                    n[3] = g.ei(n[3], i);
                    a.f.add(n);
                }
            }
        }
        kx(a, b) {
            super.kx(a, b);
            let c = b;
            if (c != null) {
                c.b4();
            }
        }
        gj(a, b, c) {
            if (this.tr == null) {
                return super.gj(a, b, c);
            }
            let d = this.getEffectiveViewport1(this.b0);
            let e = this.r2(this.b0.bv, this.b0.bu, d);
            let f = new ScalerParams(0, this.b0.bv, this.b0.bu, this.qb.cg, d);
            f.c = this.cd.su;
            return this.gl(this.tr, a, this.qb, f, e, runOn(this, this.r1), b, c);
        }
        hj(a, b) {
            if (this.tr == null) {
                return super.hj(a, b);
            }
            return this.hk(a, b, this.qb, runOn(this, this.r1), this.tr);
        }
        hh(a, b) {
            if (this.tr == null) {
                return super.hh(a, b);
            }
            return this.hi(a, b, this.qb, runOn(this, this.r1), this.tr);
        }
        e9(a, b, c) {
            let d = super.e9(a, b, c);
            if (!this.rk(this.ru())) {
                d = false;
            }
            return d;
        }
        s4(a, b) {
            super.s4(a, b);
            let c = typeCast(BollingerBandsOverlayView.$, b);
            let d = this.getEffectiveViewport1(b);
            if (b.b0(a)) {
                c.b4();
                let e = a.f.count;
                let f = (g) => a.f._inner[g][0];
                let g = (h) => a.f._inner[e - 1 - h][0];
                let h = (i) => a.f._inner[i][1];
                let i = (j) => a.f._inner[j][2];
                let j = (k) => a.f._inner[e - 1 - k][3];
                c.b5(e, f, g, h, i, j);
                b.b2(a);
            }
            this.qk.a0(this, this.rj(), runOn(this, this.p3), this.r8(b), this.sa(b));
            let k = false;
            let l = this.qk.b;
            let m = a.f;
            let n = this.ck.count;
            if (l != null) {
                k = true;
            }
            if (k) {
                let o = new ScalerParams(0, b.bv, b.bu, this.qb.cg, d);
                this.s1(m, -1, n, this.qb, o, b.q);
            }
            let p = c.cc;
            let q = c.cd;
            let r = c.ce;
            let s = c.b7;
            this.qk.ad(q, true, false, true, true);
            this.qk.an = null;
            this.qk.am = null;
            this.qk.ad(p, true, false, false, true);
            this.qk.ad(r, true, false, false, true);
            this.qk.ad(s, false, true, false, false);
            s._opacity = this.qk.j * this.fq;
        }
        bx() {
            return new BollingerBandsOverlayView(this);
        }
        ly(a) {
            super.ly(a);
            this.tq = typeCast(BollingerBandsOverlayView.$, a);
        }
        sb() {
            return 3;
        }
        gc() {
            return Series.ge(this.tr, null);
        }
    }
    BollingerBandsOverlay.$t = /*@__PURE__*/ markType(BollingerBandsOverlay, 'BollingerBandsOverlay', FinancialOverlay.$);
    BollingerBandsOverlay.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, BollingerBandsOverlay, 'raisePropertyChanged', ['Multiplier:tv:tz', [1, 2], 'Period:tw:t0', [1, 14]]);
    return BollingerBandsOverlay;
})();
/**
 * @hidden
 */
export let BollingerBandsBucketCalculator = /*@__PURE__*/ (() => {
    class BollingerBandsBucketCalculator extends FinancialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = a * this.b;
            let c = Math.min(b + this.b - 1, this.a.bz.ck.count - 1);
            if (b <= c) {
                let d = this.f.b3.tv;
                let e = 0;
                let f = 0;
                let g = 0;
                for (let h = b; h <= c; ++h) {
                    if (!isNaN_(this.f.b3.tr._inner[h]) && !isNaN_(this.f.b3.ts._inner[h])) {
                        e += this.f.b3.tr._inner[h];
                        f += this.f.b3.ts._inner[h];
                        ++g;
                    }
                }
                if (g > 0) {
                    e = e / g;
                    f = f / g;
                    return [0.5 * (b + c), e - f * d, e, e + f * d];
                }
            }
            return [NaN, NaN, NaN, NaN];
        }
    }
    BollingerBandsBucketCalculator.$t = /*@__PURE__*/ markType(BollingerBandsBucketCalculator, 'BollingerBandsBucketCalculator', FinancialBucketCalculator.$);
    return BollingerBandsBucketCalculator;
})();
/**
 * @hidden
 */
export let BollingerBandsOverlayView = /*@__PURE__*/ (() => {
    class BollingerBandsOverlayView extends FinancialSeriesView {
        constructor(a) {
            super(a);
            this.b3 = null;
            this.b8 = new Polygon();
            this.cf = new Polyline();
            this.cg = new Polyline();
            this.ch = new Polyline();
            this.b6 = new Polygon();
            this.b9 = new Polyline();
            this.ca = new Polyline();
            this.cb = new Polyline();
            this.b3 = a;
        }
        as() {
            super.as();
            if (!this.q) {
            }
        }
        by() {
            return new BollingerBandsBucketCalculator(this);
        }
        b5(a, b, c, d, e, f) {
            for (let g of fromEnum(Flattener.d(a, b, d, this.e.ft))) {
                this.b8.ak.add({ $type: Point_$type, x: b(g), y: d(g) });
                this.cf.ak.add({ $type: Point_$type, x: b(g), y: d(g) });
            }
            for (let h of fromEnum(Flattener.d(a, b, e, this.e.ft))) {
                this.cg.ak.add({ $type: Point_$type, x: b(h), y: e(h) });
            }
            for (let i of fromEnum(Flattener.d(a, c, f, this.e.ft))) {
                this.b8.ak.add({ $type: Point_$type, x: c(i), y: f(i) });
                this.ch.ak.add({ $type: Point_$type, x: c(i), y: f(i) });
            }
            this.aq();
        }
        b4() {
            this.b8.ak.clear();
            this.cf.ak.clear();
            this.cg.ak.clear();
            this.ch.ak.clear();
            this.aq();
        }
        get b7() {
            return this.b8;
        }
        get cc() {
            return this.cf;
        }
        get cd() {
            return this.cg;
        }
        get ce() {
            return this.ch;
        }
        bc() {
            super.bc();
            this.b6.ak = this.b8.ak;
            this.b9.ak = this.cf.ak;
            this.ca.ak = this.cg.ak;
            this.cb.ak = this.ch.ak;
            let a = this.bo();
            this.b6._fill = a;
            this.b6._opacity = 1;
            this.b9._stroke = a;
            this.b9.ac = this.e.fu + 3;
            this.ca._stroke = a;
            this.ca.ac = this.e.fu + 3;
            this.cb._stroke = a;
            this.cb.ac = this.e.fu + 3;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.b6);
                    a.u(this.b9);
                    a.u(this.ca);
                    a.u(this.cb);
                }
                else {
                    a.t(this.b8);
                    a.u(this.cf);
                    a.u(this.cg);
                    a.u(this.ch);
                }
            }
        }
        al(a) {
            super.al(a);
            this.e.a8.exportPolygonData(a, this.b8, "FillShape", ["Fill"]);
            this.e.a8.exportPolylineData(a, this.cf, "BottomLine", ["Lower", "Main"]);
            this.e.a8.exportPolylineData(a, this.cg, "CentralLine", ["Central"]);
            this.e.a8.exportPolylineData(a, this.ch, "TopLine", ["Upper"]);
        }
    }
    BollingerBandsOverlayView.$t = /*@__PURE__*/ markType(BollingerBandsOverlayView, 'BollingerBandsOverlayView', FinancialSeriesView.$);
    return BollingerBandsOverlayView;
})();
