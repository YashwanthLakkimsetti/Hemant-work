import { IgrSeries } from "./igr-series";
import { Visibility_$type } from "igniteui-react-core";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { CrosshairLayer } from "./CrosshairLayer";
import { ensureBool, brushToString, stringToBrush, ensureEnum } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
export class IgrCrosshairLayer extends IgrAnnotationLayer {
    createImplementation() {
        return new CrosshairLayer();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets whether the series is an annotation layer displayed only when hovering over the chart.
    */
    get isAnnotationHoverLayer() {
        return this.i.db;
    }
    /**
     * Gets whether the series is an crosshair annotation layer.
    */
    get isAnnotationCrosshairLayer() {
        return this.i.c9;
    }
    /**
     * Gets or sets the color to use for the horizontal line. Leave null for an automatic value.
    */
    get horizontalLineStroke() {
        return brushToString(this.i.tm);
    }
    set horizontalLineStroke(v) {
        this.i.tm = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for vertical line. Leave null for an automatic value.
    */
    get verticalLineStroke() {
        return brushToString(this.i.tn);
    }
    set verticalLineStroke(v) {
        this.i.tn = stringToBrush(v);
    }
    /**
     * Gets or sets the name of the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    get targetSeriesName() {
        return this.i.r0;
    }
    set targetSeriesName(v) {
        this.i.r0 = v;
    }
    /**
     * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    get targetSeries() {
        if (this.i.ra == null) {
            return null;
        }
        if (!this.i.ra.externalObject) {
            let e = IgrSeries._createFromInternal(this.i.ra);
            if (e) {
                e._implementation = this.i.ra;
            }
            this.i.ra.externalObject = e;
        }
        return this.i.ra.externalObject;
    }
    set targetSeries(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.ra = null : this.i.ra = v.i;
    }
    /**
     * Gets or sets whether to use value interpolation when drawing a line through the best value for the cursor position.
    */
    get useInterpolation() {
        return this.i.rf;
    }
    set useInterpolation(v) {
        this.i.rf = ensureBool(v);
    }
    /**
     * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
    */
    get isAxisAnnotationEnabled() {
        return this.i.rd;
    }
    set isAxisAnnotationEnabled(v) {
        this.i.rd = ensureBool(v);
    }
    /**
     * Gets or sets the color to use for the x axis annotation text. Leave unset for an automatic value.
    */
    get xAxisAnnotationTextColor() {
        return brushToString(this.i.tq);
    }
    set xAxisAnnotationTextColor(v) {
        this.i.tq = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the x axis annotation backing. Leave unset for an automatic value.
    */
    get xAxisAnnotationBackground() {
        return brushToString(this.i.to);
    }
    set xAxisAnnotationBackground(v) {
        this.i.to = stringToBrush(v);
    }
    /**
     * Gets or sets the corner radius to use for the x axis annotation backing. Leave unset for an automatic value.
    */
    get xAxisAnnotationBackgroundCornerRadius() {
        return this.i.ri;
    }
    set xAxisAnnotationBackgroundCornerRadius(v) {
        this.i.ri = +v;
    }
    /**
     * Gets or sets the precision to use displaying values for interpolated crosshair positions.
    */
    get xAxisAnnotationInterpolatedValuePrecision() {
        return this.i.ru;
    }
    set xAxisAnnotationInterpolatedValuePrecision(v) {
        this.i.ru = +v;
    }
    /**
     * Gets or sets the color to use for the x axis annotation outline. Leave unset for an automatic value.
    */
    get xAxisAnnotationOutline() {
        return brushToString(this.i.tp);
    }
    set xAxisAnnotationOutline(v) {
        this.i.tp = stringToBrush(v);
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get xAxisAnnotationPaddingLeft() {
        return this.i.rk;
    }
    set xAxisAnnotationPaddingLeft(v) {
        this.i.rk = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get xAxisAnnotationPaddingTop() {
        return this.i.rm;
    }
    set xAxisAnnotationPaddingTop(v) {
        this.i.rm = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get xAxisAnnotationPaddingRight() {
        return this.i.rl;
    }
    set xAxisAnnotationPaddingRight(v) {
        this.i.rl = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get xAxisAnnotationPaddingBottom() {
        return this.i.rj;
    }
    set xAxisAnnotationPaddingBottom(v) {
        this.i.rj = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get yAxisAnnotationPaddingLeft() {
        return this.i.rq;
    }
    set yAxisAnnotationPaddingLeft(v) {
        this.i.rq = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get yAxisAnnotationPaddingTop() {
        return this.i.rs;
    }
    set yAxisAnnotationPaddingTop(v) {
        this.i.rs = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get yAxisAnnotationPaddingRight() {
        return this.i.rr;
    }
    set yAxisAnnotationPaddingRight(v) {
        this.i.rr = +v;
    }
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get yAxisAnnotationPaddingBottom() {
        return this.i.rp;
    }
    set yAxisAnnotationPaddingBottom(v) {
        this.i.rp = +v;
    }
    /**
     * Gets or sets the stroke thickness for the x axis annotation backing. Leave unset for an automatic value.
    */
    get xAxisAnnotationStrokeThickness() {
        return this.i.rn;
    }
    set xAxisAnnotationStrokeThickness(v) {
        this.i.rn = +v;
    }
    /**
     * Gets or sets the color to use for the y axis annotation text. Leave unset for an automatic value.
    */
    get yAxisAnnotationTextColor() {
        return brushToString(this.i.tt);
    }
    set yAxisAnnotationTextColor(v) {
        this.i.tt = stringToBrush(v);
    }
    /**
     * Gets or sets the color to use for the y axis annotation backing. Leave unset for an automatic value.
    */
    get yAxisAnnotationBackground() {
        return brushToString(this.i.tr);
    }
    set yAxisAnnotationBackground(v) {
        this.i.tr = stringToBrush(v);
    }
    /**
     * Gets or sets the corner radius to use for the y axis annotation backing. Leave unset for an automatic value.
    */
    get yAxisAnnotationBackgroundCornerRadius() {
        return this.i.ro;
    }
    set yAxisAnnotationBackgroundCornerRadius(v) {
        this.i.ro = +v;
    }
    /**
     * Gets or sets the precision to use displaying values for interpolated crosshair positions.
    */
    get yAxisAnnotationInterpolatedValuePrecision() {
        return this.i.rv;
    }
    set yAxisAnnotationInterpolatedValuePrecision(v) {
        this.i.rv = +v;
    }
    /**
     * Gets or sets the color to use for the y axis annotation outline. Leave unset for an automatic value.
    */
    get yAxisAnnotationOutline() {
        return brushToString(this.i.ts);
    }
    set yAxisAnnotationOutline(v) {
        this.i.ts = stringToBrush(v);
    }
    /**
     * Gets or sets the stroke thickness for the y axis annotation backing. Leave unset for an automatic value.
    */
    get yAxisAnnotationStrokeThickness() {
        return this.i.rt;
    }
    set yAxisAnnotationStrokeThickness(v) {
        this.i.rt = +v;
    }
    /**
     * Gets or sets whether to display the vertical line.
    */
    get verticalLineVisibility() {
        return this.i.tx;
    }
    set verticalLineVisibility(v) {
        this.i.tx = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets whether to display the horizontal line.
    */
    get horizontalLineVisibility() {
        return this.i.tw;
    }
    set horizontalLineVisibility(v) {
        this.i.tw = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets whether to skip unknown values when searching for series values.
    */
    get skipUnknownValues() {
        return this.i.re;
    }
    set skipUnknownValues(v) {
        this.i.re = ensureBool(v);
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetSeries && this.targetSeries.name && this.targetSeries.name == name) {
            return this.targetSeries;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.targetSeries && this.targetSeries._styling) {
            this.targetSeries._styling(container, component, this);
        }
        this._inStyling = false;
    }
}
