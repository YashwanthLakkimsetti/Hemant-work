import { EventArgs, IList$1, Base, Type, IEnumerable$1, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { IHasCategoryAxis } from "./IHasCategoryAxis";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { Brush } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericYAxis } from "./NumericYAxis";
import { HighlightingInfo } from "./HighlightingInfo";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CalculatedColumn } from "./CalculatedColumn";
import { ColumnSupportingCalculation } from "./ColumnSupportingCalculation";
import { RenderSurface } from "./RenderSurface";
import { SupportingCalculation$1 } from "./SupportingCalculation$1";
/**
 * @hidden
 */
export declare class FinancialEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: number, b: number, c: FinancialCalculationDataSource, d: FinancialCalculationSupportingCalculations, e: FinancialSeries);
    private _position;
    get position(): number;
    set position(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _dataSource;
    get dataSource(): FinancialCalculationDataSource;
    set dataSource(a: FinancialCalculationDataSource);
    private _supportingCalculations;
    get supportingCalculations(): FinancialCalculationSupportingCalculations;
    set supportingCalculations(a: FinancialCalculationSupportingCalculations);
    private _basedOn;
    get basedOn(): IList$1<string>;
    set basedOn(a: IList$1<string>);
}
/**
 * @hidden
 */
export declare class FinancialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: FinancialSeriesView;
    constructor(a: FinancialSeriesView);
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    c: number;
    d: number;
    b: number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class FinancialSeries extends Series implements IHasCategoryAxis, IHasCategoryModePreference {
    static $t: Type;
    ly(a: SeriesView): void;
    qs: FinancialSeriesView;
    protected get_dp(): boolean;
    ag(): Axis[];
    hw(a: any, b: string): any;
    protected sb(): number;
    private r9;
    ah(a: Point): Point[][];
    ai(a: Point): Point[][];
    constructor();
    th: Brush;
    o8(): Brush;
    o9(): Brush;
    ku(): void;
    protected get_c6(): boolean;
    protected get_ej(): boolean;
    qb: CategoryAxisBase;
    qx: NumericYAxis;
    sr: string;
    get q7(): IFastItemColumn$1<number>;
    set q7(a: IFastItemColumn$1<number>);
    private q2;
    si: string;
    get q5(): IFastItemColumn$1<number>;
    set q5(a: IFastItemColumn$1<number>);
    private q0;
    sn: string;
    get q6(): IFastItemColumn$1<number>;
    set q6(a: IFastItemColumn$1<number>);
    private q1;
    sf: string;
    get q4(): IFastItemColumn$1<number>;
    set q4(a: IFastItemColumn$1<number>);
    private qz;
    sv: string;
    get q9(): IFastItemColumn$1<number>;
    set q9(a: IFastItemColumn$1<number>);
    private q3;
    rh: boolean;
    protected rc: boolean;
    assigningCategoryStyle: (sender: any, args: AssigningCategoryStyleEventArgs) => void;
    rj(): boolean;
    protected s3(a: AssigningCategoryStyleEventArgs): void;
    protected qk: CategorySeriesRenderManager;
    protected s1(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    r1(a: Point): number;
    hj(a: Point, b: boolean): number;
    hh(a: Point, b: boolean): number;
    f3(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    pl(a: Point, b: boolean, c: boolean): Point;
    gj(a: Point, b: boolean, c: boolean): number;
    gf(a: Point, b: boolean, c: boolean): number;
    gh(a: Point, b: boolean, c: boolean): number;
    r3(a: Point, b: boolean, c: boolean): number;
    r4(a: Point, b: boolean, c: boolean): number;
    r5(a: Point, b: boolean, c: boolean): number;
    ph(a: Point, b: boolean, c: boolean): Point;
    pj(a: Point, b: boolean, c: boolean): Point;
    tj(a: Point, b: boolean, c: boolean): Point;
    ti(a: Point, b: boolean, c: boolean): Point;
    tk(a: Point, b: boolean, c: boolean): Point;
    le(): void;
    protected m5(a: Rect, b: Rect): void;
    protected m4(a: Rect, b: Rect): void;
    protected rm: Dictionary$2<IFastItemColumn$1<number>, string>;
    protected rn: Dictionary$2<string, string>;
    private q8;
    private s0;
    private rb;
    protected l3(a: any, b: string, c: any, d: any): void;
    re(a: any): boolean;
    rd(a: any): boolean;
    protected p4(a: number, b: number, c: Axis): any[];
    protected r8(a: SeriesView): number;
    protected sa(a: SeriesView): number;
    p3(a: number, b: number): any[];
    private qv;
    protected get_dx(): boolean;
    kv(): void;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    sc(a: Point): number;
    protected qu(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected qt(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rf(): boolean;
    f5(a: Point): number;
    hd(a: Point): number;
    protected get_d9(): boolean;
    ar(): CategoryAxisBase;
    hf(a: Point): number;
    ht(a: Point): any;
    qf: CategoryFrame;
    qh: CategoryFrame;
    qd: CategoryFrame;
    qe(): CategoryFrame;
    protected r2(a: Rect, b: Rect, c: Rect): number;
    qm: CategoryTransitionInMode;
    ri: boolean;
    protected eq(): boolean;
    protected ql(): CategoryTransitionInMode;
    protected b9(): TransitionInSpeedType;
    s4(a: CategoryFrame, b: FinancialSeriesView): void;
    s2(a: CategoryFrame, b: FinancialSeriesView): void;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    qn: CategoryTransitionSourceFramePreparer;
    r6(a: FinancialSeriesView): number;
    protected ky(): void;
    mi(a: boolean): void;
    typical: (sender: any, e: FinancialEventArgs) => void;
    typicalBasedOn: (sender: any, e: FinancialEventArgs) => void;
    protected rk(a: IList$1<string>): boolean;
    get rl(): boolean;
    protected rg(): boolean;
    protected sz(a: FinancialEventArgs): void;
    protected get rt(): IEnumerable$1<number>;
    private _rq;
    private rq;
    protected get rs(): IEnumerable$1<number>;
    private _rp;
    private rp;
    protected get rr(): IEnumerable$1<number>;
    private _ro;
    private ro;
    rv(a: IList$1<number>): IList$1<number>;
    private ra;
    protected ru(): IList$1<string>;
    private rz;
    getOpenColumnAsArray(): number[];
    private rx;
    getHighColumnAsArray(): number[];
    private ry;
    getLowColumnAsArray(): number[];
    private rw;
    getCloseColumnAsArray(): number[];
    private r0;
    getVolumeColumnAsArray(): number[];
    protected k0(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected qo(a: number, b: number): FinancialCalculationDataSource;
    r7(a: number): number;
    protected qp(a: FinancialCalculationDataSource): FinancialCalculationSupportingCalculations;
    get categoryAxis(): CategoryAxisBase;
    private qg;
    mj(a: Rect, b: RenderSurface): void;
    private qc;
    mg(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    an(a: Axis): Axis;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private qi;
    get qj(): CategoryMode;
    set qj(a: CategoryMode);
    protected get_d3(): boolean;
    mm(a: Brush, b: Brush): void;
    private s5;
    private qw;
    private qy;
    hv(a: any): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialCalculationSupportingCalculations extends Base {
    static $t: Type;
    a: ColumnSupportingCalculation;
    c: ColumnSupportingCalculation;
    d: ColumnSupportingCalculation;
    b: ColumnSupportingCalculation;
    h: DataSourceSupportingCalculation;
    f: DataSourceSupportingCalculation;
    g: DataSourceSupportingCalculation;
    e: DataSourceSupportingCalculation;
    k: (arg1: (arg1: number) => number, arg2: number, arg3: number) => IEnumerable$1<number>;
    j: (arg1: (arg1: number) => number, arg2: number) => IEnumerable$1<number>;
    i: (arg1: number) => number;
}
/**
 * @hidden
 */
export declare class DataSourceSupportingCalculation extends SupportingCalculation$1<(dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>> {
    static $t: Type;
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>);
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>, c: IList$1<string>);
    constructor(a: number, ..._rest: any[]);
}
/**
 * @hidden
 */
export declare class FinancialCalculationDataSource extends Base {
    static $t: Type;
    private _openColumn;
    get openColumn(): IList$1<number>;
    set openColumn(a: IList$1<number>);
    private _closeColumn;
    get closeColumn(): IList$1<number>;
    set closeColumn(a: IList$1<number>);
    private _highColumn;
    get highColumn(): IList$1<number>;
    set highColumn(a: IList$1<number>);
    private _lowColumn;
    get lowColumn(): IList$1<number>;
    set lowColumn(a: IList$1<number>);
    private _volumeColumn;
    get volumeColumn(): IList$1<number>;
    set volumeColumn(a: IList$1<number>);
    private _indicatorColumn;
    get indicatorColumn(): IList$1<number>;
    set indicatorColumn(a: IList$1<number>);
    private _typicalColumn;
    get typicalColumn(): CalculatedColumn;
    set typicalColumn(a: CalculatedColumn);
    private _trueRange;
    get trueRange(): CalculatedColumn;
    set trueRange(a: CalculatedColumn);
    private _trueLow;
    get trueLow(): CalculatedColumn;
    set trueLow(a: CalculatedColumn);
    private _period;
    get period(): number;
    set period(a: number);
    private _shortPeriod;
    get shortPeriod(): number;
    set shortPeriod(a: number);
    private _longPeriod;
    get longPeriod(): number;
    set longPeriod(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _calculateFrom;
    get calculateFrom(): number;
    set calculateFrom(a: number);
    private _calculateCount;
    get calculateCount(): number;
    set calculateCount(a: number);
    private _multiplier;
    get multiplier(): number;
    set multiplier(a: number);
    private _minimumValue;
    get minimumValue(): number;
    set minimumValue(a: number);
    private _maximumValue;
    get maximumValue(): number;
    set maximumValue(a: number);
    private _specifiesRange;
    get specifiesRange(): boolean;
    set specifiesRange(a: boolean);
    private _series;
    get series(): FinancialSeries;
    set series(a: FinancialSeries);
}
/**
 * @hidden
 */
export declare abstract class FinancialSeriesView extends SeriesView {
    static $t: Type;
    bz: FinancialSeries;
    bx: FinancialBucketCalculator;
    b1: number;
    b0(a: CategoryFrame): boolean;
    b2(a: CategoryFrame): void;
    constructor(a: FinancialSeries);
    protected abstract by(): FinancialBucketCalculator;
    as(): void;
    getDefaultTooltipTemplate(): string;
    protected af(): void;
}
