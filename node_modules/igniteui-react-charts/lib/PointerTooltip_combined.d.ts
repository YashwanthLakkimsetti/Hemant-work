import { ContentControl } from "igniteui-react-core";
import { INotifyPropertyChanged, Type, Base, Point, PropertyChangedEventArgs } from "igniteui-react-core";
import { SRProvider } from "igniteui-react-core";
import { ISeriesVisualDataManager } from "./ISeriesVisualDataManager";
import { IOnDemandRender } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { PointerTooltipPointerLocation } from "./PointerTooltipPointerLocation";
import { PointCollection } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { Polyline } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { PointerTooltipStyle } from "./PointerTooltipStyle";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { DomRenderer, DomWrapper } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class PointerTooltip extends ContentControl implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private ar;
    protected get as(): SRProvider;
    private aj;
    get ak(): ISeriesVisualDataManager;
    ai: IOnDemandRender;
    an: PointerTooltipView;
    cr: Point;
    a3: number;
    a4: number;
    cx: Visibility;
    am: PointerTooltipPointerLocation;
    cq: Point;
    co: Point;
    cp: Point;
    cm: Point;
    cn: Point;
    ck: Point;
    cl: Point;
    a1: number;
    a0: number;
    ay: number;
    az: number;
    ct: PointCollection;
    cs: PointCollection;
    protected bw(a: string, b: any, c: any): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected bu(a: any, b: string, c: any, d: any): void;
    bz: ContentControl;
    cu: Polygon;
    cv: Polyline;
    protected av: boolean;
    bq(): void;
    bt(): void;
    private cj;
    private al;
    private ax;
    private aw;
    private au;
    cw(a: Size): Size;
    br(): void;
    bs(): void;
    bx(a: number, b: number): void;
    ap: EventProxy;
    bv(a: DomRenderer): void;
    a2: number;
    private at;
    bp(): void;
    by(): void;
    aq: PointerTooltipStyle;
    a5(): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PointerTooltipView extends Base {
    static $t: Type;
    constructor(a: PointerTooltip);
    v(): void;
    private a;
    z(a: Size): Size;
    p: DomWrapper;
    r: DomWrapper;
    q: DomWrapper;
    n: DomWrapper;
    protected m: DomWrapper;
    protected b: RenderingContext;
    protected o: DomWrapper;
    private y;
    private c;
    private i;
    private h;
    private k;
    private j;
    x(a: number, b: number): void;
    s(): any;
    private g;
    private e;
    private f;
    d(a: any): boolean;
    t(): void;
    u(): void;
    l: DomRenderer;
    w(a: DomRenderer): void;
}
