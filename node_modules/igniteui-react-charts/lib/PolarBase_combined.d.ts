import { MarkerSeries } from "./MarkerSeries";
import { Point, Type } from "igniteui-react-core";
import { PolarAxisInfoCache } from "./PolarAxisInfoCache";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { PolarFrame } from "./PolarFrame";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { HighlightingInfo } from "./HighlightingInfo";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Axis } from "./Axis";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { PolarAxes } from "./PolarAxes";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { OwnedPoint } from "./OwnedPoint";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { PolarTrendLineManager } from "./PolarTrendLineManager";
import { AssigningPolarStyleEventArgs } from "./AssigningPolarStyleEventArgs";
import { AssigningPolarMarkerStyleEventArgs } from "./AssigningPolarMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class PolarBase extends MarkerSeries {
    static $t: Type;
    protected bx(): SeriesView;
    ly(a: SeriesView): void;
    rx: PolarBaseView;
    private ry;
    ku(): void;
    protected get_d6(): boolean;
    c1(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    constructor();
    private tw;
    private ty;
    private rk;
    rw: PolarAxisInfoCache;
    private u0;
    private uz;
    sa: SeriesRenderer$2<PolarFrame, PolarBaseView>;
    td: string;
    tr: string;
    protected get se(): IFastItemColumn$1<number>;
    protected set se(a: IFastItemColumn$1<number>);
    private sc;
    protected get sf(): IFastItemColumn$1<number>;
    protected set sf(a: IFastItemColumn$1<number>);
    private sd;
    rt: NumericAngleAxis;
    ru: NumericRadiusAxis;
    st: boolean;
    s3: number;
    sb: TrendLineType;
    uu: Brush;
    get ut(): Brush;
    set ut(a: Brush);
    static readonly t6: DependencyProperty;
    s1: number;
    uw: PenLineCap;
    uv: DoubleCollection;
    s4: number;
    s5: number;
    sk: boolean;
    r2: PolarFrame;
    r4: PolarFrame;
    r0: PolarFrame;
    r1(): PolarFrame;
    rv: PolarAxes;
    le(): void;
    protected k0(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected m4(a: Rect, b: Rect): void;
    protected m5(a: Rect, b: Rect): void;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    mi(a: boolean): void;
    private uy;
    ap(a: Axis): AxisRange;
    en(a: any): boolean;
    ht(a: Point): any;
    hd(a: Point): number;
    f5(a: Point): number;
    protected sx(a: Point): number;
    protected sw(a: Point): number;
    private sl;
    private su;
    private s0;
    protected sz(a: Point): number;
    protected sy(a: Point): number;
    pl(a: Point, b: boolean, c: boolean): Point;
    ag(): Axis[];
    hw(a: any, b: string): any;
    protected l3(a: any, b: string, c: any, d: any): void;
    private r6;
    get r7(): ScatterItemSearchMode;
    set r7(a: ScatterItemSearchMode);
    protected r8(): ScatterItemSearchMode;
    protected get_so(): boolean;
    protected get so(): boolean;
    protected sq(): boolean;
    protected sp(): boolean;
    r9: ScatterItemSearchMode;
    s2: number;
    sj(a: any): boolean;
    si(a: any): boolean;
    kx(a: boolean, b: SeriesView): void;
    private rl;
    tv(a: PolarFrame, b: number, c: Rect, d: Rect): void;
    t1(a: PolarFrame, b: PolarBaseView): void;
    sn: boolean;
    sm: boolean;
    protected sh: boolean;
    protected sg: boolean;
    protected get_dx(): boolean;
    private rr;
    private rs;
    protected rp(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rq(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected ro(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningPolarStyle: (sender: any, args: AssigningPolarStyleEventArgs) => void;
    assigningPolarMarkerStyle: (sender: any, args: AssigningPolarMarkerStyleEventArgs) => void;
    protected ss(): boolean;
    protected sr(): boolean;
    t5(a: PolarFrame, b: PolarBaseView): void;
    ri(a: number, b: number): any[];
    protected rj(a: number, b: number): any[];
    protected r5: PolarSeriesRenderManager;
    tx(a: PolarBaseView, b: PolarFrame): void;
    protected t0(a: number, b: number, c: boolean): void;
    protected tz(a: number, b: number, c: boolean): void;
    protected t3(a: AssigningPolarStyleEventArgs): void;
    protected t2(a: AssigningPolarMarkerStyleEventArgs): void;
    private tu;
    protected mv(): void;
    r3: PolarFrame;
    mj(a: Rect, b: RenderSurface): void;
    private rz;
    mg(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    t4(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    rh(a: HashPool$2<any, Marker>, b: Rect, c: Rect): Point[];
    sv(a: HashPool$2<any, Marker>): List$1<number>;
    ux(a: number): Point;
    protected k7(a: any): void;
    tn: string;
    s9: string;
    tp: string;
    tb: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PolarSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    au: AssigningPolarMarkerStyleEventArgs;
    av: AssigningPolarStyleEventArgs;
    aw(a: PolarBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ax(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ay(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class PolarBaseView extends MarkerSeriesView {
    static $t: Type;
    protected cu: PolarBase;
    ct: MarkerManagerBase;
    constructor(a: PolarBase);
    cv: PolarTrendLineManager;
    as(): void;
    cz(a: (arg1: Marker) => void): void;
    protected cs(): MarkerManagerBase;
    protected c0(a: IDictionary$2<any, OwnedPoint>): void;
    protected cr(): Point[];
    protected cx(): List$1<number>;
    cy(a: Rect, b: Rect, c: Rect, d: Rect): void;
    c1(): void;
    cw: HashPool$2<any, Marker>;
    cf(a: (arg1: Marker) => void): void;
    protected a5(a: RenderingContext, b: boolean): void;
    protected c2(): Rect;
    getDefaultTooltipTemplate(): string;
}
