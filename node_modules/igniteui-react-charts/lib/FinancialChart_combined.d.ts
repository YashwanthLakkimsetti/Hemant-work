import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { DomWrapper } from "igniteui-react-core";
import { EventArgs, IList, Type } from "igniteui-react-core";
import { IZoomSlider } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DomainType } from "./DomainType";
import { FinancialChartVolumeType } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode } from "./FinancialChartYAxisMode";
import { FinancialChartType } from "./FinancialChartType";
import { HorizontalAlignment } from "igniteui-react-core";
import { FinancialIndicatorTypeCollection } from "./FinancialIndicatorTypeCollection";
import { FinancialOverlayTypeCollection } from "./FinancialOverlayTypeCollection";
import { FinancialChartZoomSliderType } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { IndicatorDisplayTypeCollection } from "./IndicatorDisplayTypeCollection";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { CustomIndicatorNameCollection } from "./CustomIndicatorNameCollection";
import { IChartLegend } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerType } from "./MarkerType";
import { TitleSettings } from "./TitleSettings";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType } from "igniteui-react-core";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorVisualData } from "./FinancialChartRangeSelectorVisualData";
/**
 * @hidden
 */
export declare class FinancialChart extends XYChart {
    static $t: Type;
    protected qv(a: string, b: any, c: any): void;
    private ais;
    private air;
    private aio;
    private ai0;
    private acl;
    provideGrid(a: DomWrapper): void;
    onDocumentClick(a: Event): void;
    private ae9;
    private ae7;
    private ae4;
    private ae6;
    private ae8;
    private ae5;
    getContext(): FinancialChartContext;
    provideContainer(a: any): void;
    private ajb;
    private ajp;
    private ah8;
    private ajn;
    setGridRows(): void;
    protected p7(): void;
    private ai7;
    private ai8;
    private ajh;
    private ah7;
    private aiy;
    protected p4(a: XamDataChart): void;
    private ajs;
    private ajv;
    private ajt;
    private aju;
    aeq(): number;
    qf(source_: any, a: number, b: any): void;
    qg(source_: any, a: number, b: any): void;
    qe(source_: any): void;
    qi(source_: any, a: number, b: any, c: any): void;
    protected qa(a: Series, b: number): void;
    private abr;
    private get abs();
    private set abs(value);
    private afr;
    get afy(): any;
    set afy(a: any);
    private afs;
    get afz(): any;
    set afz(a: any);
    private afo;
    get afv(): any;
    set afv(a: any);
    private aft;
    get af0(): any;
    set af0(a: any);
    private afu;
    get af1(): any;
    set af1(a: any);
    private afp;
    get afw(): any;
    set afw(a: any);
    private afq;
    get afx(): any;
    set afx(a: any);
    private ac9;
    get ada(): IZoomSlider;
    set ada(a: IZoomSlider);
    protected get_hf(): number;
    protected set_hf(a: number): void;
    protected get_e0(): boolean;
    protected set_e0(a: boolean): void;
    private aej;
    get aev(): number;
    set aev(a: number);
    constructor();
    protected tw(): Axis;
    protected tx(): Axis;
    onAttachedToUI(): void;
    onDetachedFromUI(): void;
    protected at(a: DataSeries): DataSeriesType;
    protected get_fl(): List$1<DataSeriesType>;
    protected get fl(): List$1<DataSeriesType>;
    protected get_fk(): List$1<IDataSeriesAdapterRule>;
    protected get fk(): List$1<IDataSeriesAdapterRule>;
    private abe;
    private acs;
    private abd;
    protected pl(): void;
    protected pi(a: Series, b: number): void;
    protected b5(a: Series): MarkerType;
    protected rb(a: DataSeries): void;
    protected re(): void;
    private abw;
    private abv;
    private ab5;
    private aby;
    private aga;
    private abf;
    private act;
    private acz;
    private ac0;
    private acy;
    private ac1;
    private get adi();
    private acf;
    private get acg();
    private get adl();
    private acd;
    private get ace();
    private get adj();
    private ach;
    private get aci();
    private get adk();
    private acm;
    private get acn();
    protected cf(a: DataSeries, b: DataSeriesType): Series;
    protected rd(): void;
    protected y8(a: (arg1: Axis) => void, b: string): void;
    protected zd(a: (arg1: Axis) => void, b: boolean): void;
    protected zb(a: (arg1: TitleSettings) => void): void;
    protected zg(a: (arg1: TitleSettings) => void): void;
    protected ze(a: (arg1: AxisLabelSettings) => void): void;
    protected y9(a: (arg1: AxisLabelSettings) => void): void;
    protected p3(a: XamDataChart): void;
    private static afm;
    private af2;
    private ag5;
    private aii;
    private ah4;
    private ah5;
    private aia;
    private aid;
    private aib;
    private aic;
    private aie;
    private afg;
    protected pt(a: (arg1: Series, arg2: number) => void): void;
    private ac5;
    private get volumeChart();
    private set volumeChart(value);
    private ai2;
    private adm;
    private adq;
    private adn;
    private adp;
    private ai1;
    private ac2;
    private ac4;
    private ajj;
    iv(): any;
    af7(): string;
    private ac3;
    private aji;
    private adv;
    private ajg;
    protected p0(): void;
    protected get_e5(): boolean;
    protected get ad1(): boolean;
    private ajo;
    private ai3;
    protected qn(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    private aig;
    private ajc;
    private get ad0();
    private aih;
    private adr;
    private ai6;
    private ail;
    private aiq;
    private aip;
    private aij;
    private aik;
    private aiu;
    private aix;
    private aiv;
    private ah6;
    private aja;
    private ajm;
    private aim;
    private ajk;
    private adu;
    private ait;
    private aif;
    private aje;
    private ajd;
    private ai5;
    private ain;
    private ad2;
    private ajl;
    private ah9;
    private ajf;
    protected ri(a: Series, b: Series, c: DataSeries): void;
    private af9;
    protected y3(a: Axis): void;
    protected y5(a: Axis): void;
    private aiw;
    protected p8(a: Series, b: number): void;
    protected qt(a: string, b: any, c: any): void;
    protected get_bi(): DomainType;
    get bi(): DomainType;
    private adh;
    get adz(): boolean;
    set adz(a: boolean);
    private aff;
    get afn(): number;
    set afn(a: number);
    private ael;
    get aez(): number;
    set aez(a: number);
    private aen;
    get ae1(): number;
    set ae1(a: number);
    private aem;
    get ae0(): number;
    set ae0(a: number);
    private aeo;
    get ae2(): number;
    set ae2(a: number);
    get aey(): number;
    get aex(): number;
    private abx;
    get abz(): FinancialChartVolumeType;
    set abz(a: FinancialChartVolumeType);
    private ab0;
    get ab1(): FinancialChartXAxisMode;
    set ab1(a: FinancialChartXAxisMode);
    private ab2;
    get ab3(): FinancialChartYAxisMode;
    set ab3(a: FinancialChartYAxisMode);
    private adc;
    get ads(): boolean;
    set ads(a: boolean);
    private abt;
    get abu(): FinancialChartType;
    set abu(a: FinancialChartType);
    protected get_zm(): HorizontalAlignment;
    protected set_zm(a: HorizontalAlignment): void;
    private add;
    get adt(): boolean;
    set adt(a: boolean);
    private ab7;
    get ab8(): FinancialIndicatorTypeCollection;
    set ab8(a: FinancialIndicatorTypeCollection);
    private ab9;
    get aca(): FinancialOverlayTypeCollection;
    set aca(a: FinancialOverlayTypeCollection);
    private ad4;
    private get indicatorCharts();
    private set indicatorCharts(value);
    private adf;
    get adx(): boolean;
    set adx(a: boolean);
    protected get_hn(): number;
    protected set_hn(a: number): void;
    private static readonly ahi;
    private ade;
    get adw(): boolean;
    set adw(a: boolean);
    private static readonly aho;
    private adg;
    get ady(): boolean;
    set ady(a: boolean);
    private ac6;
    get zoomSliderChart(): XamDataChart;
    set zoomSliderChart(a: XamDataChart);
    private acr;
    private get zoomSliderAxis();
    private set zoomSliderAxis(value);
    private abc;
    private get zoomSliderXAxis();
    private set zoomSliderXAxis(value);
    private ab4;
    get ab6(): FinancialChartZoomSliderType;
    set ab6(a: FinancialChartZoomSliderType);
    private aav;
    get aa3(): BrushCollection;
    set aa3(a: BrushCollection);
    private aaw;
    get aa4(): BrushCollection;
    set aa4(a: BrushCollection);
    private aax;
    get aa5(): BrushCollection;
    set aa5(a: BrushCollection);
    private aay;
    get aa6(): BrushCollection;
    set aa6(a: BrushCollection);
    private aa0;
    get aa8(): BrushCollection;
    set aa8(a: BrushCollection);
    private aaz;
    get aa7(): BrushCollection;
    set aa7(a: BrushCollection);
    private aau;
    get aa2(): BrushCollection;
    set aa2(a: BrushCollection);
    private aat;
    get aa1(): BrushCollection;
    set aa1(a: BrushCollection);
    private aek;
    get aew(): number;
    set aew(a: number);
    private aei;
    get aeu(): number;
    set aeu(a: number);
    private aeh;
    get aet(): number;
    set aet(a: number);
    private aeg;
    get aes(): number;
    set aes(a: number);
    private acj;
    get ack(): IndicatorDisplayTypeCollection;
    set ack(a: IndicatorDisplayTypeCollection);
    private afb;
    get afi(): number;
    set afi(a: number);
    private aef;
    get aer(): number;
    set aer(a: number);
    private afe;
    get afl(): number;
    set afl(a: number);
    private afc;
    get afj(): number;
    set afj(a: number);
    private afa;
    get afh(): number;
    set afh(a: number);
    private afd;
    get afk(): number;
    set afk(a: number);
    private abo;
    get abq(): FinancialChartRangeSelectorOptionCollection;
    set abq(a: FinancialChartRangeSelectorOptionCollection);
    abp: FinancialChartRangeSelectorOptionCollection;
    private abk;
    get customIndicatorNames(): CustomIndicatorNameCollection;
    set customIndicatorNames(a: CustomIndicatorNameCollection);
    applyCustomIndicators: (sender: any, e: FinancialChartCustomIndicatorArgs) => void;
    protected get_e6(): boolean;
    protected set_e6(a: boolean): void;
    private ajq;
    get ajr(): Brush;
    set ajr(a: Brush);
    private aep;
    get ae3(): number;
    set ae3(a: number);
    private adb;
    get ado(): boolean;
    set ado(a: boolean);
    private acb;
    get acc(): IChartLegend;
    set acc(a: IChartLegend);
    private abb;
    private get xAxis();
    private set xAxis(value);
    private acq;
    private get yAxis();
    private set yAxis(value);
    private acp;
    private get volumeAxis();
    private set volumeAxis(value);
    private aba;
    private get volumeXAxis();
    private set volumeXAxis(value);
    private aco;
    private get indicatorAxis();
    private set indicatorAxis(value);
    private aa9;
    private get indicatorXAxis();
    private set indicatorXAxis(value);
    private ad3;
    private get ad6();
    private set ad6(value);
    private ad5;
    private get ad8();
    private set ad8(value);
    private aec;
    get aee(): Date;
    set aee(a: Date);
    private aeb;
    get aed(): Date;
    set aed(a: Date);
    private ad9;
    get xAxisBreaks(): ObservableCollection$1<any>;
}
/**
 * @hidden
 */
export declare class FinancialChartToolbar extends TemplatedHtmlControl {
    static $t: Type;
    bg(a: DomWrapper): void;
    bl(a: Event): void;
    private o;
    constructor(a: FinancialChart, b: any);
    private r;
    get s(): FinancialChartRangeSelector;
    set s(a: FinancialChartRangeSelector);
    private z;
    get aa(): FinancialChartTypePicker;
    set aa(a: FinancialChartTypePicker);
    private p;
    get q(): FinancialChartIndicatorMenu;
    set q(a: FinancialChartIndicatorMenu);
    private bm;
    private bh;
    private bi;
    private bj;
    w: FinancialChartToolbarViewModel;
    v(): FinancialChartToolbarContext;
    l(a: any): void;
    private bk;
    private aq;
    get au(): Date;
    set au(a: Date);
    private ap;
    get at(): Date;
    set at(a: Date);
    private ao;
    get as(): Date;
    set as(a: Date);
    private an;
    get ar(): Date;
    set ar(a: Date);
    rangeChanged: (sender: any, e: EventArgs) => void;
    chartTypeChanged: (sender: any, e: EventArgs) => void;
    trendLineTypeChanged: (sender: any, e: EventArgs) => void;
    volumeTypeChanged: (sender: any, e: EventArgs) => void;
    indicatorTypesChanged: (sender: any, e: EventArgs) => void;
    overlayTypesChanged: (sender: any, e: EventArgs) => void;
    bn(): void;
    private x;
    get y(): FinancialChartType;
    set y(a: FinancialChartType);
    private ah;
    get ai(): TrendLineType;
    set ai(a: TrendLineType);
    private ab;
    get ac(): FinancialChartVolumeType;
    set ac(a: FinancialChartVolumeType);
    private ad;
    get ae(): FinancialIndicatorTypeCollection;
    set ae(a: FinancialIndicatorTypeCollection);
    private af;
    get ag(): FinancialOverlayTypeCollection;
    set ag(a: FinancialOverlayTypeCollection);
    static am(a: IList, b: IList): boolean;
    aj(): FinancialChartToolbarVisualData;
    private t;
    get u(): FinancialChartRangeSelectorOptionCollection;
    set u(a: FinancialChartRangeSelectorOptionCollection);
    private ak;
    get al(): boolean;
    set al(a: boolean);
}
/**
 * @hidden
 */
export declare class FinancialChartRangeSelector extends TemplatedHtmlControl {
    static $t: Type;
    private static x;
    q: FinancialChartRangeSelectorViewModel;
    get v(): Date;
    set v(a: Date);
    get u(): Date;
    set u(a: Date);
    get t(): Date;
    set t(a: Date);
    get s(): Date;
    set s(a: Date);
    ab(): void;
    constructor(a: any);
    l(a: any): void;
    private z;
    rangeChanged: (sender: any, e: EventArgs) => void;
    r(): FinancialChartRangeSelectorVisualData;
    get o(): FinancialChartRangeSelectorOptionCollection;
    set o(a: FinancialChartRangeSelectorOptionCollection);
    private aa;
    private p;
}
