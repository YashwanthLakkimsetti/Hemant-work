import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { Axis } from "./Axis";
import { RadialFrame } from "./RadialFrame";
import { SeriesView } from "./SeriesView";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { RadialBaseView } from "./RadialBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { Clipper } from "igniteui-react-core";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { PointCollection } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
    static $t: Type;
    private f;
    constructor(a: AnchoredRadialSeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare abstract class AnchoredRadialSeries extends RadialBase {
    static $t: Type;
    protected bx(): SeriesView;
    ku(): void;
    hw(a: any, b: string): any;
    ly(a: SeriesView): void;
    sx: AnchoredRadialSeriesView;
    constructor();
    sy: CategoryLineRasterizer;
    hj(a: Point, b: boolean): number;
    hh(a: Point, b: boolean): number;
    f3(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    gj(a: Point, b: boolean, c: boolean): number;
    pl(a: Point, b: boolean, c: boolean): Point;
    tj: string;
    get s3(): IFastItemColumn$1<number>;
    set s3(a: IFastItemColumn$1<number>);
    private s2;
    tf: string;
    th: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    s1: TrendLineType;
    t2: Brush;
    get t1(): Brush;
    set t1(a: Brush);
    static readonly tq: DependencyProperty;
    tb: number;
    t4: PenLineCap;
    t3: DoubleCollection;
    tc: number;
    td: number;
    ap(a: Axis): AxisRange;
    protected l3(a: any, b: string, c: any, d: any): void;
    protected k0(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_s6(): boolean;
    protected get s6(): boolean;
    protected get_c6(): boolean;
    protected get_ej(): boolean;
    protected s8(a: CategoryAngleAxis, b: Rect, c: Rect, d: Rect): number;
    sm(a: RadialFrame, b: RadialBaseView): void;
    private s9;
    private ta;
    private s7;
    sw(a: List$1<number[]>, b: number, c: SeriesView): Clipper;
    protected t5: Point;
    tp(a: PointCollection, b: PointCollection, c: PointCollection, d: PointCollection, e: boolean): void;
    private s5;
    private s4;
    kx(a: boolean, b: SeriesView): void;
    sp(a: RadialFrame, b: RadialBaseView): void;
    protected sv(a: number, b: number, c: Axis): any[];
    protected tn(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    protected to(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    tm(a: RadialBaseView, b: RadialFrame): void;
    private tl;
    protected mv(): void;
    hz(a: any, b: Point): any;
    en(a: any): boolean;
    s0: RadialFrame;
    mj(a: Rect, b: RenderSurface): void;
    private sz;
    mg(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected k7(a: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredRadialSeriesView extends RadialBaseView {
    static $t: Type;
    cw: AnchoredRadialSeries;
    constructor(a: AnchoredRadialSeries);
    cx: RadialTrendLineManager;
    cy(a: Rect, b: Rect, c: Rect, d: Rect): void;
    cz(): void;
    protected a5(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
