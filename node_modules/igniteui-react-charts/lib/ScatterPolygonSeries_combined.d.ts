import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { ShapeAxisInfoCache } from "./ShapeAxisInfoCache";
import { StyleSelector } from "./StyleSelector";
import { Style } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { Rect } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { OwnedPoint } from "./OwnedPoint";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { Marker } from "./Marker";
import { DataContext } from "igniteui-react-core";
import { IDictionary$2 } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { FrameworkElement } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { Size } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ScatterPolygonSeries extends ShapeSeriesBase {
    static $t: Type;
    protected get_d7(): boolean;
    protected get_d2(): boolean;
    constructor();
    protected rb(): boolean;
    protected sa(a: SeriesView): void;
    tn(a: ScatterPolygonSeriesView): void;
    private s6;
    protected bx(): SeriesView;
    ly(a: SeriesView): void;
    s3: ScatterPolygonSeriesView;
    s4: ShapeAxisInfoCache;
    private static ua;
    private s1;
    private s2;
    protected get_hasMarkers(): boolean;
    o5(): Brush;
    o6(): Brush;
    nd(): DataTemplate;
    iy(): string;
    s5: StyleSelector;
    uc: Style;
    s0: MarkerType;
    tr: DataTemplate;
    s8: number;
    f2(): number;
    tp: DataTemplate;
    tq: DataTemplate;
    t8: Brush;
    t6: Brush;
    t9: Brush;
    t7: Brush;
    ub: Style;
    sr: CollisionAvoidanceType;
    private sw;
    get sx(): MarkerOutlineMode;
    set sx(a: MarkerOutlineMode);
    sz(): MarkerOutlineMode;
    mz(a: MarkerOutlineMode): void;
    sy: MarkerOutlineMode;
    private ss;
    get st(): MarkerFillMode;
    set st(a: MarkerFillMode);
    sv(): MarkerFillMode;
    my(a: MarkerFillMode): void;
    m0(a: number): void;
    su: MarkerFillMode;
    protected mv(): void;
    protected lt(): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    at(a: Point, b: boolean): DataContext;
    to(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    c1(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    sq(a: ScatterPolygonSeriesView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    s7(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterPolygonSeriesView extends ShapeSeriesViewBase {
    static $t: Type;
    constructor(a: ScatterPolygonSeries);
    as(): void;
    get dd(): NumericMarkerManager;
    dh: boolean;
    protected dz(a: IDictionary$2<any, OwnedPoint>): void;
    protected c7(): Point[];
    protected di(): List$1<number>;
    private c8;
    private dj;
    private de;
    private dc;
    protected c2(a: number, b: List$1<PointCollection>): PathGeometry;
    cj(a: FrameworkElement, b: any, c: boolean): void;
    protected ch(a: FrameworkElement, b: PathGeometry): void;
    private dg;
    df: HashPool$2<any, Marker>;
    dt(a: (arg1: Marker) => void): void;
    dv(a: HashPool$2<any, Marker>): void;
    db(): Marker;
    protected dk: List$1<Marker>;
    b1(a: Point): Marker;
    private da;
    dx(a: Marker): void;
    dw(a: Marker): void;
    dy(a: Marker): void;
    d0(a: boolean): void;
    protected bh(a: any, b: number): void;
    private c9;
    protected bi(a: any, b: number): void;
    protected a5(a: RenderingContext, b: boolean): void;
    ds(): void;
    dp(): void;
    dq(): void;
    dm(): void;
    dr(): void;
    dn(): void;
    dl(a: string): void;
    du(): void;
    private d1;
    d2(a: Marker): Size;
    al(a: any): void;
    getDefaultTooltipTemplate(): string;
}
