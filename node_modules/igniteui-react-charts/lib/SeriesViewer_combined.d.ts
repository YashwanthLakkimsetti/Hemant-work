import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged, Type, Base, Point, EventArgs, PropertyChangedEventArgs, IEnumerable, IEnumerable$1, IList$1 } from "igniteui-react-core";
import { ILegendOwner } from "igniteui-react-core";
import { IInternalLegendOwner } from "igniteui-react-core";
import { IDataLegendTarget } from "igniteui-react-core";
import { ISeriesViewerWidget } from "./ISeriesViewerWidget";
import { SRProvider } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { DoubleAnimator } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { IChartLegend } from "igniteui-react-core";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { Brush } from "igniteui-react-core";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ChartHitTestMode } from "./ChartHitTestMode";
import { InteractionState } from "igniteui-react-core";
import { WindowResponse } from "./WindowResponse";
import { Visibility } from "igniteui-react-core";
import { IOverviewPlusDetailPane } from "igniteui-react-core";
import { SeriesViewerComponentsFromView } from "./SeriesViewerComponentsFromView";
import { ZoomCoercionMode } from "./ZoomCoercionMode";
import { ModifierKeys } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { CanvasRenderScheduler } from "igniteui-react-core";
import { SyncSettings } from "./SyncSettings";
import { SeriesViewerComponentsForView } from "./SeriesViewerComponentsForView";
import { Dictionary$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IDataLegend } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { FrameworkElement } from "igniteui-react-core";
import { EventProxy } from "igniteui-react-core";
import { MouseEventArgs } from "igniteui-react-core";
import { MouseButtonEventArgs } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesViewerManipulationEventArgs } from "./SeriesViewerManipulationEventArgs";
import { Key } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { RectChangedEventArgs } from "igniteui-react-core";
import { RefreshCompletedEventArgs } from "./RefreshCompletedEventArgs";
import { Thickness } from "igniteui-react-core";
import { AxisTitlePosition } from "./AxisTitlePosition";
import { FontInfo } from "igniteui-react-core";
import { IFastItemsSource } from "igniteui-react-core";
import { CoercionInfo } from "./CoercionInfo";
import { IDataLegendSeries } from "igniteui-react-core";
import { ChartContentType } from "./ChartContentType";
import { ISchedulableRender } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { ITileZoomTile } from "./ITileZoomTile";
import { IExecutionContext } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { PathGeometry } from "igniteui-react-core";
import { Geometry } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { LabelPanelsArrangeState } from "./LabelPanelsArrangeState";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
import { IProvidesViewport } from "./IProvidesViewport";
import { ActualLegendItemBadgeShape } from "./ActualLegendItemBadgeShape";
import { StandardLegendItems } from "igniteui-react-core";
import { DomRenderer, DomWrapper } from "igniteui-react-core";
import { PointerTooltipStyle } from "./PointerTooltipStyle";
import { DefaultPaletteInfo } from "./DefaultPaletteInfo";
import { AxisRange } from "./AxisRange";
import { AxisAnnotationCollection } from "./AxisAnnotationCollection";
import { VerticalAlignment } from "igniteui-react-core";
import { Canvas } from "igniteui-react-core";
import { IFastItemsSourceProvider } from "igniteui-react-core";
import { AxisExtentType } from "./AxisExtentType";
import { DoubleCollection } from "igniteui-react-core";
import { LabelPosition } from "./LabelPosition";
import { BindingFormatter } from "igniteui-react-core";
import { LabelFontHeuristics } from "./LabelFontHeuristics";
import { AxisOrientation } from "./AxisOrientation";
import { Pool$1 } from "igniteui-react-core";
import { AxisComponentsFromView } from "./AxisComponentsFromView";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { GeometryCollection } from "igniteui-react-core";
import { PathRenderingInfo } from "./PathRenderingInfo";
import { RenderRequestedEventArgs } from "./RenderRequestedEventArgs";
import { CategoryMode } from "./CategoryMode";
import { GridMode } from "./GridMode";
import { Panel } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { TickmarkValues } from "./TickmarkValues";
import { ICategoryScaler } from "./ICategoryScaler";
import { FastItemsSourceEventArgs } from "igniteui-react-core";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { AxisRenderingParametersBase } from "./AxisRenderingParametersBase";
import { HighlightingState } from "./HighlightingState";
import { Marker } from "./Marker";
import { Polyline } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { AutoMarginsAndAngleUpdateMode } from "./AutoMarginsAndAngleUpdateMode";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { ILegendSeries } from "igniteui-react-core";
import { ILegendSeriesInternal } from "igniteui-react-core";
import { ILegendTemplateProvider } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { SeriesVisibleRangeMode } from "./SeriesVisibleRangeMode";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { SeriesComponentsFromView } from "./SeriesComponentsFromView";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { ISortingAxis } from "./ISortingAxis";
import { DataLegendSeriesGroup } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { Style } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class SeriesViewer extends Control implements INotifyPropertyChanged, ILegendOwner, IInternalLegendOwner, IDataLegendTarget {
    static $t: Type;
    private _widget;
    get widget(): ISeriesViewerWidget;
    set widget(a: ISeriesViewerWidget);
    cq: SeriesViewerView;
    static staticInit(): void;
    private c2;
    private get c3();
    private a4;
    get a5(): ISeriesViewerInteractionManager;
    get ed(): boolean;
    constructor();
    private ci;
    lf(): void;
    private nd;
    protected get_eu(): boolean;
    get eu(): boolean;
    protected get_et(): boolean;
    get et(): boolean;
    lg(): void;
    get series(): SeriesCollection;
    private bl;
    private n7;
    private bs;
    get bt(): SeriesPlotAreaMarginHorizontalMode;
    set bt(a: SeriesPlotAreaMarginHorizontalMode);
    private bu;
    get bv(): SeriesPlotAreaMarginVerticalMode;
    set bv(a: SeriesPlotAreaMarginVerticalMode);
    li(): void;
    protected l3(): void;
    private _skipDataCleanup;
    get skipDataCleanup(): boolean;
    set skipDataCleanup(a: boolean);
    protected n1(a: any): void;
    private n8;
    ll(a: number, b: number, c: boolean, d: boolean): {
        p0?: number;
        p1?: number;
    };
    dz(): boolean;
    get e5(): boolean;
    protected get d9(): boolean;
    protected get ds(): boolean;
    protected get dr(): boolean;
    get dq(): boolean;
    get a3(): IHighlightingManager;
    get a6(): ISeriesViewerScrollbarManager;
    private k9;
    cr: DoubleAnimator;
    cs: DoubleAnimator;
    private le;
    ol(a: number): void;
    ld(): void;
    rm(a: number): Brush;
    rs(a: number): Brush;
    rq(a: number): Brush;
    rr(a: number): Brush;
    private rl;
    ag: BrushCollection;
    aj: BrushCollection;
    ah: BrushCollection;
    ai: BrushCollection;
    ba: MarkerAutomaticBehavior;
    ap: ChartContentManager;
    get r6(): Point;
    set r6(a: Point);
    private r5;
    nx(): void;
    get ec(): boolean;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    static readonly p2: DependencyProperty;
    get dn(): boolean;
    set dn(a: boolean);
    plotAreaMouseLeftButtonDown: (sender: any, e: PlotAreaMouseButtonEventArgs) => void;
    plotAreaMouseLeftButtonUp: (sender: any, e: PlotAreaMouseButtonEventArgs) => void;
    plotAreaClicked: (sender: any, e: PlotAreaMouseButtonEventArgs) => void;
    plotAreaMouseEnter: (sender: any, e: PlotAreaMouseEventArgs) => void;
    plotAreaMouseLeave: (sender: any, e: PlotAreaMouseEventArgs) => void;
    plotAreaMouseOver: (sender: any, e: PlotAreaMouseEventArgs) => void;
    mt(a: Point, b: boolean): void;
    private bb;
    private bf;
    mu(a: Point, b: boolean, c: boolean): void;
    static readonly o7: DependencyProperty;
    get ek(): boolean;
    set ek(a: boolean);
    static readonly py: DependencyProperty;
    get e4(): boolean;
    set e4(a: boolean);
    static readonly qk: DependencyProperty;
    get br(): SeriesHighlightingMode;
    set br(a: SeriesHighlightingMode);
    static readonly ph: DependencyProperty;
    get b1(): SeriesViewerScrollbarMode;
    set b1(a: SeriesViewerScrollbarMode);
    protected bz: SeriesViewerScrollbarMode;
    static readonly pp: DependencyProperty;
    get b2(): SeriesViewerScrollbarMode;
    set b2(a: SeriesViewerScrollbarMode);
    protected b0: SeriesViewerScrollbarMode;
    static readonly qy: DependencyProperty;
    get by(): SeriesViewerHorizontalScrollbarPosition;
    set by(a: SeriesViewerHorizontalScrollbarPosition);
    static readonly pr: DependencyProperty;
    get b3(): SeriesViewerVerticalScrollbarPosition;
    set b3(a: SeriesViewerVerticalScrollbarPosition);
    static readonly q0: DependencyProperty;
    get ru(): Brush;
    set ru(a: Brush);
    static readonly pl: DependencyProperty;
    get rv(): Brush;
    set rv(a: Brush);
    static readonly pq: DependencyProperty;
    get gg(): number;
    set gg(a: number);
    static readonly pt: DependencyProperty;
    get gf(): number;
    set gf(a: number);
    static readonly po: DependencyProperty;
    get gc(): number;
    set gc(a: number);
    static readonly pk: DependencyProperty;
    get gd(): number;
    set gd(a: number);
    static readonly pm: DependencyProperty;
    get ge(): number;
    set ge(a: number);
    static readonly pn: DependencyProperty;
    get gi(): number;
    set gi(a: number);
    static readonly pv: DependencyProperty;
    get gh(): number;
    set gh(a: number);
    static readonly pu: DependencyProperty;
    get d1(): boolean;
    set d1(a: boolean);
    static readonly ik: string;
    static readonly ps: DependencyProperty;
    get r3(): Brush;
    set r3(a: Brush);
    static readonly qv: DependencyProperty;
    get r4(): Brush;
    set r4(a: Brush);
    static readonly qz: DependencyProperty;
    get g0(): number;
    set g0(a: number);
    static readonly q2: DependencyProperty;
    get gz(): number;
    set gz(a: number);
    static readonly qx: DependencyProperty;
    get gx(): number;
    set gx(a: number);
    static readonly qu: DependencyProperty;
    get g3(): number;
    set g3(a: number);
    static readonly q5: DependencyProperty;
    get gy(): number;
    set gy(a: number);
    static readonly qw: DependencyProperty;
    get g2(): number;
    set g2(a: number);
    static readonly q4: DependencyProperty;
    get g1(): number;
    set g1(a: number);
    static readonly q3: DependencyProperty;
    get fd(): boolean;
    set fd(a: boolean);
    static readonly kh: string;
    static readonly q1: DependencyProperty;
    private bq;
    private bn;
    get bo(): SeriesHighlightingBehavior;
    get bp(): SeriesHighlightingBehavior;
    set bp(a: SeriesHighlightingBehavior);
    static readonly pg: DependencyProperty;
    get a7(): LegendHighlightingMode;
    set a7(a: LegendHighlightingMode);
    static readonly pz: DependencyProperty;
    get a9(): LegendItemBadgeShape;
    set a9(a: LegendItemBadgeShape);
    static readonly p1: DependencyProperty;
    get a8(): LegendItemBadgeMode;
    set a8(a: LegendItemBadgeMode);
    static readonly p0: DependencyProperty;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected nl(a: string, b: any, c: any): void;
    mk(): void;
    ml(a: IEnumerable): void;
    mw(a: Series, b: any, c: any): void;
    m0(a: Series, b: any, c: any): void;
    mx(a: Series, b: any, c: any): void;
    my(a: Series, b: any, c: any): void;
    mz(a: Series, b: any, c: any): void;
    ku(a: Rect, b: ScalerParams): Tuple$2<boolean, number>;
    get eq(): boolean;
    private dc;
    l2(): void;
    m1(a: Series, b: any, c: any): void;
    m2(a: Series, b: any, c: any): void;
    seriesCursorMouseMove: (sender: any, e: ChartCursorEventArgs) => void;
    no(a: Series, b: any): void;
    seriesMouseLeftButtonDown: (sender: any, e: DataChartMouseButtonEventArgs) => void;
    ns(a: Series, b: any, c: MouseButtonEventArgs): void;
    seriesMouseLeftButtonUp: (sender: any, e: DataChartMouseButtonEventArgs) => void;
    nt(a: Series, b: any, c: MouseButtonEventArgs): void;
    seriesMouseMove: (sender: any, e: ChartMouseEventArgs) => void;
    oc(a: Point): void;
    od(a: Point): void;
    nu(a: Series, b: any, c: MouseEventArgs): void;
    seriesMouseEnter: (sender: any, e: ChartMouseEventArgs) => void;
    nq(a: Series, b: any, c: MouseEventArgs): void;
    seriesMouseLeave: (sender: any, e: ChartMouseEventArgs) => void;
    nr(a: Series, b: any, c: MouseEventArgs): void;
    private c7;
    l1(): void;
    private se;
    protected get_su(): Rect;
    get su(): Rect;
    private sc;
    get sj(): Rect;
    set sj(a: Rect);
    protected get_d0(): boolean;
    get d0(): boolean;
    so(a: Rect, b: Rect, c: Rect): Rect;
    private c5;
    private sb;
    protected get_si(): Rect;
    get si(): Rect;
    sm(a: Rect, b: Rect, c: Rect): Rect;
    protected sh(a: Rect): Rect;
    sn(): Rect;
    protected oh(a: Axis): void;
    sv: Rect;
    fc: boolean;
    dk: boolean;
    e0: boolean;
    hg: number;
    private g8;
    get hb(): number;
    set hb(a: number);
    he: number;
    hf: number;
    protected er: boolean;
    protected dm: boolean;
    ng(a: Rect, b: Rect): void;
    private bw;
    bx(): SeriesViewerComponentsForView;
    private da;
    k0(a: Point, b: boolean): void;
    eg: boolean;
    private ar;
    get at(): ChartHitTestMode;
    set at(a: ChartHitTestMode);
    nw(): void;
    protected au(): ChartHitTestMode;
    private aq;
    get as(): ChartHitTestMode;
    set as(a: ChartHitTestMode);
    eh: boolean;
    seriesAnimating: (series: Series) => void;
    nn(a: Series): void;
    abstract em(): boolean;
    abstract en(): boolean;
    el(): boolean;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    get ch(): InteractionState;
    set ch(a: InteractionState);
    private c8;
    private cd;
    mn(a: Point): void;
    mo(a: Point, b: boolean): void;
    ey(a: Point, b: number): boolean;
    md(a: Point): void;
    ex(a: Key): boolean;
    private de;
    dv: boolean;
    private c6;
    get dp(): boolean;
    set dp(a: boolean);
    protected get_ee(): boolean;
    get ee(): boolean;
    mf(a: Point): void;
    get dy(): boolean;
    j6: string;
    ms(a: Point): void;
    mg(a: Point, b: boolean): void;
    me(a: Point): void;
    get ez(): boolean;
    set ez(a: boolean);
    private nb;
    mr(a: Point): void;
    nc(a: Point, b: number, c: number, d: number): void;
    mq(a: number): void;
    m8(a: Point, b: number, c: number, d: number): void;
    mm(a: Point): void;
    mp(a: number): void;
    mh(a: Point): void;
    m7(a: Point, b: number, c: number, d: number): void;
    m4(): void;
    mj(a: Size): void;
    lc(): void;
    l6(a: Point, b: boolean): void;
    cf(a: boolean): InteractionState;
    viewerManipulationStarting: (sender: any, e: SeriesViewerManipulationEventArgs) => void;
    viewerManipulationEnding: (sender: any, e: SeriesViewerManipulationEventArgs) => void;
    private di;
    na(): void;
    m9(): void;
    oe(): void;
    k7(): void;
    k2(): void;
    k1(): void;
    ne(): void;
    n0(): void;
    ny(): void;
    l5(a: Point, b: boolean): void;
    e3(): boolean;
    private df;
    get e7(): boolean;
    set e7(a: boolean);
    l4(a: Point, b: boolean, c: boolean): void;
    or(a: any, b: PropertyUpdatedEventArgs): void;
    oq(a: SyncLink, b: SyncLink): void;
    k3(a: Point): void;
    ot(a: Rect, b: boolean): void;
    ou(a: Rect, b: boolean, c: boolean): void;
    nf(a: Rect, b: boolean): void;
    get ei(): boolean;
    private _fg;
    fg(): IEnumerable$1<SeriesViewer>;
    r9(a: Point): Point;
    r7(a: Point): Point;
    st(a: Rect): Rect;
    windowRectChanged: (sender: any, e: RectChangedEventArgs) => void;
    private nv;
    m6(a: Rect, b: Rect): void;
    sizeChanged: (sender: any, e: RectChangedEventArgs) => void;
    m3(a: Size, b: Size): void;
    d4: boolean;
    e1(a: Rect, b: Rect): boolean;
    actualWindowRectChanged: (sender: any, e: RectChangedEventArgs) => void;
    private nj;
    n6(): void;
    gridAreaRectChanged: (sender: any, e: RectChangedEventArgs) => void;
    private nk;
    protected get_ef(): boolean;
    get ef(): boolean;
    mv(a: Rect, b: Rect): void;
    b7: WindowResponse;
    lk(): void;
    dx: boolean;
    g6: number;
    private _syncChannel;
    get syncChannel(): string;
    set syncChannel(a: string);
    private b4;
    get actualSyncLink(): SyncLink;
    set actualSyncLink(a: SyncLink);
    e8: boolean;
    lj(): void;
    s0: Visibility;
    private dh;
    mb(): void;
    l9(): void;
    ma(): void;
    get cj(): IOverviewPlusDetailPane;
    protected on(a: boolean): void;
    sz: Visibility;
    d3: boolean;
    fb: boolean;
    rt: Brush;
    r2: Brush;
    private b8;
    get b9(): ZoomCoercionMode;
    set b9(a: ZoomCoercionMode);
    ca(): ZoomCoercionMode;
    cb: ZoomCoercionMode;
    rx: Brush;
    rj: Brush;
    rw: Brush;
    du(): boolean;
    dl(): boolean;
    sw: Rect;
    kz(): void;
    private ha;
    private notifyCrosshairUpdate;
    protected os(a: number, b: number): void;
    ga(): number;
    gb(): number;
    protected nh(a: any, b: string, c: any, d: any): void;
    get ea(): boolean;
    protected get ew(): boolean;
    bk: Series;
    om(a: Point): void;
    private kt;
    op(): void;
    protected ly(): void;
    oo(): void;
    private dg;
    protected e9: boolean;
    ce: InteractionState;
    cg: InteractionState;
    rf: ModifierKeys;
    rg: ModifierKeys;
    private sd;
    get sp(): Rect;
    set sp(a: Rect);
    fi: Date;
    fe: boolean;
    protected og(): void;
    kv(a: Rect, b: Rect): void;
    protected lz(a: Rect, b: Rect): void;
    g4: number;
    g5: number;
    private ss;
    refreshCompleted: (sender: any, e: RefreshCompletedEventArgs) => void;
    nm(): void;
    protected abstract cp(): SeriesViewerView;
    protected m5(a: SeriesViewerView): void;
    static sr: Rect;
    ov: DataTemplate;
    o4: DataTemplate;
    o1: DataTemplate;
    o2: DataTemplate;
    ow: DataTemplate;
    oz: DataTemplate;
    ox: DataTemplate;
    o3: DataTemplate;
    o0: DataTemplate;
    oy: DataTemplate;
    jw: string;
    re: HorizontalAlignment;
    rd: HorizontalAlignment;
    private hm;
    get j3(): string;
    set j3(a: string);
    private hl;
    get jr(): string;
    set jr(a: string);
    private ri;
    get r1(): Brush;
    set r1(a: Brush);
    private rh;
    get r0(): Brush;
    set r0(a: Brush);
    private f1;
    get gv(): number;
    set gv(a: number);
    private fz;
    get gt(): number;
    set gt(a: number);
    private f0;
    get gu(): number;
    set gu(a: number);
    private fy;
    get gs(): number;
    set gs(a: number);
    private fx;
    get gr(): number;
    set gr(a: number);
    private fv;
    get gp(): number;
    set gp(a: number);
    private fw;
    get gq(): number;
    set gq(a: number);
    private fu;
    get go(): number;
    set go(a: number);
    jk: string;
    sx(): Thickness;
    sy(): Thickness;
    an(a: Axis): AxisTitlePosition;
    ao(a: Axis): AxisTitlePosition;
    abstract getFontInfo(): FontInfo;
    getFontHeight(): number;
    protected get_ev(): boolean;
    get ev(): boolean;
    l8(): void;
    abstract getFontBrush(): Brush;
    abstract rk(): Brush;
    hj: any;
    provideContainer(a: any): void;
    l7(a: number, b: number): void;
    notifyContainerResized(): void;
    sk(): Rect;
    k8(): void;
    r8(): Point;
    cu(): FontInfo;
    ct(): FontInfo;
    rn(): Brush;
    ro(): Brush;
    kx(a: Series): void;
    n2(a: Series): void;
    al: CanvasRenderScheduler;
    am: CanvasRenderScheduler;
    ak: CanvasRenderScheduler;
    private dd;
    get es(): boolean;
    set es(a: boolean);
    private c4;
    get dj(): boolean;
    set dj(a: boolean);
    private _syncSettings;
    get syncSettings(): SyncSettings;
    set syncSettings(a: SyncSettings);
    kw(a: any): void;
    n4(a: any): void;
    lv(source_: any, a: number, b: any, c: any): void;
    lm(source_: any): void;
    lt(source_: any, a: number, b: any): void;
    lu(source_: any, a: number, b: any): void;
    destroyed: boolean;
    protected hh: any;
    protected ff: Dictionary$2<string, any>;
    ep: boolean;
    destroy(): void;
    protected k6(): void;
    ob(source_: any): void;
    n5(): void;
    oa(a: string, source_: any): void;
    n3(a: string, b: boolean): void;
    protected n9(a: Series, b: any): void;
    protected oj(a: any): void;
    protected ok(): void;
    private f2;
    get gw(): number;
    set gw(a: number);
    private fr;
    get gk(): number;
    set gk(a: number);
    private ft;
    get gn(): number;
    set gn(a: number);
    private fp;
    get f9(): number;
    set f9(a: number);
    private fo;
    get f8(): number;
    set f8(a: number);
    private fn;
    get f7(): number;
    set f7(a: number);
    e2(): boolean;
    private c9;
    get d6(): boolean;
    set d6(a: boolean);
    private fs;
    get gl(): number;
    set gl(a: number);
    private fq;
    get gj(): number;
    set gj(a: number);
    static cc(a: string, b: any): CoercionInfo;
    private hk;
    get i2(): string;
    set i2(a: string);
    private fk;
    get f4(): number;
    set f4(a: number);
    private fj;
    get f3(): number;
    set f3(a: number);
    private sa;
    get sf(): Rect;
    set sf(a: Rect);
    sl(): Rect;
    d2: boolean;
    private lh;
    sq(): Rect;
    protected sg(): Rect;
    hi(a: number, b: number): any;
    private fl;
    get f5(): number;
    set f5(a: number);
    private fm;
    get f6(): number;
    set f6(a: number);
    lx(): void;
    lw(): void;
    flush(): void;
    lb(a: boolean, b: boolean, c: boolean): void;
    fa(): boolean;
    private o5;
    private av;
    protected nz(a: DependencyObject, b: (arg1: boolean) => void): void;
    protected of(a: DependencyObject): void;
    k4(): void;
    d7: boolean;
    d8: boolean;
    d5: boolean;
    mi(): void;
    private db;
    get ej(): boolean;
    ky(): void;
    eo(): boolean;
    private g9;
    hd(): number;
    cx(): FontInfo;
    cw(): FontInfo;
    oi(): void;
    protected dt: boolean;
    rz: Brush;
    ry: Brush;
    gm: number;
    eb: boolean;
    seriesDataUpdated: (sender: any, e: EventArgs) => void;
    np(): void;
    lq(): void;
    lr(): void;
    private ls;
    lp(a: Point): void;
    private fh;
    attachDataLegend(a: IDataLegend): void;
    detachDataLegend(a: IDataLegend): void;
    getDataLegendSeries(): IDataLegendSeries[];
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class SeriesViewerView extends Base implements ISchedulableRender {
    static $t: Type;
    constructor(a: SeriesViewer);
    l(): IExecutionContext;
    co(): void;
    p: SeriesViewer;
    c4(): void;
    e(): Series;
    private cn;
    a: CanvasRenderScheduler;
    n: IOverviewPlusDetailPane;
    private dn;
    private dm;
    em(): void;
    private ct;
    private cs;
    o: OverviewPlusDetailViewportHost;
    cb(a: number, b: number, c: RenderSurface): void;
    d5(): void;
    cd(): void;
    d7(): void;
    ck(): void;
    cc(): void;
    ce(): void;
    dy(a: Series): void;
    dc(): void;
    private er;
    aq(a: Series): boolean;
    protected g: SeriesCollection;
    protected b: AxisCollection;
    private ai;
    get au(): boolean;
    set au(a: boolean);
    bp(a: Series): void;
    dt(a: RenderingContext): void;
    bx(): void;
    bt(): void;
    cf(): void;
    ca(): void;
    dr(): void;
    protected fi: Rectangle;
    protected ff: Path;
    d8(): void;
    eg(a: Rect): void;
    bw(): void;
    df(): void;
    eo(a: number, b: number, c: number, d: number): void;
    protected fe: Line;
    protected fd: Line;
    ed(): void;
    cl(): void;
    eh(a: number, b: number, c: number, d: number): void;
    d9(): void;
    cg(): void;
    cj(): void;
    private e6;
    private e7;
    en(a: Rect, b: Rect): void;
    ec(): void;
    ep(a: Rect): void;
    dw(a: Axis): void;
    dx(a: Axis): void;
    bo(a: Axis): void;
    bl(a: Axis): void;
    private h;
    i(): SeriesViewerComponentsFromView;
    static aw(a: Series): List$1<Series>;
    d2(): void;
    j: SeriesViewerViewManager;
    protected w: RenderingContext;
    z: RenderingContext;
    y: RenderingContext;
    x: RenderingContext;
    an: boolean;
    ao: boolean;
    protected bi: any;
    c0(a: any): void;
    private al;
    protected cy(a: Point, b: boolean): void;
    protected cz(a: Point, b: boolean): void;
    protected c3(a: Point): void;
    protected cx(a: Point, b: boolean, c: boolean): void;
    du(a: RenderingContext): void;
    protected get_ap(): boolean;
    get ap(): boolean;
    k: EventProxy;
    ef(): void;
    a9: number;
    f(a: Point, b: boolean, c: DataContext, d: boolean): {
        ret: Series;
        p2: DataContext;
    };
    bd(): number;
    bc(): number;
    a8: number;
    a7: number;
    private e9;
    private aj;
    cu(): void;
    c1(a: number, b: number): void;
    private fg;
    private fh;
    b6(a: Rectangle): void;
    b9(a: Rectangle): void;
    b8(): void;
    d3(): void;
    private a1;
    private az;
    private a0;
    private ay;
    private ak;
    private aa;
    private b2;
    private ek;
    v(): FontInfo;
    u(): FontInfo;
    private e5;
    private e4;
    private bf;
    private a2;
    private be;
    fm(): Thickness;
    fl(): Thickness;
    protected dv(a: Rect): void;
    cq(): void;
    private fa;
    protected d0(): void;
    isValid(): boolean;
    preRender(): void;
    protected ds(): void;
    protected ab: boolean;
    protected d1(): void;
    c2(): void;
    cw(): void;
    fb(): Rect;
    e8(): Point;
    private d6;
    ee(): void;
    dp(): void;
    protected as(a: Point): boolean;
    c8(a: Point, b: boolean, c: boolean): void;
    protected c7(a: Point): void;
    protected c6(a: Point): void;
    protected c9(a: Point): void;
    d4(): void;
    get ez(): ModifierKeys;
    eq(a: Rect): void;
    cr(a: boolean): void;
    bk(a: boolean): void;
    protected el(): void;
    private af;
    get isDirty(): boolean;
    set isDirty(a: boolean);
    undirty(a: boolean): void;
    get index(): number;
    postRender(): void;
    b7(): void;
    protected ae: boolean;
    ch(): void;
    ea(): void;
    bv(a: boolean): void;
    bm(a: any): void;
    ei(a: number): void;
    ej(a: number): void;
    bn(a: any): void;
    dz(a: any): void;
    da(a: Brush): void;
    bu(a: Point): void;
    av: boolean;
    m(a: boolean): InteractionState;
    c5(): void;
    private et;
    private es;
    bb(a: TextBlock, b: FontInfo): number;
    ba(a: string, b: FontInfo): number;
    dj(): void;
    private eu;
    di(): void;
    de(): void;
    c(a: Axis): AxisTitlePosition;
    d(a: Axis): AxisTitlePosition;
    dk(): void;
    dl(): void;
    t(): FontInfo;
    e3(): Brush;
    q(): FontInfo;
    e0(): Brush;
    s(): FontInfo;
    r(): FontInfo;
    e2(): Brush;
    e1(): Brush;
    get a4(): number;
    get a5(): number;
    get a6(): number;
    get a3(): number;
    get ew(): TextBlock;
    get ev(): TextBlock;
    fc(): Rect;
    fk(): Thickness;
    fj(): Thickness;
    private ad;
    private ac;
    dd(a: any, b: any): void;
    dh(a: any, b: any): void;
    ey(): HorizontalAlignment;
    ex(): HorizontalAlignment;
    private ag;
    bq(): void;
    am(): boolean;
    b5(): void;
    cp(): void;
    at(a: Point): boolean;
    dq(): void;
    private ax;
    b3(a: Dictionary$2<any, ITileZoomTile>, b: List$1<ITileZoomTile>, c: number): void;
    bh(a: Rect, b: ITileZoomTile, c: number): any;
    b0(): void;
    b1(a: ITileZoomTile): void;
    cm(): void;
    ar: boolean;
    private bg;
    by(): void;
    br(): void;
    bz(a: number): void;
    bs(): void;
    private ah;
    ci(): void;
    eb(): void;
    dg(): void;
    cv(): void;
    db(): void;
    b4(a: any): void;
    bj(a: number, b: number): any;
}
/**
 * @hidden
 */
export declare class OverviewPlusDetailViewportHost extends Base implements IProvidesViewport {
    static $t: Type;
    constructor(a: SeriesViewerView);
    a: SeriesViewerView;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    getEffectiveViewport(): Rect;
}
/**
 * @hidden
 */
export declare class LegendTemplates extends Base {
    static $t: Type;
    private static readonly z;
    private static readonly ae;
    private static readonly ad;
    private static readonly ah;
    private static readonly ab;
    private static readonly y;
    private static readonly aa;
    private static readonly ac;
    static af(a: Series): DataTemplate;
    static a(a: DataTemplateRenderInfo): RenderingContext;
    static v(a: DataContext): void;
    private static b;
    private static c;
    static u(a: DataTemplateRenderInfo, b: number, c: Brush, d: Brush, e: number, f: number, g: number, h: number): void;
    static s(a: DataTemplateRenderInfo): void;
    static r(a: DataTemplateRenderInfo, b: number, c: number): void;
    static t(a: DataTemplateRenderInfo, b?: number): void;
    static j(a: DataTemplateRenderInfo): void;
    static n(a: DataTemplateRenderInfo): void;
    static o(a: DataTemplateRenderInfo): void;
    static q(a: DataTemplateRenderInfo): void;
    static p(a: DataTemplateRenderInfo): void;
    static i(a: DataTemplateRenderInfo): void;
    static l(a: DataTemplateRenderInfo): void;
    static m(a: DataTemplateRenderInfo): void;
    static k(a: DataTemplateRenderInfo): void;
    static g(a: DataTemplateRenderInfo): void;
    private static readonly w;
    private static readonly x;
    static resolveLegendItemTemplate(a: StandardLegendItems): DataTemplate;
    static e(a: DataTemplateRenderInfo): void;
    static f(a: DataTemplateMeasureInfo): void;
    static d(a: DataTemplateMeasureInfo): void;
    static h(a: DataTemplateMeasureInfo): void;
}
/**
 * @hidden
 */
export declare class SeriesViewerViewManager extends Base {
    static $t: Type;
    ae: DomRenderer;
    protected af: DomWrapper;
    protected aj: DomWrapper;
    protected ai: DomWrapper;
    protected ag: DomWrapper;
    ak: DomWrapper;
    t: RenderingContext;
    w: RenderingContext;
    v: RenderingContext;
    u: RenderingContext;
    x: RenderingContext;
    f: EventProxy;
    private j;
    constructor(a: SeriesViewerView);
    protected ah: DomWrapper;
    bi(): void;
    bf(a: any): void;
    static bx(a: DomRenderer, b: () => void): void;
    private bh;
    a9(): void;
    g(): IOverviewPlusDetailPane;
    bl(): void;
    bm(): void;
    b2(): Brush;
    private ab;
    private aa;
    private ac;
    ay(a: number, b: number, c: number): void;
    b7(): Point;
    y(): boolean;
    bb(a: boolean): void;
    a7(a: BrushCollection, b: BrushCollection, c: Brush, d: FontInfo, e: Brush): {
        p0: BrushCollection;
        p1: BrushCollection;
        p2: Brush;
        p3: FontInfo;
        p4: Brush;
    };
    e(): DefaultPaletteInfo;
    a6(a: number, b: number[], c: Brush, d: Brush, e: number, f: boolean): {
        p0: number;
        p1: number[];
        p2: Brush;
        p3: Brush;
        p4: number;
        p5: boolean;
    };
    ax(): void;
    bt(x_: number): void;
    private ad;
    bu(y_: number): void;
    at(a: any): void;
    a8(): void;
    bn(): void;
    au(a: any): void;
    bj(a: any): void;
    bc(): void;
    private l;
    p(): FontInfo;
    private b9;
    cd(): Thickness;
    private aq;
    as(): string;
    private ap;
    ar(): string;
    private b8;
    cc(): Thickness;
    private bz;
    b4(): Brush;
    private by;
    b3(): Brush;
    private k;
    o(): FontInfo;
    private a;
    c(): AxisTitlePosition;
    private b;
    d(): AxisTitlePosition;
    private n;
    r(): FontInfo;
    private b1;
    b6(): Brush;
    private m;
    q(): FontInfo;
    private b0;
    b5(): Brush;
    private ca;
    ce(): Thickness;
    private cb;
    cf(): Thickness;
    bo(): void;
    private bw;
    private bq;
    private bp;
    private br;
    private bs;
    a5(a: number, b: number): void;
    private h;
    i(): PointerTooltipStyle;
    ba(a: boolean): void;
    private z;
    an(a: Rect, b: ITileZoomTile, c: number): any;
    a2(a: ITileZoomTile): void;
    a1(): void;
    bk(a: List$1<ITileZoomTile>): void;
    private al;
    az(): void;
    av(): void;
    private am;
    a0(a: number): void;
    aw(): void;
    private s;
    bd(): void;
    bv(a: boolean): void;
    a3(): void;
    a4(): void;
    bg(): void;
    be(): void;
    ao(a: number, b: number): any;
}
/**
 * @hidden
 */
export declare class AutoRangeCalculator extends Base {
    static $t: Type;
    static a(a: NumericAxisBase, b: number, c: number, d: boolean, e: number, f: number, g: number): {
        p5: number;
        p6: number;
    };
}
/**
 * @hidden
 */
export interface IAxisAnnotationManager {
    owner: Axis;
    onAutoAnnotionsChanged(a: Axis, b: AxisAnnotationCollection, c: NotifyCollectionChangedEventArgs): void;
    onAutoAnnotionsReset(a: Axis, b: AxisAnnotationCollection, c: EventArgs): void;
    onAnnotionsChanged(a: Axis, b: AxisAnnotationCollection, c: NotifyCollectionChangedEventArgs): void;
    onAnnotionsReset(a: Axis, b: AxisAnnotationCollection, c: EventArgs): void;
    onAddAnnotations(a: Axis): void;
    arrangeAnnotations(a: Axis, b: AxisLabelPanelBaseView, c: List$1<FrameworkElement>, d: List$1<Rect>, e: boolean, f: number, g: number, h: number, i: number, j: number): void;
}
/**
 * @hidden
 */
export declare let IAxisAnnotationManager_$type: Type;
/**
 * @hidden
 */
export declare class AxisLabelSettings extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private ab;
    get textStyle(): string;
    set textStyle(a: string);
    private ay;
    get textColor(): Brush;
    set textColor(a: Brush);
    get location(): AxisLabelsLocation;
    set location(a: AxisLabelsLocation);
    private b;
    get visibility(): Visibility;
    set visibility(a: Visibility);
    private a3;
    get showFirstLabel(): boolean;
    set showFirstLabel(a: boolean);
    private i;
    c: AxisLabelsLocation;
    a: Axis;
    registerAxis(a: Axis): void;
    unregisterAxis(a: Axis): void;
    get angle(): number;
    set angle(a: number);
    private n;
    get extent(): number;
    set extent(a: number);
    private p;
    set margin(a: number);
    get leftMargin(): number;
    set leftMargin(a: number);
    private q;
    get rightMargin(): number;
    set rightMargin(a: number);
    private r;
    get topMargin(): number;
    set topMargin(a: number);
    private s;
    get bottomMargin(): number;
    set bottomMargin(a: number);
    private o;
    private av;
    get horizontalAlignment(): HorizontalAlignment;
    set horizontalAlignment(a: HorizontalAlignment);
    private a0;
    get verticalAlignment(): VerticalAlignment;
    set verticalAlignment(a: VerticalAlignment);
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    as(a: string, b: any, c: any): void;
    protected ar(a: any, b: string, c: any, d: any): void;
    k(): boolean;
    l(): boolean;
    static readonly extentPropertyDefault: number;
    get j(): boolean;
    private f;
    get g(): FontInfo;
    set g(a: FontInfo);
    h(a: DomRenderer): FontInfo;
}
/**
 * @hidden
 */
export declare class TitleSettings extends AxisLabelSettings {
    static $t: Type;
    constructor();
    private a5;
    get position(): AxisTitlePosition;
    set position(a: AxisTitlePosition);
    protected ar(a: any, b: string, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare abstract class Axis extends Control implements INotifyPropertyChanged {
    static $t: Type;
    a3(): AxisView;
    a4: AxisView;
    hr(a: AxisView): void;
    he(): void;
    private bs;
    get bt(): SRProvider;
    private a8;
    get a9(): IAxisVisualDataManager;
    eh(): number;
    f1(): any;
    f0(): any;
    protected get_ca(): boolean;
    get ca(): boolean;
    protected get_ci(): boolean;
    get ci(): boolean;
    protected get_b8(): boolean;
    get b8(): boolean;
    protected get_cl(): boolean;
    get cl(): boolean;
    protected get_co(): boolean;
    get co(): boolean;
    protected get_cm(): boolean;
    get cm(): boolean;
    protected get_cd(): boolean;
    get cd(): boolean;
    protected get_cj(): boolean;
    get cj(): boolean;
    protected get_ck(): boolean;
    get ck(): boolean;
    protected get_cb(): boolean;
    get cb(): boolean;
    protected get_cc(): boolean;
    get cc(): boolean;
    aj(): Axis;
    constructor();
    private a6;
    get a7(): IAxisAnnotationManager;
    get b9(): boolean;
    private hc;
    private hd;
    private ha;
    private hb;
    provideRenderer(a: DomRenderer): void;
    at: (item: any) => string;
    ho(a: Rect, b: Rect): void;
    abstract au(): AxisLabelPanelBase;
    ac(): void;
    iq: Canvas;
    get bn(): IFastItemsSourceProvider;
    set bn(a: IFastItemsSourceProvider);
    private bm;
    get bh(): SeriesViewer;
    set bh(a: SeriesViewer);
    private bg;
    get bf(): XamDataChart;
    set bf(a: XamDataChart);
    readonly br: (sender: any, e: RectChangedEventArgs) => void;
    private bx;
    get c5(): boolean;
    set c5(a: boolean);
    private dk;
    get e5(): number;
    set e5(a: number);
    private de;
    get dw(): number;
    set dw(a: number);
    private dr;
    get fb(): number;
    set fb(a: number);
    private dn;
    get e8(): number;
    set e8(a: number);
    private ar;
    get as(): AxisExtentType;
    set as(a: AxisExtentType);
    private dj;
    get e4(): number;
    set e4(a: number);
    dv: number;
    private dq;
    get fa(): number;
    set fa(a: number);
    private dm;
    get e7(): number;
    set e7(a: number);
    private bj;
    private bi;
    get bl(): FontInfo;
    set bl(a: FontInfo);
    private f2;
    get gw(): string;
    set gw(a: string);
    private dl;
    get e6(): number;
    set e6(a: number);
    dx: number;
    private ds;
    get fc(): number;
    set fc(a: number);
    private dp;
    get e9(): number;
    set e9(a: number);
    private fn;
    get fs(): number;
    set fs(a: number);
    private fm;
    get fr(): number;
    set fr(a: number);
    private fl;
    get fq(): number;
    set fq(a: number);
    fo: number;
    private ki;
    get kl(): VerticalAlignment;
    set kl(a: VerticalAlignment);
    private du;
    get fe(): number;
    set fe(a: number);
    private dt;
    get fd(): number;
    set fd(a: number);
    ig(): void;
    private h4;
    private h5;
    ir: TextBlock;
    g5: string;
    jy: Brush;
    ju: Brush;
    ff: number;
    j2: DoubleCollection;
    jx: Brush;
    jv: Brush;
    js: Brush;
    eq: number;
    j0: DoubleCollection;
    jw: Brush;
    jt: Brush;
    et: number;
    j1: DoubleCollection;
    jz: Brush;
    fh: number;
    j3: DoubleCollection;
    fg: number;
    dy: number;
    private ij;
    ce: boolean;
    cg: boolean;
    ch: boolean;
    ct: boolean;
    private bv;
    private df;
    get b3(): boolean;
    get b6(): boolean;
    ie(a: number): void;
    h9(): void;
    ee(): number;
    ev(): number;
    cu: boolean;
    cv: boolean;
    cw: boolean;
    by: boolean;
    c4: boolean;
    get c3(): boolean;
    set c3(a: boolean);
    static readonly jo: DependencyProperty;
    fp: number;
    b0: boolean;
    ay: AxisLabelSettings;
    d4(): number;
    jq(): HorizontalAlignment;
    kj(): VerticalAlignment;
    jr(): HorizontalAlignment;
    kk(): VerticalAlignment;
    d6(): number;
    d8(): number;
    d7(): number;
    d5(): number;
    eb(): number;
    ed(): number;
    ec(): number;
    ea(): number;
    az(): AxisLabelsLocation;
    a0(): AxisLabelsLocation;
    ai: Axis;
    fu: any;
    rangeChanged: (sender: any, e: AxisRangeChangedEventArgs) => void;
    protected h2(a: AxisRangeChangedEventArgs): void;
    be: TitleSettings;
    d9(): number;
    d3(): number;
    get am(): AxisAnnotationCollection;
    private ak;
    get an(): AxisAnnotationCollection;
    private al;
    private j5;
    get kc(): Rect;
    set kc(a: Rect);
    kb: Rect;
    ik(): void;
    c7(a: Rect, b: Rect, c: AxisView): boolean;
    cn(): boolean;
    db: List$1<any>;
    dc: List$1<LabelPosition>;
    av: AxisLabelPanelBase;
    protected io(a: Rect, b: Rect): void;
    private bw;
    get cp(): boolean;
    set cp(a: boolean);
    protected j9(): Rect;
    protected ip(a: Rect, b: Rect): void;
    h3(): void;
    a5: ContentInfo;
    fk: DomRenderer;
    ah: BindingFormatter;
    protected hv(a: any, b: string, c: any, d: any): void;
    ht(): void;
    hu(): void;
    private _coercionMethods;
    get coercionMethods(): any;
    set coercionMethods(a: any);
    private bu;
    protected get_expectFunctions(): boolean;
    protected set_expectFunctions(a: boolean): void;
    get expectFunctions(): boolean;
    set expectFunctions(a: boolean);
    cx: boolean;
    private ib;
    c6: boolean;
    protected hq(a: GeometryCollection, b: number, c: number, d: Rect): void;
    protected hp(a: GeometryCollection, b: number, c: Rect, d: PathRenderingInfo, e: boolean): void;
    protected im(a: GeometryCollection, b: number, c: number, d: Rect): void;
    protected il(a: GeometryCollection, b: number, c: Rect, d: PathRenderingInfo, e: boolean): void;
    private cf;
    protected id(a: number, b: number, c: Rect, d: Rect, e: Rect, f: number, g: number): {
        p0: number;
        p1: number;
    };
    dz(a: number, b: number, c: number, d: PathRenderingInfo): number;
    hh(a: GeometryCollection): void;
    protected hg(): void;
    h6(): void;
    h7(a: boolean): void;
    renderRequested: (sender: any, e: RenderRequestedEventArgs) => void;
    bb: LabelFontHeuristics;
    static es: number;
    ey(): number;
    e2(): number;
    e0(): number;
    e1(): number;
    ez(): number;
    ew(): number;
    d1(a: number, b: boolean, c: Rect, d: Rect, e: Rect): number;
    private ep;
    private eg;
    cy(a: number, b: Rect, c: Rect, d: Rect): boolean;
    protected ef(a: number, b: Rect, c: Rect, d: Rect): number;
    ex(): number;
    protected get cz(): boolean;
    cq: boolean;
    hj(a: boolean): void;
    private dh;
    private b1;
    ia(): void;
    protected b5(): boolean;
    d0(a: number, b: ScalerParams): number;
    protected ic(): void;
    private di;
    ba(): LabelFontHeuristics;
    bk(): FontInfo;
    private hk;
    cr: boolean;
    c0(): boolean;
    c1(a: boolean): boolean;
    c2(): boolean;
    protected h8(a: boolean): void;
    ii(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected h1(a: string, b: any, c: any): void;
    dd: List$1<Series>;
    cs(a: Series): boolean;
    bz(a: Series): boolean;
    fz: any;
    gf: string;
    ag: any[];
    fw(a: any, b: string): any;
    private c9;
    protected gr(a: string): string;
    private c8;
    protected fx(a: any, b: string, c: string): any;
    fy(a: any): any;
    gc(a: number): string;
    eu(): number;
    ei(a: number, b: ScalerParams): number;
    ej(a: number, b: ScalerParams, c: CategoryMode): number;
    j8(a: Rect): Rect;
    j7(): Rect;
    j6(): Rect;
    protected ka(a: Rect, b: Rect): Rect;
    ek(a: number, b: Rect, c: Rect): number;
    hm(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    hl(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    el(a: number, b: ScalerParams): number;
    em(a: number, b: ScalerParams, c: CategoryMode): number;
    en(a: number, b: Rect, c: Rect): number;
    hn(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    e3(a: number): number;
    abstract get a1(): AxisOrientation;
    kh: Size;
    hs(a: Size): void;
    ih(): void;
    ao: AxisComponentsForView;
    ap(): AxisComponentsForView;
    d2: number;
    private dg;
    get er(): number;
    set er(a: number);
    b7(): boolean;
    eo(): number;
    protected hf(): void;
    hi(a: AxisRangeChangedEventArgs): void;
    bq: Pool$1<TextBlock>;
    bp: Pool$1<TextBlock>;
    bo: Pool$1<Rectangle>;
    get kd(): Path;
    get ke(): Path;
    get kg(): Path;
    get kf(): Path;
    bd(): SyncSettings;
    aq(): AxisComponentsFromView;
    private aw;
    get ax(): AxisLabelSettings;
    hw(a: RenderingContext, b: RenderingContext): void;
    b4(): boolean;
    fv(): any;
    private _da;
    da(): IEnumerable$1<Series>;
    hx(a: string): void;
    h0(a: any): void;
    hz(a: any): void;
    fj: CultureInfo;
    j4(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AxisCollection extends ObservableCollection$1<Axis> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class AxisLabelManager extends Base {
    static $t: Type;
    e: List$1<any>;
    f: List$1<LabelPosition>;
    b: AxisLabelPanelBase;
    a: Axis;
    c: (arg1: number) => void;
    constructor();
    n(a: Rect, b: Rect): void;
    i(a: any, b: LabelPosition): void;
    t(): void;
    static j(a: FrameworkElement, b: AxisLabelSettings): void;
    private static k;
    private static l;
    static m(a: FrameworkElement, b: TitleSettings): void;
    h(a: FrameworkElement): void;
    r(a: number): void;
    o(a: number): void;
    u(a: number): FrameworkElement;
    s(a: number): void;
    get d(): boolean;
    q(): void;
    p(): void;
    g(): void;
}
/**
 * @hidden
 */
export declare abstract class AxisLabelPanelBase extends Panel {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    af: AxisLabelPanelBaseView;
    cx: Rect;
    b8(): void;
    cp(): void;
    co(): void;
    constructor();
    bw: number;
    ad: Axis;
    private ak;
    get az(): boolean;
    set az(a: boolean);
    private a3;
    get a9(): List$1<any>;
    set a9(a: List$1<any>);
    ba: List$1<LabelPosition>;
    c4: Rect;
    private cw;
    get c5(): Rect;
    set c5(a: Rect);
    private cv;
    get c1(): Rect;
    set c1(a: Rect);
    c2: Rect;
    private bc;
    get bg(): number;
    set bg(a: number);
    bx: () => boolean;
    bb: List$1<FrameworkElement>;
    a8: List$1<Rect>;
    ag: AxisLabelSettings;
    bn(): number;
    ao: boolean;
    c3: Rect;
    cl(): void;
    ar: boolean;
    av: boolean;
    aw: boolean;
    ax: boolean;
    bz: any;
    al: boolean;
    protected an(a: List$1<Rect>, b: List$1<boolean>): boolean;
    protected by(a: number, b: List$1<Rect>, c: List$1<boolean>): {
        ret: number;
        p1?: List$1<Rect>;
    };
    a5(): List$1<Rect>;
    b6(): void;
    b2(a: Size): void;
    get ap(): boolean;
    bl(): number;
    bq(): number;
    at(a: number, b: Rect): boolean;
    bk(a: any): number;
    bv(a: any): number;
    bm(a: any): number;
    bj(a: any): number;
    aq(): boolean;
    protected ct(a: Rect, b: Rect): void;
    protected cd(a: Rect, b: Rect): void;
    a7(): List$1<Rect>;
    a6(a: List$1<Rect>): List$1<Rect>;
    protected cy(a: number, b: Rect, c: Thickness): Rect;
    protected as(a: List$1<Rect>, b: List$1<number>, c: Thickness): boolean;
    protected a4(a: List$1<Rect>): List$1<number>;
    bp(a: number, b: Size): number;
    bo(a: number, b: Size): number;
    bt(): number;
    br(): number;
    bs(): number;
    bu(): number;
    c6(a: Size): Size;
    protected get am(): boolean;
    c0(): Rect;
    protected b5(a: Size): void;
    protected b4(a: Size): void;
    protected b9(): void;
    protected a2(): IEnumerable$1<number>;
    get ah(): AxisLabelsLocation;
    cs(a: GeometryCollection, b: number, c: number, d: number, e: Rect, f: PathRenderingInfo): void;
    cc(a: GeometryCollection, b: number, c: number, d: number, e: Rect, f: PathRenderingInfo): void;
    cm(a: FrameworkElement, b: number): void;
    protected get_au(): boolean;
    get au(): boolean;
    ac(a: Rect, b: number): Point[];
    cz(a: Rect, b: number): Rect;
    cn(a: FrameworkElement): void;
    cb(a: FrameworkElement, b: number): void;
    c8(a: Size): Size;
    static readonly cu: DependencyProperty;
    get bh(): number;
    set bh(a: number);
    bd: number;
    aj(a: TitleSettings): AxisTitlePosition;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
    private _a0;
    a0(): IEnumerable$1<any>;
    b1(a: number, b: TextBlock, c: number, d: number, e: number): string;
    b7(a: any): void;
    cg(a: FrameworkElement): void;
    private _a1;
    a1(): IEnumerable$1<any>;
    protected be: number;
    protected bf: number;
    ca(): void;
    cr(): void;
    ce(): void;
    bi(a: Rect): number;
    c7: Size;
    ci(): void;
    cq(): void;
    cf(): void;
    cj(a: RenderingContext): void;
    b3(): void;
    ck(): void;
}
/**
 * @hidden
 */
export declare abstract class CategoryAxisBase extends Axis implements ICategoryScaler {
    static $t: Type;
    a3(): AxisView;
    protected get_cc(): boolean;
    hr(a: AxisView): void;
    km: CategoryAxisBaseView;
    protected ef(a: number, b: Rect, c: Rect, d: Rect): number;
    constructor();
    c7(a: Rect, b: Rect, c: AxisView): boolean;
    l0(): void;
    lz(): void;
    kx: List$1<number>;
    protected get_ca(): boolean;
    md(a: Point, b: boolean, c: number): Rect;
    me(a: Point, b: boolean, c: number, d: boolean): Rect;
    kq: IFastItemsSource;
    private kp;
    get itemsSource(): IEnumerable;
    set itemsSource(a: IEnumerable);
    static readonly l8: DependencyProperty;
    private lc;
    le: number;
    get lf(): number;
    set lf(a: number);
    get categoryMode(): CategoryMode;
    set categoryMode(a: CategoryMode);
    private kn;
    k0: number;
    protected la(a: Rect, b: Rect, c: Rect): number;
    k7: number;
    kz: number;
    k8: number;
    k9: number;
    ku: boolean;
    get lg(): number;
    set lg(a: number);
    private ld;
    el(a: number, b: ScalerParams): number;
    getUnscaledValue3(a: number, b: Rect, c: Rect, d: CategoryMode): number;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    k3(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    lb(a: number): number;
    private _kw;
    private kw;
    private ks;
    kt(a: SeriesViewer): boolean;
    private _kv;
    private kv;
    private kr;
    l4(a: boolean): void;
    protected hv(a: any, b: string, c: any, d: any): void;
    protected ls(): void;
    lu(a: any, b: FastItemsSourceEventArgs): void;
    protected l1(a: FastItemsSourceEventArgs): void;
    private l5;
    cs(a: Series): boolean;
    bz(a: Series): boolean;
    private l2;
    lr(): void;
    l3(): void;
    lt(a: NotifyCollectionChangedEventArgs): void;
    ly(a: number, b: any, c: any): void;
    lv(): void;
    lw(a: number, b: any): void;
    lx(a: number, b: any): void;
    k4(a: Rect, b: Rect, c: Rect, d: number): number;
    k5(a: Rect, b: Rect, c: Rect, d: number, e: number): number;
    getSeriesOffset(a: Rect, b: Rect, c: Rect, d: number, e: number): number;
    get isVertical(): boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$a(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class HorizontalAxisLabelPanelBase extends AxisLabelPanelBase {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    c9: HorizontalAxisLabelPanelBaseView;
    dl: number;
    di: number;
    dk: number;
    dj: number;
    b6(): void;
    db(): boolean;
    dc(): boolean;
    aq(): boolean;
    a5(): List$1<Rect>;
    dn(a: List$1<Rect>, b: List$1<boolean>, c: number): void;
    private dm;
    private dp;
    protected dq(a: List$1<Rect>, b: List$1<boolean>): void;
    protected dr(): void;
    protected get_au(): boolean;
    cm(a: FrameworkElement, b: number): void;
    protected dd(): boolean;
    protected da(): boolean;
    protected by(a: number, b: List$1<Rect>, c: List$1<boolean>): {
        ret: number;
        p1?: List$1<Rect>;
    };
    c0(): Rect;
    dh(): number;
    de(): number;
    dg(): number;
    df(): number;
    protected b9(): void;
    a6(a: List$1<Rect>): List$1<Rect>;
}
/**
 * @hidden
 */
export declare class HorizontalAxisLabelPanel extends HorizontalAxisLabelPanelBase {
    static $t: Type;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
}
/**
 * @hidden
 */
export declare abstract class NumericAxisBase extends Axis {
    static $t: Type;
    a3(): AxisView;
    hr(a: AxisView): void;
    d0(a: number, b: ScalerParams): number;
    kv: NumericAxisBaseView;
    protected get_ci(): boolean;
    constructor();
    get ks(): AxisRangeBufferMode;
    set ks(a: AxisRangeBufferMode);
    private kr;
    get kt(): AxisRangeBufferMode;
    set kt(a: AxisRangeBufferMode);
    static readonly nc: DependencyProperty;
    l3: number;
    get lv(): number;
    set lv(a: number);
    private ln;
    l1: number;
    f1(): any;
    get ly(): number;
    set ly(a: number);
    private lq;
    l2: number;
    get lu(): number;
    set lu(a: number);
    private lm;
    f0(): any;
    l0: number;
    private lp;
    get lx(): number;
    set lx(a: number);
    lz: number;
    private ll;
    get lt(): number;
    set lt(a: number);
    eu(): number;
    l4: number;
    private lo;
    get lw(): number;
    set lw(a: number);
    l5: number;
    lg: boolean;
    private k6;
    get k9(): boolean;
    set k9(a: boolean);
    lb: boolean;
    private k7;
    get la(): boolean;
    set la(a: boolean);
    get lh(): boolean;
    l7: number;
    l8: number;
    ky: NumericAxisRenderer;
    protected li: boolean;
    protected lj: boolean;
    protected h8(a: boolean): void;
    h0(a: any): void;
    hz(a: any): void;
    kn: BindingFormatter;
    protected hv(a: any, b: string, c: any, d: any): void;
    protected mz(): void;
    kp: AxisRange;
    kq(): AxisRange;
    ls: number;
    lr: number;
    private lk;
    private ku;
    mw(a: NumericAxisBase, b: number, c: number, d: boolean, e: number, f: number, g: number): {
        p5: number;
        p6: number;
    };
    c2(): boolean;
    private mx;
    m0(a: AxisRangeChangedEventArgs): void;
    cs(a: Series): boolean;
    bz(a: Series): boolean;
    kx(a: AxisLabelManager): NumericAxisRenderer;
    kw(): NumericAxisRenderer;
    ko: (item: any) => string;
    l9: string;
    km: any[];
    lf: boolean;
    k0(): NumericAxisRenderingParameters;
    my(): void;
    k1(): NumericScaler;
    kz(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    l6(a: number): number;
    lc(): boolean;
    get le(): boolean;
    get ld(): boolean;
    private m1;
    static readonly ne: DependencyProperty;
    get k4(): TickmarkValues;
    set k4(a: TickmarkValues);
    private k2;
    get k3(): TickmarkValues;
    set k3(a: TickmarkValues);
    private k5;
    get k8(): boolean;
    set k8(a: boolean);
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class NumericScaler extends DependencyObject {
    static $t: Type;
    static readonly ac: Rect;
    abstract t(a: NumericAxisBase, b: number, c: number, d: number, e: number): {
        p3: number;
        p4: number;
    };
    l: number;
    k: number;
    protected o: number;
    protected n: number;
    y(a: number): void;
    x(a: number): void;
    protected w(a: string, b: any, c: any): void;
    private z;
    protected m: number;
    abstract q(a: number, b: ScalerParams): number;
    abstract p(a: number, b: ScalerParams): number;
    j(a: IList$1<number>, b: number, c: number, d: ScalerParams): IList$1<number>;
    v(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    u(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AxisRendererBase extends Base {
    static $t: Type;
    constructor(a: AxisLabelManager);
    u: () => void;
    o: (viewportRect: Rect, windowRect: Rect) => boolean;
    v: () => void;
    m: (p: AxisRenderingParametersBase, value: number) => number;
    l: (p: AxisRenderingParametersBase, geometry: GeometryCollection, startValue: number, endValue: number) => void;
    k: (p: AxisRenderingParametersBase, geometry: GeometryCollection, value: number) => void;
    q: (p: AxisRenderingParametersBase, value: number) => boolean;
    n: (p: AxisRenderingParametersBase, value: number) => boolean;
    j: (p: AxisRenderingParametersBase) => void;
    e: (p: AxisRenderingParametersBase) => void;
    p: (p: AxisRenderingParametersBase, position: number, isLastLabel: boolean) => boolean;
    h: (p: AxisRenderingParametersBase, value: number) => LabelPosition;
    t: (p: AxisRenderingParametersBase, value: number) => number;
    b: AxisLabelManager;
    g: (item: any, fromAbbreviator: boolean) => any;
    d: (viewportRect: Rect, windowRect: Rect, effectiveViewportRect: Rect, contentViewport: Rect) => AxisRenderingParametersBase;
    r: (p: AxisRenderingParametersBase, value: number, absoluteIndex: number, interval: number) => number;
    a: (p: AxisRenderingParametersBase, value: number, absolueIndex: number, interval: number) => number;
    f: (index: number, window: Rect, viewport: Rect, effectiveViewport: Rect) => number;
    i: (index: number) => number;
    c(a: boolean, b: Rect, c: Rect, d: Rect, e: Rect): AxisRenderingParametersBase;
    private aa;
    private ab;
    protected x(a: Rect, b: Rect): void;
    private z;
    private s;
    private y;
    w(a: AxisRenderingParametersBase, b: number, c: number, d: number): any;
}
/**
 * @hidden
 */
export declare class NumericAxisRenderer extends AxisRendererBase {
    static $t: Type;
    constructor(a: AxisLabelManager);
    w(a: AxisRenderingParametersBase, b: number, c: number, d: number): any;
    private ac;
    private ad;
    private ae;
}
/**
 * @hidden
 */
export declare class VerticalAxisLabelPanel extends AxisLabelPanelBase {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    c9: VerticalAxisLabelPanelView;
    di: number;
    df: number;
    dh: number;
    dg: number;
    b6(): void;
    bq(): number;
    db(): number;
    dd(): number;
    de(): number;
    dc(): number;
    a5(): List$1<Rect>;
    private dj;
    private dk;
    cm(a: FrameworkElement, b: number): void;
    protected da(): boolean;
    c0(): Rect;
    aj(a: TitleSettings): AxisTitlePosition;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
    protected b9(): void;
}
/**
 * @hidden
 */
export interface IHasCategoryAxis {
    readonly categoryAxis: CategoryAxisBase;
    getOffsetValue(): number;
    getCategoryWidth(): number;
}
/**
 * @hidden
 */
export declare let IHasCategoryAxis_$type: Type;
/**
 * @hidden
 */
export interface IHasCategoryModePreference extends IHasCategoryAxis {
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
}
/**
 * @hidden
 */
export declare let IHasCategoryModePreference_$type: Type;
/**
 * @hidden
 */
export interface ISeriesViewerScrollbarManager {
    executionContext: IExecutionContext;
    animator: DoubleAnimator;
    owner: SeriesViewer;
    onHorizontalScrollbarModeChanged(a: SeriesViewerScrollbarMode): void;
    onVerticalScrollbarModeChanged(a: SeriesViewerScrollbarMode): void;
    updateScrollbars(a: SeriesViewer, b: Rect, c: Rect, d: Rect, e: Rect): void;
    updateBarDimensions(a: SeriesViewer, b: number, c: number, d: number, e: boolean, f: number, g: number, h: number, i: number, j: number, k: boolean, l: number, m: number): void;
    updateBarAppearance(a: SeriesViewer, b: Brush, c: Brush, d: Brush, e: Brush, f: number, g: number, h: number, i: number): void;
    onCrosshairMoved(a: Point): void;
    shouldHandleInteraction(a: Point, b: boolean): boolean;
    onScrollbarDrag(a: Point, b: boolean): void;
    onScrollbarDragComplete(a: Point, b: boolean): void;
    onScrollbarDragCancel(): void;
    updateVerticalScrollbarPosition(a: SeriesViewerVerticalScrollbarPosition): void;
    updateHorizontalScrollbarPosition(a: SeriesViewerHorizontalScrollbarPosition): void;
}
/**
 * @hidden
 */
export declare let ISeriesViewerScrollbarManager_$type: Type;
/**
 * @hidden
 */
export interface IHighlightingManager {
    startHighlight(a: HighlightingInfo): void;
    endHighlight(a: HighlightingInfo): void;
    clear(): void;
    getHighlightingInfo(a: Series, b: IFastItemsSource, c: number, d: number, e: boolean): HighlightingInfo;
    tick(a: number): boolean;
    inProgress: boolean;
    maxHighlightingProgress: number;
    totalHighlightingProgress: number;
    sumHighlightingProgress: number;
    maxMarkerHighlightingProgress: number;
    sumMarkerHighlightingProgress: number;
    readonly dirtySeries: List$1<Series>;
    readonly allDirty: boolean;
    isCrossSeriesHighlight(a: Series): boolean;
    executionContext: IExecutionContext;
    ensureAnimator: () => void;
    highlightingBehavior: SeriesHighlightingBehavior;
}
/**
 * @hidden
 */
export declare let IHighlightingManager_$type: Type;
/**
 * @hidden
 */
export declare class HighlightingInfo extends Base {
    static $t: Type;
    constructor();
    i: number;
    h: number;
    g: number;
    a: HighlightingState;
    f: number;
    e: boolean;
    d: boolean;
    c: boolean;
    b: Series;
}
/**
 * @hidden
 */
export interface ISeriesInteractionManager {
    a$j(a: Series, b: Point, c: number, d: Axis, e: ScalerParams, f: number, g: number, h: (arg1: Point) => number): number;
    a$m(a: Series, b: IList$1<number>, c: Point, d: Axis, e: ScalerParams, f: number, g: (arg1: Point) => number, h: boolean, i: boolean): number;
    a$l(a: Series, b: number, c: IList$1<number>, d: number, e: number, f: number, g: number, h: number, i: boolean): number;
    a$o(a: Series, b: Point, c: boolean, d: Axis, e: (arg1: Point) => number, f: IList$1<number>): number;
    a$d(a: Series, b: Point, c: boolean): boolean;
    a$a(a: Series, b: CategoryAxisBase, c: List$1<number[]>, d: number, e: number, f: Point, g: boolean): number[][];
    a$e(a: Series, b: Point, c: boolean, d: PathGeometry): boolean;
    a$f(a: Series, b: Point, c: PathGeometry): boolean;
    a$n(a: Series, b: Point, c: boolean, d: Axis, e: (arg1: Point) => number, f: IList$1<number>): number;
    a$k(a: Series, b: Point, c: Axis): number;
    a$g(a: Series, b: Point, c: boolean): boolean;
    a$al(a: Series, b: Point, c: boolean, d: boolean, e: number, f: Axis, g: Axis, h: (arg1: Point, arg2: boolean, arg3: boolean) => number, i: (arg1: Point, arg2: boolean) => number, j: (arg1: Point, arg2: boolean) => number): Point;
    a$v(a: Series, b: any, c: Point, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean): void;
    a$s(): void;
    a$ak(a: Series, b: HighlightingInfo, c: Brush): Brush;
    a$i(a: Series, b: HighlightingInfo, c: number, d: number, e: number, f: number, g: boolean): number;
    a$y(a: Series, b: Point, c: any, d: any, e: boolean): void;
    a$ai(a: Series, b: Point): void;
    a$ab(a: Series, b: Point, c: any, d: any, e: boolean): void;
    a$z(a: Series, b: Point, c: any, d: any, e: boolean): void;
    a$w(a: Series, b: Point, c: any, d: any): void;
    a$aa(a: Series, b: Point, c: any, d: any): void;
    a$x(a: Series, b: Point, c: any, d: any): void;
    a$ac(a: Series, b: Point, c: any, d: any): void;
    a$ad(a: Series, b: Point, c: any, d: any): void;
    a$q(a: Series): string;
    a$r(a: Series): string;
    readonly a$b: boolean;
    readonly a$p: any;
    a$aj(a: Series, b: any): void;
    a$ah(a: Series, b: Point, c: (arg1: any) => void): void;
    a$u(a: Series): void;
    a$ag(a: Series): void;
    readonly a$c: boolean;
    readonly a$h: Dictionary$2<string, SeriesView>;
    a$t(a: Series, b: Rect, c: Rect, d: string, e: number): void;
    a$ae(a: Series, b: SeriesViewer): void;
    a$af(a: Series, b: string, c: SeriesViewer): void;
}
/**
 * @hidden
 */
export declare let ISeriesInteractionManager_$type: Type;
/**
 * @hidden
 */
export interface ISeriesViewerInteractionManager {
    f$a(a: SeriesViewer): ChartHitTestMode;
    f$ag(a: SeriesViewer): void;
    f$q(a: SeriesViewer, b: Point): void;
    f$ae(a: SeriesViewer, b: Point): void;
    f$r(a: SeriesViewer, b: Point, c: boolean): void;
    f$p(a: SeriesViewer, b: Point): void;
    f$al(a: SeriesViewer): void;
    f$ad(a: SeriesViewer, b: Point): void;
    f$am(a: SeriesViewer, b: Point, c: number, d: number, e: number): void;
    f$ac(a: SeriesViewer, b: number): void;
    f$ai(a: SeriesViewer, b: Point, c: number, d: number, e: number): void;
    f$z(a: SeriesViewer, b: Point): void;
    f$ab(a: SeriesViewer, b: number): void;
    f$s(a: SeriesViewer, b: Point): void;
    f$y(a: SeriesViewer, b: Point): void;
    f$ah(a: SeriesViewer, b: Point, c: number, d: number, e: number): void;
    f$n(a: SeriesViewer, b: Point, c: boolean): void;
    f$ak(a: SeriesViewer): void;
    f$aj(a: SeriesViewer): void;
    f$ap(a: SeriesViewer): void;
    f$k(a: SeriesViewer): void;
    f$h(a: SeriesViewer): void;
    f$m(a: SeriesViewer, b: Point, c: boolean): void;
    f$l(a: SeriesViewer, b: Point, c: boolean, d: boolean): void;
    f$an(a: SeriesViewer): void;
    f$af(a: SeriesViewer): void;
    f$e(a: SeriesViewer, b: Key): boolean;
    f$f(a: SeriesViewer, b: Point, c: number): boolean;
    f$o(a: SeriesViewer, b: Point): void;
    f$j(a: SeriesViewer): void;
    f$i(a: SeriesViewer): void;
    readonly f$b: IHighlightingManager;
    readonly f$c: ISeriesViewerScrollbarManager;
    f$ao(a: SeriesViewer, b: Point): void;
    f$d(a: SeriesViewer, b: SeriesCollection, c: RenderingContext, d: Point, e: boolean, f: DataContext, g: boolean): {
        ret: Series;
        p5: DataContext;
    };
    f$g(a: SeriesViewer, b: Point): boolean;
    f$w(a: SeriesViewer, b: SeriesCollection, c: RenderingContext, d: Point, e: boolean, f: boolean): void;
    f$v(a: SeriesViewer, b: Point): void;
    f$u(a: SeriesViewer, b: EventProxy, c: Point): void;
    f$x(a: SeriesViewer, b: EventProxy, c: Point): void;
    f$t(a: SeriesViewer, b: Point, c: boolean): void;
    f$aa(a: SeriesViewer, b: boolean): void;
}
/**
 * @hidden
 */
export declare let ISeriesViewerInteractionManager_$type: Type;
/**
 * @hidden
 */
export interface IDataChartVisualDataManager {
    exportVisualData(a: XamDataChart): any;
}
/**
 * @hidden
 */
export declare let IDataChartVisualDataManager_$type: Type;
/**
 * @hidden
 */
export interface IAxisVisualDataManager {
    exportVisualData(a: Axis): any;
}
/**
 * @hidden
 */
export declare let IAxisVisualDataManager_$type: Type;
/**
 * @hidden
 */
export interface ISeriesVisualDataManager {
    exportVisualData(a: Series, b: Rect): any;
    exportMarkerVisualData(a: MarkerSeries, b: any): void;
    getMarkerVisualData(a: Series, b: Marker, c: DataTemplate): any;
    copyVisualData(a: any, b: any): void;
    exportTrendlineData(a: Series, b: any, c: Polyline): void;
    exportStackedVisualData(a: Series, b: Rect): any;
    createFragmentVisualData(a: Series, b: Rect, c: string, d: string): any;
    addSubSeriesVisualData(a: any, b: any): void;
    exportRectangleData(a: any, b: Rectangle, c: string, d: string[]): void;
    exportMarkerVisualDataFromMarker(a: Series, b: any, c: ContentControl): void;
    exportPathData(a: any, b: Path, c: string, d: string[]): void;
    exportPolylineData(a: any, b: Polyline, c: string, d: string[]): void;
    exportPolygonData(a: any, b: Polygon, c: string, d: string[]): void;
    exportSeriesPixelsData(a: any, b: number[], c: number, d: number): void;
    addPointerTooltipData(a: any, b: any, c: number, d: number, e: List$1<string>): void;
    addPointerTooltipWithDataLegend(a: any, b: any, c: number, d: number, e: any): void;
    exportPointerTooltipData(a: Polygon, b: Polyline, c: Rectangle, d: Rect): any;
    exportCalloutData(a: number, b: number, c: number, d: number, e: any, f: Rectangle, g: TextBlock, h: FontInfo, i: Line, j: string, k: string[]): void;
}
/**
 * @hidden
 */
export declare let ISeriesVisualDataManager_$type: Type;
/**
 * @hidden
 */
export declare class XamDataChart extends SeriesViewer {
    static $t: Type;
    static up: number;
    static uo: number;
    private _xsr;
    private get XSRP();
    private s7;
    get s8(): IDataChartVisualDataManager;
    static staticInit(): void;
    static u1(a: Series): number;
    constructor();
    protected nh(a: any, b: string, c: any, d: any): void;
    nx(): void;
    l8(): void;
    protected lz(a: Rect, b: Rect): void;
    protected l3(): void;
    v8(): void;
    private v3;
    private w3;
    private wa;
    private td;
    private tc;
    private ta;
    private s9;
    private w4;
    private w5;
    protected get_d0(): boolean;
    ts: boolean;
    ga(): number;
    gb(): number;
    protected og(): void;
    uz: number;
    u0: number;
    private t8;
    get uk(): number;
    set uk(a: number);
    private t9;
    get ul(): number;
    set ul(a: number);
    em(): boolean;
    en(): boolean;
    tp: boolean;
    t2: boolean;
    tq: boolean;
    tt: boolean;
    s6: GridMode;
    tm: boolean;
    tx: boolean;
    ty: boolean;
    ur: number;
    un: number;
    um: number;
    get tk(): boolean;
    protected get_ev(): boolean;
    get tl(): boolean;
    t0: boolean;
    tw: boolean;
    tz: boolean;
    t1: boolean;
    s1: AutoMarginsAndAngleUpdateMode;
    tr: boolean;
    tv: boolean;
    tu: boolean;
    private ua;
    private ub;
    private us;
    private ut;
    protected get_eu(): boolean;
    protected get_et(): boolean;
    v7(): void;
    v6(): void;
    v5(a: AxisLabelPanelBase, b: Rect, c: Rect, d: Rect): void;
    private uy;
    private uq;
    private v2;
    w2: Brush;
    w0: Brush;
    w1: Brush;
    get axes(): AxisCollection;
    private s2;
    private vz;
    private v0;
    axisRangeChanged: (sender: any, e: ChartAxisRangeChangedEventArgs) => void;
    private v1;
    private static v4;
    oq(a: SyncLink, b: SyncLink): void;
    private tg;
    getFontInfo(): FontInfo;
    v9(): void;
    getFontBrush(): Brush;
    protected k6(): void;
    rk(): Brush;
    e2(): boolean;
    protected ok(): void;
    dz(): boolean;
    private to;
    protected cp(): SeriesViewerView;
    protected m5(a: SeriesViewerView): void;
    tf: XamDataChartView;
    ny(): void;
    private tj;
    static u4: string;
    private t5;
    get uh(): number;
    set uh(a: number);
    static u6: string;
    private t7;
    get uj(): number;
    set uj(a: number);
    static u5: string;
    private t6;
    get ui(): number;
    set ui(a: number);
    static u3: string;
    private t4;
    get ug(): number;
    set ug(a: number);
    s4: ComputedPlotAreaMarginMode;
    tb: SeriesPlotAreaMarginHorizontalMode;
    te: SeriesPlotAreaMarginVerticalMode;
    private ud;
    get uv(): number;
    set uv(a: number);
    private uf;
    get ux(): number;
    set ux(a: number);
    private ue;
    get uw(): number;
    set uw(a: number);
    private uc;
    get uu(): number;
    set uu(a: number);
    protected sh(a: Rect): Rect;
    sn(): Rect;
    u2(): any;
    vh(): string;
    ne(): void;
    n0(): void;
    t3(a: Axis): List$1<Axis>;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class LabelPanelArranger extends Base {
    static $t: Type;
    static e(a: List$1<AxisLabelPanelBase>, b: Rect): Rect;
    private static a;
    static b(a: AxisLabelPanelBase): AxisLabelsLocation;
    private static c;
    static d(a: List$1<AxisLabelPanelBase>, b: LabelPanelsArrangeState, c: Rect, d: (arg1: AxisLabelPanelBase, arg2: Rect) => void): void;
}
/**
 * @hidden
 */
export declare class ChartContentManager extends DependencyObject {
    static $t: Type;
    private l;
    private r;
    private t;
    private get u();
    private set u(value);
    constructor(a: SeriesViewer);
    k(a: ChartContentType, b: DependencyObject, c: (arg1: boolean) => void): ContentInfo;
    ad(a: ChartContentType, b: DependencyObject): void;
    private m;
    private v;
    aa(a: DomRenderer): void;
    z(): void;
    ac(a: ChartContentType, b: DependencyObject, c: ContentInfo, d: boolean): void;
    private q;
    private j;
    y(): void;
    private w;
    private _s;
    private s;
    x(a: Size): void;
    o: boolean;
    n: boolean;
    p: boolean;
    ae(a: ChartContentType, b: DependencyObject, c: ContentInfo, d: Rect): void;
    ab(a: Axis, b: ContentInfo): void;
}
/**
 * @hidden
 */
export declare class ContentInfo extends Base {
    static $t: Type;
    h: DependencyObject;
    a: (arg1: boolean) => void;
    b: boolean;
    c: boolean;
    i: Rect;
    get d(): boolean;
    g(): void;
    f(): void;
    e: boolean;
}
/**
 * @hidden
 */
export declare abstract class Series extends Control implements INotifyPropertyChanged, IProvidesViewport, ILegendSeries, ILegendSeriesInternal, ILegendOwner, ILegendTemplateProvider, IDataLegendSeries {
    static $t: Type;
    b0: SeriesView;
    private static ha;
    ho: number;
    pp: Rect;
    protected get_dataLegendKey(): string;
    get dataLegendKey(): string;
    private g8;
    get g9(): DomRenderer;
    set g9(a: DomRenderer);
    provideRenderer(a: DomRenderer): void;
    jr(): string;
    constructor();
    mz(a: MarkerOutlineMode): void;
    my(a: MarkerFillMode): void;
    m0(a: number): void;
    private static readonly os;
    protected kp(a: any, b: PropertyChangedEventArgs): void;
    private cm;
    get cn(): SRProvider;
    private a7;
    get a8(): ISeriesVisualDataManager;
    protected get fc(): Dictionary$2<string, SeriesView>;
    private a5;
    get a6(): ISeriesInteractionManager;
    get dz(): boolean;
    ce: DoubleAnimator;
    ly(a: SeriesView): void;
    lw(): void;
    lx(): void;
    by(): SeriesView;
    protected bx(): SeriesView;
    m9: Canvas;
    e6(): boolean;
    hw(a: any, b: string): any;
    onLegendItemOver(a: any): void;
    onLegendItemPointerUp(a: any): void;
    onLegendItemPointerDown(a: any): void;
    onLegendItemEnter(a: any): void;
    onLegendItemLeave(a: any): void;
    private fb;
    protected jq(a: string): string;
    private fa;
    protected hx(a: any, b: string, c: string): any;
    f5(a: Point): number;
    hf(a: Point): number;
    protected get_d9(): boolean;
    get d9(): boolean;
    ar(): CategoryAxisBase;
    hd(a: Point): number;
    pz(): Thickness;
    p1(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    p0(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    bv(): SeriesPlotAreaMarginHorizontalMode;
    bw(): SeriesPlotAreaMarginVerticalMode;
    ht(a: Point): any;
    protected hy(a: Series, b: Point): any;
    protected ay(a: Series, b: any, c: Point, d: boolean): HighlightingInfo;
    protected az(a: Series, b: any, c: Point, d: boolean): HighlightingInfo;
    hc(): number;
    hg(): number;
    hl(): number;
    get container(): ILegendOwner;
    get hasSubItems(): boolean;
    protected c3(): boolean;
    forSubItems(a: (arg1: any) => void): void;
    protected k9(a: (arg1: any) => void): void;
    la(a: (arg1: Series) => boolean): void;
    jp(): string;
    o8(): Brush;
    o9(): Brush;
    resolveLegendIndex(): number;
    bf(): Series;
    protected get_dc(): boolean;
    get dc(): boolean;
    protected get_c9(): boolean;
    get c9(): boolean;
    protected get_c8(): boolean;
    get c8(): boolean;
    protected get_db(): boolean;
    get db(): boolean;
    protected get_da(): boolean;
    get da(): boolean;
    protected get_isVertical(): boolean;
    get isVertical(): boolean;
    protected get_du(): boolean;
    get du(): boolean;
    protected get_de(): boolean;
    get de(): boolean;
    protected get_dd(): boolean;
    get dd(): boolean;
    protected get_c6(): boolean;
    get c6(): boolean;
    protected get_ej(): boolean;
    get ej(): boolean;
    protected get_d1(): boolean;
    get d1(): boolean;
    protected get_d0(): boolean;
    get d0(): boolean;
    protected get_eg(): boolean;
    get eg(): boolean;
    protected get_dh(): boolean;
    get dh(): boolean;
    protected get_df(): boolean;
    get df(): boolean;
    protected get_ek(): boolean;
    get ek(): boolean;
    protected get_d8(): boolean;
    get d8(): boolean;
    protected get_d7(): boolean;
    get d7(): boolean;
    protected get_d5(): boolean;
    get d5(): boolean;
    protected get_d4(): boolean;
    get d4(): boolean;
    protected get_ei(): boolean;
    get ei(): boolean;
    protected get_eh(): boolean;
    get eh(): boolean;
    protected get_ee(): boolean;
    get ee(): boolean;
    protected get_d6(): boolean;
    get d6(): boolean;
    protected get_ec(): boolean;
    get ec(): boolean;
    protected get_ea(): boolean;
    get ea(): boolean;
    protected get_isStacked(): boolean;
    get isStacked(): boolean;
    protected get_dp(): boolean;
    get dp(): boolean;
    protected get_eb(): boolean;
    get eb(): boolean;
    protected get_dg(): boolean;
    get dg(): boolean;
    protected get_dv(): boolean;
    get dv(): boolean;
    protected get_ed(): boolean;
    get ed(): boolean;
    protected get_isValueOverlay(): boolean;
    get isValueOverlay(): boolean;
    be(): Series;
    protected get_c4(): boolean;
    get c4(): boolean;
    protected get_ds(): boolean;
    get ds(): boolean;
    protected get_dr(): boolean;
    get dr(): boolean;
    protected get_dq(): boolean;
    get dq(): boolean;
    protected get_dt(): boolean;
    get dt(): boolean;
    protected get_dj(): boolean;
    get dj(): boolean;
    protected get_dk(): boolean;
    get dk(): boolean;
    f3(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    protected f4(a: Point, b: number, c: Axis, d: ScalerParams, e: number, f: number, g: (arg1: Point) => number): number;
    protected get_e8(): boolean;
    get e8(): boolean;
    protected gl(a: IList$1<number>, b: Point, c: Axis, d: ScalerParams, e: number, f: (arg1: Point) => number, g: boolean, h: boolean): number;
    f9(a: number, b: IList$1<number>, c: number, d: number, e: number, f: number, g: number, h: boolean): number;
    hk(a: Point, b: boolean, c: Axis, d: (arg1: Point) => number, e: IList$1<number>): number;
    f8(a: boolean): number;
    ah(a: Point): Point[][];
    ai(a: Point): Point[][];
    protected eu(a: Point, b: boolean): boolean;
    aj(a: CategoryAxisBase, b: List$1<number[]>, c: number, d: number, e: Point, f: boolean): number[][];
    protected ew(a: Point, b: boolean, c: PathGeometry): boolean;
    protected ex(a: Point, b: PathGeometry): boolean;
    hi(a: Point, b: boolean, c: Axis, d: (arg1: Point) => number, e: IList$1<number>): number;
    f7(a: Point, b: Axis): number;
    hj(a: Point, b: boolean): number;
    hh(a: Point, b: boolean): number;
    gj(a: Point, b: boolean, c: boolean): number;
    pl(a: Point, b: boolean, c: boolean): Point;
    pu(a: Point): Rect;
    ak(a: Point): Rect[];
    pv(a: Point): Rect;
    al(a: Point): Rect[];
    pw(a: Point): Rect;
    px(a: Point): Rect;
    protected ey(a: Point, b: boolean): boolean;
    protected pn(a: Point, b: boolean, c: boolean, d: number, e: Axis, f: Axis, g: (arg1: Point, arg2: boolean, arg3: boolean) => number, h: (arg1: Point, arg2: boolean) => number, i: (arg1: Point, arg2: boolean) => number): Point;
    gf(a: Point, b: boolean, c: boolean): number;
    ph(a: Point, b: boolean, c: boolean): Point;
    gh(a: Point, b: boolean, c: boolean): number;
    pj(a: Point, b: boolean, c: boolean): Point;
    pm(a: Point, b: boolean, c: boolean): Point;
    gk(a: Point, b: boolean, c: boolean): number;
    pi(a: Point, b: boolean, c: boolean): Point;
    gg(a: Point, b: boolean, c: boolean): number;
    pk(a: Point, b: boolean, c: boolean): Point;
    gi(a: Point, b: boolean, c: boolean): number;
    he(a: Point): number;
    ga(): number;
    f6(a: Point): number;
    hu(a: Point): any;
    c1(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    go(a: Marker): number;
    i0(): string;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected raisePropertyChanged(a: string, b: any, c: any): void;
    protected get_hasMarkers(): boolean;
    get hasMarkers(): boolean;
    ld(): void;
    o5(): Brush;
    o6(): Brush;
    nd(): DataTemplate;
    f2(): number;
    po(a: Point): Point;
    pg(a: Point): Point;
    hz(a: any, b: Point): any;
    en(a: any): boolean;
    ap(a: Axis): AxisRange;
    aq(a: Rect): AxisRange;
    ao(a: AxisRange, b: NumericAxisBase, c: Rect): AxisRange;
    protected k6(): void;
    mh(a: boolean): void;
    renderRequested: (sender: any, e: RenderRequestedEventArgs) => void;
    private k3;
    mi(a: boolean): void;
    protected e0: boolean;
    protected kt(): void;
    protected ky(): void;
    bz: SeriesView;
    mj(a: Rect, b: RenderSurface): void;
    mg(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    getEffectiveViewport1(a: SeriesView): Rect;
    pq(a: SeriesView): Rect;
    pt(a: Rect): Rect;
    ps(a: SeriesView): Rect;
    getEffectiveViewport(): Rect;
    mb(): void;
    protected get_c2(): boolean;
    get c2(): boolean;
    protected get_c5(): boolean;
    get c5(): boolean;
    private mc;
    md(a: string): void;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    kx(a: boolean, b: SeriesView): void;
    protected cw(): boolean;
    cx(a: SeriesView): boolean;
    lz(a: Rect, b: Rect): void;
    protected m5(a: Rect, b: Rect): void;
    protected m4(a: Rect, b: Rect): void;
    as: ContentInfo;
    private cs;
    get ez(): boolean;
    set ez(a: boolean);
    protected k8(a: Series): void;
    protected lp(): void;
    lj(): void;
    lo(): void;
    protected get_dy(): boolean;
    get dy(): boolean;
    protected get_isUsableInLegend(): boolean;
    get isUsableInLegend(): boolean;
    protected lu(): void;
    lq(): void;
    protected l0(): void;
    l1(): void;
    protected es: boolean;
    protected et: boolean;
    protected em(): boolean;
    protected l2(a: boolean): void;
    private ct;
    protected get e1(): boolean;
    protected set e1(a: boolean);
    protected get e2(): boolean;
    protected v(): void;
    protected w(a: Visibility, b: Visibility): void;
    protected lt(): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    protected mu(): void;
    m2(a: Point): void;
    k5(): void;
    protected get_dx(): boolean;
    protected get dx(): boolean;
    cy: boolean;
    protected k2(a: Series): void;
    get b8(): SyncLink;
    set b8(a: SyncLink);
    private b7;
    get cd(): SeriesViewer;
    set cd(a: SeriesViewer);
    private cc;
    get cb(): XamDataChart;
    set cb(a: XamDataChart);
    readonly fg: (sender: any, e: NotifyCollectionChangedEventArgs) => void;
    readonly bd: (sender: any, e: PropertyUpdatedEventArgs) => void;
    readonly cl: (sender: any, e: RectChangedEventArgs) => void;
    get itemsSource(): IEnumerable;
    set itemsSource(a: IEnumerable);
    static readonly nz: DependencyProperty;
    ck: IFastItemsSource;
    g5: (sender: any, e: FastItemsSourceEventArgs) => void;
    protected k0(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    static readonly n5: DependencyProperty;
    get m8(): Control;
    set m8(a: Control);
    private m6;
    h0(): any;
    protected m7(): Control;
    get a1(): IChartLegend;
    set a1(a: IChartLegend);
    private a0;
    p2: Visibility;
    get legendItemBadgeTemplate(): DataTemplate;
    set legendItemBadgeTemplate(a: DataTemplate);
    static readonly n2: DependencyProperty;
    na: DataTemplate;
    private nc;
    o0: Brush;
    oz: Brush;
    b6: StandardLegendItems;
    b5: StandardLegendItems;
    legendItemBadgeShape: LegendItemBadgeShape;
    a9: LegendItemBadgeMode;
    get legendItemTemplate(): DataTemplate;
    set legendItemTemplate(a: DataTemplate);
    static readonly n3: DependencyProperty;
    get nb(): DataTemplate;
    set nb(a: DataTemplate);
    static readonly nq: DependencyProperty;
    get index(): number;
    set index(a: number);
    static readonly nu: DependencyProperty;
    m3(): void;
    k4(): void;
    protected mv(): void;
    cf: (time: number) => number;
    cg: (time: number) => number;
    c0: boolean;
    hm: number;
    g0: number;
    cv(): boolean;
    mq(): void;
    private cr;
    private fj;
    get ft(): number;
    set ft(a: number);
    protected gu(): number;
    gt: number;
    private fn;
    protected get fy(): number;
    protected set fy(a: number);
    g4: number;
    private fk;
    protected get fv(): number;
    protected set fv(a: number);
    g1: number;
    private fl;
    protected get fw(): number;
    protected set fw(a: number);
    g2: number;
    private fm;
    protected get fx(): number;
    protected set fx(a: number);
    g3: number;
    title: any;
    o2: Brush;
    oy: Brush;
    o3: Brush;
    o4: Brush;
    o7: Brush;
    o1: Brush;
    gr: number;
    gz: number;
    fu: number;
    f0: number;
    pc: PenLineCap;
    pb: DoubleCollection;
    toolTip: any;
    private bj;
    get bk(): SeriesHighlightingMode;
    set bk(a: SeriesHighlightingMode);
    protected bl(): SeriesHighlightingMode;
    protected ef(a: SeriesHighlightingMode): boolean;
    private fi;
    get fr(): number;
    set fr(a: number);
    gp: number;
    c7: boolean;
    di: boolean;
    dw: boolean;
    dm: boolean;
    protected get_dn(): boolean;
    get dn(): boolean;
    gw: number;
    pa: Color;
    e7: boolean;
    gx: number;
    gy: number;
    fz: number;
    fq: number;
    ms(): void;
    gq: number;
    fs: number;
    mt(): void;
    protected gv(): number;
    private cq;
    get dl(): boolean;
    set dl(a: boolean);
    er: boolean;
    private b1;
    get b2(): SeriesVisibleRangeMode;
    set b2(a: SeriesVisibleRangeMode);
    b3(): SeriesVisibleRangeMode;
    b4: SeriesVisibleRangeMode;
    private br;
    get bs(): SeriesOutlineMode;
    set bs(a: SeriesOutlineMode);
    bu(): SeriesOutlineMode;
    bt: SeriesOutlineMode;
    au(a: any): DataContext;
    hn: number;
    ca: TransitionInSpeedType;
    protected b9(): TransitionInSpeedType;
    hr: any;
    mf(): void;
    mk(): void;
    me(): void;
    ku(): void;
    le(): void;
    private static _fe;
    static fe(a: (arg1: number) => number, b: number, c: number): IEnumerable$1<number>;
    static fd(a: (arg1: number) => number, b: number): IEnumerable$1<number>;
    pe: PenLineCap;
    pd: PenLineCap;
    private bg;
    bh(): SeriesComponentsForView;
    ml(a: Canvas): void;
    gm(): number;
    gn(): number;
    private cu;
    protected get_e3(): boolean;
    protected set_e3(a: boolean): void;
    protected get e3(): boolean;
    protected set e3(a: boolean);
    get ep(): boolean;
    el: boolean;
    kv(): void;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    lv(a: Point, b: any, c: any, d: boolean): void;
    mp(a: Point): void;
    private kr;
    private kw;
    kq(a: IChartLegend, b: IChartLegend): void;
    private ks;
    ma(a: IFastItemsSourceProvider): void;
    l9(a: IFastItemsSourceProvider): void;
    protected a2(): IChartLegend;
    protected eq(): boolean;
    eo(a: boolean): boolean;
    protected k1(a: Axis): void;
    protected l8(a: Axis): void;
    bi(): SeriesComponentsFromView;
    mx(a: Canvas): void;
    mo(a: Point, b: (arg1: any) => void): void;
    protected get_e5(): boolean;
    get e5(): boolean;
    l4(a: RenderingContext, b: RenderingContext): void;
    l6(a: Rect): void;
    lc(a: NotifyCollectionChangedEventArgs): void;
    lm(a: number, b: any, c: any): void;
    li(): void;
    lk(a: number, b: any): void;
    ll(a: number, b: any): void;
    mr(): void;
    h2: any;
    g7: (arg1: any) => any;
    ev(a: Point, b: boolean): boolean;
    protected _coercionMethods: any;
    protected get_coercionMethods(): any;
    protected set_coercionMethods(a: any): void;
    get coercionMethods(): any;
    set coercionMethods(a: any);
    private cp;
    protected get_expectFunctions(): boolean;
    protected set_expectFunctions(a: boolean): void;
    get expectFunctions(): boolean;
    set expectFunctions(a: boolean);
    at(a: Point, b: boolean): DataContext;
    private bn;
    get bq(): SeriesHitTestMode;
    set bq(a: SeriesHitTestMode);
    protected bp(): SeriesHitTestMode;
    private bm;
    get bo(): SeriesHitTestMode;
    set bo(a: SeriesHitTestMode);
    protected ch(a: string): IFastItemColumn$1<number>;
    protected ci(a: string): IFastItemColumn$1<number>;
    protected cj(a: string): IFastItemColumn$1<any>;
    protected get py(): Rect;
    protected get_d3(): boolean;
    get d3(): boolean;
    protected get_d2(): boolean;
    get d2(): boolean;
    mn(a: boolean): void;
    mm(a: Brush, b: Brush): void;
    co: (arg1: SeriesViewer) => void;
    protected kz(a: any, b: any): void;
    hs(): any;
    protected k7(a: any): void;
    private pf;
    lg(a: Point): void;
    protected ls(a: Point): void;
    lh(): void;
    ln(): void;
    an(a: Axis): Axis;
    ag(): Axis[];
    gc(): number;
    static gd(a: IFastItemColumn$1<number>, b: ISortingAxis): number;
    static ge(a: IList$1<number>, b: ISortingAxis): number;
    lr(): void;
    private fo;
    get f1(): number;
    set f1(a: number);
    private fp;
    get gs(): number;
    set gs(a: number);
    protected m1(): void;
    hv(a: any): any;
    get ih(): string;
    get h5(): string;
    get h6(): string;
    get ie(): string;
    get io(): string;
    get im(): string;
    get ij(): string;
    protected mw(): void;
    am(): ActualLegendItemBadgeShape;
    protected ba(a: LegendItemBadgeShape): LegendItemBadgeShape;
    private bb;
    getDataLegendBadge(): DataTemplate;
    private a4;
    getDataLegendBadgeContext(): any;
    getDataLegendBadgeShapeAndMarker(): string;
    iy(): string;
    iz(a: Series, b: DataTemplate): string;
    getDataLegendSeriesTitle(): string;
    gb(a: any, b: string): number;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    av(): DataLegendSeriesGroup;
    getDataLegendAxisLabelFromCursorPosition(a: number, b: number): any;
    private lf;
    private fh;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class MarkerSeries extends Series {
    static $t: Type;
    qb: MarkerSeriesView;
    constructor();
    p0(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    ly(a: SeriesView): void;
    protected get_hasMarkers(): boolean;
    o5(): Brush;
    o6(): Brush;
    nd(): DataTemplate;
    iy(): string;
    qc: MarkerType;
    private p7;
    get p8(): MarkerOutlineMode;
    set p8(a: MarkerOutlineMode);
    qa(): MarkerOutlineMode;
    mz(a: MarkerOutlineMode): void;
    p9: MarkerOutlineMode;
    private p3;
    get p4(): MarkerFillMode;
    set p4(a: MarkerFillMode);
    p6(): MarkerFillMode;
    my(a: MarkerFillMode): void;
    m0(a: number): void;
    p5: MarkerFillMode;
    qy: DataTemplate;
    qh: number;
    f2(): number;
    qw: DataTemplate;
    qx: DataTemplate;
    private static qv;
    static get qz(): DataTemplate;
    get re(): Brush;
    set re(a: Brush);
    static readonly q3: DependencyProperty;
    rc: Brush;
    rf: Brush;
    rd: Brush;
    rg: Style;
    qg: boolean;
    qe(): boolean;
    protected lt(): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    static ql(a: MarkerType): string;
    static qd(a: Series, b: MarkerType): MarkerType;
    protected mv(): void;
    protected k7(a: any): void;
    protected qf(a: Point, b: boolean): boolean;
    at(a: Point, b: boolean): DataContext;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class SyncLink extends FrameworkElement implements INotifyPropertyChanged, IFastItemsSourceProvider {
    static $t: Type;
    constructor();
    ak: string;
    protected aq(a: any, b: string, c: any, d: any): void;
    releaseFastItemsSource(a: IEnumerable): IFastItemsSource;
    static aj: (arg1: IEnumerable) => IFastItemsSource;
    private static af;
    getFastItemsSource(a: IEnumerable): IFastItemsSource;
    ag(a: IEnumerable): IFastItemsSource;
    private ah;
    av: Rect;
    private aw;
    private ax;
    private ab;
    private ac;
    get ai(): IList$1<SeriesViewer>;
    private ad;
    al(a: SeriesViewer): void;
    as(a: SeriesViewer): void;
    private ao;
    private am;
    an(a: SeriesViewer, b: Point): void;
    ap(a: SeriesViewer, b: Rect): void;
    at(a: SeriesViewer, b: Rect): void;
    au(a: SeriesViewer, b: Rect, c: boolean): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected ar(a: string, b: any, c: any): void;
}
/**
 * @hidden
 */
export declare class SyncLinkManager extends Base {
    static $t: Type;
    private static b;
    static instance(): SyncLinkManager;
    private d;
    get e(): number;
    constructor();
    getLink(a: string): SyncLink;
    releaseLink(a: SyncLink): void;
}
/**
 * @hidden
 */
export declare class SyncManager extends Base {
    static $t: Type;
    static e(a: SeriesViewer): void;
    static c(a: SeriesViewer): void;
    static b(a: SeriesViewer, b: string, c: string): void;
    static d(a: DependencyObject, b: SyncSettings): void;
    static a(a: DependencyObject): SyncSettings;
}
/**
 * @hidden
 */
export declare class ChartCollection extends ObservableCollection$1<SeriesViewer> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class SeriesCollection extends ObservableCollection$1<Series> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class PlotAreaMouseEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Point, c: Point);
    private _chartPosition;
    get chartPosition(): Point;
    set chartPosition(a: Point);
    private _plotAreaPosition;
    get plotAreaPosition(): Point;
    set plotAreaPosition(a: Point);
    private _isDuringManipulation;
    get isDuringManipulation(): boolean;
    set isDuringManipulation(a: boolean);
    private _viewer;
    get viewer(): SeriesViewer;
    set viewer(a: SeriesViewer);
}
/**
 * @hidden
 */
export declare class PlotAreaMouseButtonEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Point, c: Point);
    private _chartPosition;
    get chartPosition(): Point;
    set chartPosition(a: Point);
    private _plotAreaPosition;
    get plotAreaPosition(): Point;
    set plotAreaPosition(a: Point);
    private _manipulationOccurred;
    get manipulationOccurred(): boolean;
    set manipulationOccurred(a: boolean);
    private _viewer;
    get viewer(): SeriesViewer;
    set viewer(a: SeriesViewer);
}
/**
 * @hidden
 */
export declare class ChartCursorEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Series, c: any);
    toString(): string;
    private _item;
    get item(): any;
    set item(a: any);
    private _series;
    get series(): Series;
    set series(a: Series);
    private _seriesViewer;
    get seriesViewer(): SeriesViewer;
    set seriesViewer(a: SeriesViewer);
    get chart(): XamDataChart;
}
/**
 * @hidden
 */
export declare class DataChartMouseButtonEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Series, c: any, d: MouseButtonEventArgs);
    toString(): string;
    protected g: MouseButtonEventArgs;
    get handled(): boolean;
    set handled(a: boolean);
    getPosition(a: UIElement): Point;
    get originalSource(): any;
    private _item;
    get item(): any;
    set item(a: any);
    private _series;
    get series(): Series;
    set series(a: Series);
    private _chart;
    get chart(): SeriesViewer;
    set chart(a: SeriesViewer);
}
/**
 * @hidden
 */
export declare class ChartMouseEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Series, c: any, d: MouseEventArgs);
    toString(): string;
    private f;
    getPosition(a: UIElement): Point;
    get originalSource(): any;
    private _item;
    get item(): any;
    set item(a: any);
    private _series;
    get series(): Series;
    set series(a: Series);
    private _chart;
    get chart(): SeriesViewer;
    set chart(a: SeriesViewer);
}
/**
 * @hidden
 */
export declare class AxisComponentsForView extends Base {
    static $t: Type;
    a: AxisLabelPanelBase;
}
/**
 * @hidden
 */
export declare class AxisLabelPanelBaseView extends Base {
    static $t: Type;
    protected a: AxisLabelPanelBase;
    aw: Path;
    constructor(a: AxisLabelPanelBase);
    aa(a: FrameworkElement, b: Rect, c: number, d: number, e: number, f: number): void;
    z(a: Rectangle, b: TextBlock, c: LabelPosition, d: Rect, e: number, f: number, g: number, h: number): void;
    ae(a: FrameworkElement): void;
    ah(a: any): void;
    ai(a: any, b: Size): void;
    aj(a: FrameworkElement, b: number): void;
    ar(a: Rectangle, b: TextBlock, c: LabelPosition, d: Rect, e: number, f: number, g: number, h: number, i: number): void;
    ad(a: Rectangle): void;
    x(a: TextBlock, b: number, c: number, d: number): string;
    af(): void;
    g(): IEnumerable$1<any>;
    l(a: any): number;
    n(a: any): number;
    an(): void;
    m(a: any): number;
    w(a: any): number;
    ax(a: any): Size;
    ac(): void;
    ak(): void;
    protected e: RenderingContext;
    f(): RenderingContext;
    al(a: RenderingContext): void;
    y(): void;
    protected am(): void;
    private av;
    protected ap(a: TextBlock): void;
    ao(): void;
    d(): FontInfo;
    at(): Brush;
    private c;
    ag(): void;
    private h;
    private as;
    private i;
    j(): number;
    k(): number;
    protected aq(): void;
    ab(a: Size): void;
    protected ay(): Thickness;
    v(): number;
    s(): number;
    t(): number;
    u(): number;
    au(): GeometryCollection;
    b(): PathRenderingInfo;
    r(): number;
    p(): number;
    q(): number;
    o(): number;
}
/**
 * @hidden
 */
export declare class AxisView extends Base implements ISchedulableRender {
    static $t: Type;
    protected a: Axis;
    constructor(a: Axis);
    aj(): void;
    al(a: any): void;
    ba: Path;
    bb: Path;
    bd: Path;
    bc: Path;
    a0(): TextBlock;
    at(a: TextBlock): void;
    av(a: TextBlock): void;
    au(a: TextBlock): void;
    bf(): Rectangle;
    s(a: Rectangle): void;
    u(a: Rectangle): void;
    t(a: Rectangle): void;
    am(): void;
    o(): boolean;
    get index(): number;
    ag(): void;
    ae(): void;
    aa(): void;
    ay(a: Visibility): void;
    aq(): void;
    z(a: AxisLabelSettings): void;
    private b;
    c(): AxisComponentsFromView;
    ac(a: GeometryCollection): void;
    a1(): GeometryCollection;
    e(): PathRenderingInfo;
    a4(): GeometryCollection;
    a2(): GeometryCollection;
    f(): PathRenderingInfo;
    a3(): GeometryCollection;
    g(): PathRenderingInfo;
    protected get d(): AxisLabelPanelBase;
    aw(a: Axis, b: Rect, c: Rect): void;
    ab(): void;
    as(a: number): void;
    ax(a: List$1<any>, b: List$1<LabelPosition>): void;
    ar(a: number): void;
    y(): void;
    private h;
    r(a: number): string;
    protected n(): boolean;
    l(): boolean;
    protected q(dataItem_: any): string;
    p(dataItem_: any): any;
    protected k: RenderingContext;
    j: RenderingContext;
    ai(a: RenderingContext, b: RenderingContext): void;
    private _isDirty;
    get isDirty(): boolean;
    set isDirty(a: boolean);
    protected ah(): void;
    undirty(a: boolean): void;
    private be;
    protected ao(a: boolean): void;
    postRender(): void;
    private a8;
    protected ap(): void;
    af(): void;
    ad(a: SeriesViewer): void;
    x(a: SeriesViewer): void;
    i(): FontInfo;
    m(): boolean;
    an(): void;
    w(): void;
    az(): void;
    v(a: AxisLabelSettings, b: string): void;
    preRender(): void;
    isValid(): boolean;
    a5(a: TextBlock): Point;
    a6(): Point;
    a9(): Rect;
    a7(a: TextBlock): Point;
    bg(a: TextBlock): Thickness;
    ak(): void;
}
/**
 * @hidden
 */
export declare class CategoryAxisBaseView extends AxisView {
    static $t: Type;
    protected bh: CategoryAxisBase;
    constructor(a: CategoryAxisBase);
    r(a: number): string;
    bi(a: List$1<any>): number;
}
/**
 * @hidden
 */
export declare class HorizontalAxisLabelPanelBaseView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected az: HorizontalAxisLabelPanelBase;
    constructor(a: HorizontalAxisLabelPanelBase);
    a1(): void;
    a0(): boolean;
    a2(a: List$1<Rect>): void;
}
/**
 * @hidden
 */
export declare class NumericAxisBaseView extends AxisView {
    static $t: Type;
    protected bh: NumericAxisBase;
    constructor(a: NumericAxisBase);
    bi(): void;
    protected n(): boolean;
    l(): boolean;
    protected q(dataItem_: any): string;
    r(a: number): string;
}
/**
 * @hidden
 */
export declare class VerticalAxisLabelPanelView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected az: VerticalAxisLabelPanel;
    constructor(a: VerticalAxisLabelPanel);
    a0(): void;
    d(): FontInfo;
    protected ay(): Thickness;
    at(): Brush;
    a1(a: List$1<Rect>, b: number): void;
}
/**
 * @hidden
 */
export declare class XamDataChartView extends SeriesViewerView {
    static $t: Type;
    constructor(a: XamDataChart);
    protected fn: XamDataChart;
    fr(a: any): void;
    protected ds(): void;
    d4(): void;
    fw: Brush;
    fs: Brush;
    ft: Brush;
    fv: Brush;
    fu: Brush;
    fp: number;
    fq: number;
    protected d1(): void;
    fo: FontInfo;
}
/**
 * @hidden
 */
export declare class SeriesView extends Base implements ISchedulableRender, IProvidesViewport {
    static $t: Type;
    protected e: Series;
    s: boolean;
    constructor(a: Series);
    getDefaultTooltipTemplate(): string;
    ap(): void;
    j(): IExecutionContext;
    private h;
    protected get i(): IExecutionContext;
    d: DataContext;
    as(): void;
    getEffectiveViewport(): Rect;
    az(): void;
    aj(): void;
    get w(): DomRenderer;
    private _isDirty;
    get isDirty(): boolean;
    set isDirty(a: boolean);
    protected get_index(): number;
    get index(): number;
    protected aq(): void;
    undirty(a: boolean): void;
    private bw;
    au(): void;
    private bn;
    bq(): Brush;
    v: number;
    private u;
    protected a4(a: boolean): void;
    private br;
    protected bd(a: any, b: number, c: boolean): void;
    protected bg(a: any, b: number, c: boolean): void;
    protected aa(a: number, b: boolean): any;
    protected ab(a: number): any;
    protected ac(a: number): any;
    protected be(a: any, b: number): void;
    protected bh(a: any, b: number): void;
    protected bf(a: any, b: number): void;
    protected bi(a: any, b: number): void;
    protected ba(a: boolean): void;
    protected bb(): void;
    protected bc(): void;
    private bm;
    protected bp(a: number): Brush;
    protected bo(): Brush;
    protected a6(a: RenderingContext, b: boolean): void;
    protected a5(a: RenderingContext, b: boolean): void;
    ax(): void;
    am(): void;
    an(): void;
    private f;
    g(): SeriesComponentsFromView;
    a9(a: Canvas): void;
    t(): boolean;
    aw(): void;
    av(): void;
    a7(): void;
    ah(): void;
    a8(): void;
    ai(): void;
    c(a: any): DataContext;
    protected k: RenderingContext;
    protected l: RenderingContext;
    ar(a: RenderingContext, b: RenderingContext): void;
    private bs;
    get bu(): Rect;
    set bu(a: Rect);
    bt: Rect;
    protected get_bv(): Rect;
    get bv(): Rect;
    private m;
    get q(): boolean;
    set q(a: boolean);
    ak(a: SeriesViewer): void;
    a: CanvasRenderScheduler;
    ag(a: SeriesViewer): void;
    postRender(): void;
    protected a0(): void;
    b(a: number): DataContext;
    a2(a: RenderSurface): void;
    al(a: any): void;
    bj(): void;
    at(): void;
    ay(): void;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    o(): boolean;
    protected r: boolean;
    bk(): void;
    a3(): void;
    protected af(): void;
    ao(): void;
    preRender(): void;
    isValid(): boolean;
    n: boolean;
    p: boolean;
    a1(a: RenderSurface): void;
    ad: string;
    bl(type_: StandardLegendItems): DataTemplate;
}
/**
 * @hidden
 */
export declare abstract class MarkerSeriesView extends SeriesView {
    static $t: Type;
    protected b1: MarkerSeries;
    private b5;
    private b7;
    private b6;
    constructor(a: MarkerSeries);
    as(): void;
    cg(): void;
    cq(): Size;
    cn(a: boolean): void;
    protected b4: List$1<Marker>;
    b0(): Marker;
    abstract cf(a: (arg1: Marker) => void): void;
    cj(a: Marker): void;
    cl(a: Marker): void;
    ck(a: Marker): void;
    b2(): boolean;
    ce(): void;
    b8(): void;
    cp(a: Marker): Rect;
    cb(a: string): void;
    cc(): void;
    b9(): void;
    cd(): void;
    ca(): void;
    cm(): void;
    b3: boolean;
    protected bh(a: any, b: number): void;
    private bx;
    protected bi(a: any, b: number): void;
    b(a: number): DataContext;
    private co;
    protected a5(a: RenderingContext, b: boolean): void;
    ch(a: HashPool$2<any, Marker>): void;
    ci(a: Pool$1<Marker>): void;
    by(a: Point): Marker;
    private bz;
}
/**
 * @hidden
 */
export declare class ChartAxisRangeChangedEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: SeriesViewer, b: Axis, c: number, d: number, e: number, f: number);
    private _chart;
    get chart(): SeriesViewer;
    set chart(a: SeriesViewer);
    private _axis;
    get axis(): Axis;
    set axis(a: Axis);
    private _oldMinimumValue;
    get oldMinimumValue(): number;
    set oldMinimumValue(a: number);
    private _minimumValue;
    get minimumValue(): number;
    set minimumValue(a: number);
    private _oldMaximumValue;
    get oldMaximumValue(): number;
    set oldMaximumValue(a: number);
    private _maximumValue;
    get maximumValue(): number;
    set maximumValue(a: number);
}
