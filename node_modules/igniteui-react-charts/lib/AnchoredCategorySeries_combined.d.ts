import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { IHasSingleValueCategory } from "./IHasSingleValueCategory";
import { IHasCategoryTrendline } from "./IHasCategoryTrendline";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { IAnchoredCategorySeriesInteractionManager } from "./IAnchoredCategorySeriesInteractionManager";
import { Type, Point } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { ICategoryScaler } from "./ICategoryScaler";
import { IScaler } from "./IScaler";
import { IBucketizer } from "./IBucketizer";
import { CategorySeriesView } from "./CategorySeriesView";
import { IPreparesCategoryTrendline } from "./IPreparesCategoryTrendline";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior } from "./ConsolidatedItemHitTestBehavior";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ITrendLineManager } from "./ITrendLineManager";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { AxisRange } from "./AxisRange";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class AnchoredCategorySeries extends CategorySeries implements IIsCategoryBased, IHasSingleValueCategory, IHasCategoryTrendline, ITrendLineSeries {
    static $t: Type;
    private tk;
    get tl(): IAnchoredCategorySeriesInteractionManager;
    tg: AnchoredCategorySeriesView;
    getHostReferenceValue(): number;
    i0(): string;
    protected bx(): SeriesView;
    ly(a: SeriesView): void;
    to: boolean;
    constructor();
    t0: string;
    hw(a: any, b: string): any;
    get valueColumn(): IFastItemColumn$1<number>;
    set valueColumn(a: IFastItemColumn$1<number>);
    private tm;
    tw: string;
    ty: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get uk(): Brush;
    set uk(a: Brush);
    static readonly t7: DependencyProperty;
    trendLineThickness: number;
    um: PenLineCap;
    ul: DoubleCollection;
    trendLinePeriod: number;
    tq: number;
    en(a: any): boolean;
    protected td(a: number, b: number, c: Axis): any[];
    protected l3(a: any, b: string, c: any, d: any): void;
    ap(a: Axis): AxisRange;
    protected k0(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected sn(): number;
    tp(a: CategorySeriesView): number;
    t5(a: PointCollection, b: number, c: CategorySeriesView): void;
    te(a: List$1<number[]>, b: number, c: Rect, d: Rect): Clipper;
    tf(a: List$1<number[]>, b: number, c: Rect, d: Rect, e: boolean): Clipper;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    kx(a: boolean, b: SeriesView): void;
    s3(a: CategoryFrame, b: CategorySeriesView): void;
    s6(a: CategoryFrame, b: CategorySeriesView): void;
    th: CategoryFrame;
    mg(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    t2(a: CategoryFrame, b: CategorySeriesView): void;
    protected mv(): void;
    hz(a: any, b: Point): any;
    get currentCategoryMode(): CategoryMode;
    get scaler(): ICategoryScaler;
    get yScaler(): IScaler;
    get bucketizer(): IBucketizer;
    get currentMode2Index(): number;
    provideCollisionDetector(): IDetectsCollisions;
    get trendlinePreparer(): IPreparesCategoryTrendline;
    protected ts: string;
    abstract t3(a: Axis): void;
    abstract t4(a: Axis): void;
    protected k7(a: any): void;
    ti: CategorySeriesMarkerCollisionAvoidance;
    ht(a: Point): any;
    tj: ConsolidatedItemHitTestBehavior;
    get mayContainUnknowns(): boolean;
    gc(): number;
    protected get_tr(): number;
    protected get tr(): number;
    aq(a: Rect): AxisRange;
    private t6;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredCategoryBucketCalculator extends CategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    protected i: AnchoredCategorySeriesView;
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
    private h;
    private j;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare class AnchoredCategorySeriesView extends CategorySeriesView {
    static $t: Type;
    c0: AnchoredCategorySeries;
    constructor(a: AnchoredCategorySeries);
    private c1;
    get c2(): ITrendLineManager;
    set c2(a: ITrendLineManager);
    get c3(): boolean;
    c7(): void;
    c5(): void;
    c4(): void;
    cs(): CategoryBucketCalculator;
    c6(): void;
    c8(): void;
    c9(a: number): Rect;
    protected a5(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
