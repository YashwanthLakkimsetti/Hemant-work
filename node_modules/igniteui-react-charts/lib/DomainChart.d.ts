import { Base, INotifyPropertyChanged, IEnumerable, Type, PropertyChangedEventArgs } from "igniteui-react-core";
import { IDataLegendTarget } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { IDomainChartWidget } from "./IDomainChartWidget";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesAdapterImplementation } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { IAnnotationLayerProxy } from "./IAnnotationLayerProxy";
import { Color } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { BrushCollection } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerTypeCollection } from "./MarkerTypeCollection";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { TrendLineType } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { CalloutPlacementPositionsCollection } from "./CalloutPlacementPositionsCollection";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { Series } from "./Series";
import { IDataLegend } from "igniteui-react-core";
import { DataSeries } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ObservableColorCollection } from "igniteui-react-core";
import { DataSeriesMarker } from "igniteui-react-core";
import { IDataLegendSeries } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { CalloutRenderStyleUpdatingEventArgs } from "./CalloutRenderStyleUpdatingEventArgs";
/**
 * @hidden
 */
export declare abstract class DomainChart extends Base implements INotifyPropertyChanged, IDataLegendTarget {
    static $t: Type;
    protected iu: any;
    provideContainer(a: any): void;
    destroy(): void;
    private p6;
    protected p7(): void;
    protected p3(a: XamDataChart): void;
    protected p0(): void;
    protected p9(a: Series, b: number): void;
    protected qu(a: string, b: any, c: any): void;
    private it;
    get tooltipTemplate(): any;
    set tooltipTemplate(a: any);
    private ff;
    get tooltipTemplates(): List$1<any>;
    set tooltipTemplates(a: List$1<any>);
    private gc;
    get hi(): number;
    set hi(a: number);
    private is;
    private get toolTip();
    private set toolTip(value);
    private gp;
    get hv(): number;
    set hv(a: number);
    private gq;
    get hw(): number;
    set hw(a: number);
    private gr;
    get hx(): number;
    set hx(a: number);
    private go;
    get hu(): number;
    set hu(a: number);
    private gk;
    get hq(): number;
    set hq(a: number);
    private gm;
    get hs(): number;
    set hs(a: number);
    private gl;
    get hr(): number;
    set hr(a: number);
    private gj;
    get hp(): number;
    set hp(a: number);
    private r8;
    get s0(): Brush;
    set s0(a: Brush);
    private r9;
    get s1(): Brush;
    set s1(a: Brush);
    private f9;
    protected get_hf(): number;
    protected set_hf(a: number): void;
    get hf(): number;
    set hf(a: number);
    private gs;
    get hy(): number;
    set hy(a: number);
    private gi;
    get ho(): number;
    set ho(a: number);
    private fw;
    get g2(): number;
    set g2(a: number);
    private ih;
    get iq(): number;
    set iq(a: number);
    private c7;
    get c8(): (time: number) => number;
    set c8(a: (time: number) => number);
    protected p4(a: XamDataChart): void;
    protected qa(a: Series, b: number): void;
    protected p1(): void;
    private qb;
    h7: (arg1: HTMLElement) => any[];
    private rj;
    private iw;
    private e7;
    private h8;
    protected qv(a: string, b: any, c: any): void;
    private bo;
    get bp(): IDomainChartWidget;
    set bp(a: IDomainChartWidget);
    private ji;
    get od(): string;
    set od(a: string);
    private jk;
    get oo(): string;
    set oo(a: string);
    private c5;
    get dataChart(): XamDataChart;
    set dataChart(a: XamDataChart);
    au: DataSeriesAdapterImplementation;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    protected p5(): void;
    protected abstract get fl(): List$1<DataSeriesType>;
    protected abstract get fk(): List$1<IDataSeriesAdapterRule>;
    protected fj: List$1<MarkerType>;
    protected e3(a: DataSeriesType): boolean;
    notifyResized(): void;
    qj(): void;
    pq(): void;
    py(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected q1(a: string): void;
    protected abstract pr(a: (arg1: Axis) => void, b: boolean): void;
    protected ps(a: (arg1: Series) => void): void;
    protected pt(a: (arg1: Series, arg2: number) => void): void;
    protected pw(a: (arg1: Series) => void): void;
    protected px(a: (arg1: Series, arg2: number) => void): void;
    protected pu(a: (arg1: Series) => void): void;
    protected pv(a: (arg1: Series, arg2: number) => void): void;
    ra(): void;
    protected ql(a: (arg1: XamDataChart) => void): void;
    protected qm(a: (arg1: XamDataChart) => void, b: boolean): void;
    protected qn(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    protected e4(a: DataSeries): boolean;
    protected ew(): boolean;
    private static readonly i2;
    private ig;
    protected mt(a: DataSeries): string;
    private static i1;
    protected mu(a: DataSeries, b: DataSeriesType): string;
    protected abstract at(a: DataSeries): DataSeriesType;
    protected abstract cf(a: DataSeries, b: DataSeriesType): Series;
    ms(): string;
    private e1;
    protected rd(): void;
    protected cg(seriesType_: DataSeriesType): Series;
    private b9;
    private cb;
    private cd;
    private ce;
    private ca;
    private cc;
    private bj;
    protected get bk(): IAnnotationLayerProxy;
    private get et();
    private ev;
    private rk;
    protected ex(): boolean;
    protected ey(): boolean;
    protected fh(a: string, b: boolean): List$1<Series>;
    protected ri(a: Series, b: Series, c: DataSeries): void;
    protected abstract rc(a: DataSeries): void;
    protected abstract rb(a: DataSeries): void;
    protected rf(): void;
    private rg;
    protected rh(a: Series): void;
    protected abstract re(): void;
    private qo;
    protected po(): void;
    protected st(a: number): Brush;
    protected sw(a: number): Brush;
    protected su(a: number): Brush;
    protected sv(a: number): Brush;
    protected s4(a: number): Color;
    protected ds(a: Color): ObservableColorCollection;
    protected ab(a: Color): BrushCollection;
    protected fe: List$1<Color>;
    protected get fg(): List$1<Color>;
    iv(): any;
    qc(a: string, b: string): void;
    qd(a: string, b: string, c: Series): void;
    b4(a: DataSeriesMarker): MarkerType;
    private bn;
    private d9;
    attachDataLegend(a: IDataLegend): void;
    protected pk(a: IDataLegend): void;
    detachDataLegend(a: IDataLegend): void;
    protected pn(a: IDataLegend): void;
    getDataLegendSeries(): IDataLegendSeries[];
    protected p(): IDataLegendSeries[];
    qi(source_: any, a: number, b: any, c: any): void;
    qe(source_: any): void;
    qf(source_: any, a: number, b: any): void;
    qg(source_: any, a: number, b: any): void;
    private bb;
    get bc(): DataToolTipLayerGroupingMode;
    set bc(a: DataToolTipLayerGroupingMode);
    private f0;
    get g6(): number;
    set g6(a: number);
    private f1;
    get g7(): number;
    set g7(a: number);
    private fy;
    get g4(): number;
    set g4(a: number);
    private fz;
    get g5(): number;
    set g5(a: number);
    private a7;
    get a8(): DataTooltipGroupedPositionX;
    set a8(a: DataTooltipGroupedPositionX);
    private a9;
    get ba(): DataTooltipGroupedPositionY;
    set ba(a: DataTooltipGroupedPositionY);
    private d2;
    get eo(): boolean;
    set eo(a: boolean);
    static readonly le: string;
    get m(): string[];
    set m(a: string[]);
    private e;
    get j(): string[];
    set j(a: string[]);
    private b;
    get l(): string[];
    set l(a: string[]);
    private d;
    get i(): string[];
    set i(a: string[]);
    private a;
    get as(): DataAbbreviationMode;
    set as(a: DataAbbreviationMode);
    private ar;
    get il(): number;
    set il(a: number);
    private ib;
    get im(): number;
    set im(a: number);
    private ic;
    get a6(): DataLegendValueMode;
    set a6(a: DataLegendValueMode);
    private a5;
    get l6(): string;
    set l6(a: string);
    private je;
    get ep(): boolean;
    set ep(a: boolean);
    private d3;
    get mc(): string;
    set mc(a: string);
    private jf;
    get n(): any[];
    set n(a: any[]);
    private f;
    get tq(): Thickness;
    set tq(a: Thickness);
    private tg;
    get eq(): boolean;
    set eq(a: boolean);
    private d4;
    get ml(): string;
    set ml(a: string);
    private jg;
    get er(): boolean;
    set er(a: boolean);
    private d5;
    get tr(): Thickness;
    set tr(a: Thickness);
    private th;
    get sq(): Brush;
    set sq(a: Brush);
    private r3;
    private dh;
    get dr(): FontInfo;
    set dr(a: FontInfo);
    get kw(): string;
    set kw(a: string);
    private i8;
    get k(): any[];
    set k(a: any[]);
    private c;
    get ks(): string;
    set ks(a: string);
    private i7;
    get aw(): DataLegendHeaderDateMode;
    set aw(a: DataLegendHeaderDateMode);
    private av;
    get ay(): DataLegendHeaderTimeMode;
    set ay(a: DataLegendHeaderTimeMode);
    private ax;
    get k1(): string;
    set k1(a: string);
    private i9;
    get si(): Brush;
    set si(a: Brush);
    private rv;
    get tk(): Thickness;
    set tk(a: Thickness);
    private ta;
    get tj(): Thickness;
    set tj(a: Thickness);
    private s9;
    get en(): boolean;
    set en(a: boolean);
    private d1;
    private c9;
    get di(): FontInfo;
    set di(a: FontInfo);
    get sl(): Brush;
    set sl(a: Brush);
    private ry;
    private dc;
    get dl(): FontInfo;
    set dl(a: FontInfo);
    get a2(): DataLegendSummaryType;
    set a2(a: DataLegendSummaryType);
    private a1;
    get lk(): string;
    set lk(a: string);
    private jb;
    get tn(): Thickness;
    set tn(a: Thickness);
    private td;
    get tm(): Thickness;
    set tm(a: Thickness);
    private tc;
    get sn(): Brush;
    set sn(a: Brush);
    private r0;
    private de;
    get dn(): FontInfo;
    set dn(a: FontInfo);
    get lf(): string;
    set lf(a: string);
    private ja;
    get sk(): Brush;
    set sk(a: Brush);
    private rx;
    private db;
    get dk(): FontInfo;
    set dk(a: FontInfo);
    get lq(): string;
    set lq(a: string);
    private jc;
    get sm(): Brush;
    set sm(a: Brush);
    private rz;
    private dd;
    get dm(): FontInfo;
    set dm(a: FontInfo);
    get ti(): Thickness;
    set ti(a: Thickness);
    private s8;
    get bw(): LegendItemBadgeShape;
    set bw(a: LegendItemBadgeShape);
    private bu;
    get a4(): DataLegendUnitsMode;
    set a4(a: DataLegendUnitsMode);
    private a3;
    get l0(): string;
    set l0(a: string);
    private jd;
    get sp(): Brush;
    set sp(a: Brush);
    private r2;
    get tp(): Thickness;
    set tp(a: Thickness);
    private tf;
    private dg;
    get dq(): FontInfo;
    set dq(a: FontInfo);
    get to(): Thickness;
    set to(a: Thickness);
    private te;
    get so(): Brush;
    set so(a: Brush);
    private r1;
    private df;
    get dp(): FontInfo;
    set dp(a: FontInfo);
    get a0(): DataLegendLabelMode;
    set a0(a: DataLegendLabelMode);
    private az;
    get sj(): Brush;
    set sj(a: Brush);
    private rw;
    get tl(): Thickness;
    set tl(a: Thickness);
    private tb;
    private da;
    get dj(): FontInfo;
    set dj(a: FontInfo);
    seriesAdded: (sender: any, args: ChartSeriesEventArgs) => void;
    q2(a: Series): void;
    seriesRemoved: (sender: any, args: ChartSeriesEventArgs) => void;
    q8(a: Series): void;
    seriesPointerEnter: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    q4(a: Series, b: any): void;
    seriesPointerLeave: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    q5(a: Series, b: any): void;
    seriesPointerMove: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    q6(a: Series, b: any): void;
    seriesPointerDown: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    q3(a: Series, b: any): void;
    seriesPointerUp: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    q7(a: Series, b: any): void;
    calloutStyleUpdating: (sender: any, args: CalloutStyleUpdatingEventArgs) => void;
    q0(a: any, b: CalloutStyleUpdatingEventArgs): void;
    calloutRenderStyleUpdating: (sender: any, args: CalloutRenderStyleUpdatingEventArgs) => void;
    qz(a: any, b: CalloutRenderStyleUpdatingEventArgs): void;
    private fi;
    qx(a: () => void): void;
    private dt;
    qy(a: () => void, b: boolean): {
        p1?: boolean;
    };
    protected get_e5(): boolean;
    protected get e5(): boolean;
    protected p2(a: XamDataChart): void;
    protected af(a: BrushCollection): BrushCollection;
    protected sz(a: Brush): Brush;
    protected p8(a: Series, b: number): void;
    protected abstract pl(): void;
    protected get ei(): boolean;
    private dw;
    protected pp(): void;
    protected pz(): void;
    protected q9(a: XamDataChart): void;
    protected pj(a: Series, b: number): void;
    protected abstract pi(a: Series, b: number): void;
    protected b6(a: Series, b: number): MarkerType;
    protected b5(a: Series): MarkerType;
    protected ft(): IEnumerable;
    protected get_ez(): boolean;
    protected get ez(): boolean;
    protected fu(): IEnumerable;
    protected qt(a: string, b: any, c: any): void;
    private fc;
    private fd;
    private qp;
    private ph;
    private qr;
    abstract get bi(): DomainType;
    private fp;
    get itemsSource(): IEnumerable;
    set itemsSource(a: IEnumerable);
    private fn;
    get actualItemsSource(): IEnumerable;
    set actualItemsSource(a: IEnumerable);
    private h;
    get q(): string[];
    set q(a: string[]);
    private g;
    get o(): string[];
    set o(a: string[]);
    private t;
    get aa(): BrushCollection;
    set aa(a: BrushCollection);
    private w;
    get ae(): BrushCollection;
    set ae(a: BrushCollection);
    private r;
    get y(): BrushCollection;
    set y(a: BrushCollection);
    private s;
    get z(): BrushCollection;
    set z(a: BrushCollection);
    private bl;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    private d8;
    protected get_e0(): boolean;
    protected set_e0(a: boolean): void;
    get e0(): boolean;
    set e0(a: boolean);
    private eb;
    protected get_e6(): boolean;
    protected set_e6(a: boolean): void;
    get e6(): boolean;
    set e6(a: boolean);
    private ed;
    protected get_e9(): boolean;
    protected set_e9(a: boolean): void;
    get e9(): boolean;
    set e9(a: boolean);
    private ee;
    protected get_fa(): boolean;
    protected set_fa(a: boolean): void;
    get fa(): boolean;
    set fa(a: boolean);
    private ea;
    protected get_e2(): boolean;
    protected set_e2(a: boolean): void;
    get e2(): boolean;
    set e2(a: boolean);
    private s5;
    get s7(): Rect;
    set s7(a: Rect);
    get s6(): Rect;
    private jj;
    get oh(): string;
    set oh(a: string);
    private jh;
    get n6(): string;
    set n6(a: string);
    private rm;
    get ro(): HorizontalAlignment;
    set ro(a: HorizontalAlignment);
    private rl;
    get rn(): HorizontalAlignment;
    set rn(a: HorizontalAlignment);
    private c3;
    get c4(): UnknownValuePlotting;
    set c4(a: UnknownValuePlotting);
    private gh;
    protected get_hn(): number;
    protected set_hn(a: number): void;
    get hn(): number;
    set hn(a: number);
    private gn;
    get ht(): number;
    set ht(a: number);
    private cl;
    get cm(): SeriesOutlineMode;
    set cm(a: SeriesOutlineMode);
    private b2;
    get b3(): MarkerOutlineMode;
    set b3(a: MarkerOutlineMode);
    private b0;
    get b1(): MarkerFillMode;
    set b1(a: MarkerFillMode);
    private ga;
    get hg(): number;
    set hg(a: number);
    private gb;
    get hh(): number;
    set hh(a: number);
    private b7;
    get b8(): MarkerTypeCollection;
    set b8(a: MarkerTypeCollection);
    private by;
    get bz(): MarkerAutomaticBehavior;
    set bz(a: MarkerAutomaticBehavior);
    private u;
    get ac(): BrushCollection;
    set ac(a: BrushCollection);
    private v;
    get ad(): BrushCollection;
    set ad(a: BrushCollection);
    private ie;
    get ip(): number;
    set ip(a: number);
    private fv;
    get g1(): number;
    set g1(a: number);
    private dv;
    get eh(): boolean;
    set eh(a: boolean);
    private x;
    get ag(): BrushCollection;
    set ag(a: BrushCollection);
    private c1;
    get c2(): TrendLineType;
    set c2(a: TrendLineType);
    private gt;
    get hz(): number;
    set hz(a: number);
    private du;
    get eg(): boolean;
    set eg(a: boolean);
    private ge;
    get hk(): number;
    set hk(a: number);
    private gg;
    get hm(): number;
    set hm(a: number);
    private gf;
    get hl(): number;
    set hl(a: number);
    private gd;
    get hj(): number;
    set hj(a: number);
    protected qs(): void;
    private an;
    get ao(): ComputedPlotAreaMarginMode;
    set ao(a: ComputedPlotAreaMarginMode);
    private cn;
    get co(): SeriesPlotAreaMarginHorizontalMode;
    set co(a: SeriesPlotAreaMarginHorizontalMode);
    private cp;
    get cq(): SeriesPlotAreaMarginVerticalMode;
    set cq(a: SeriesPlotAreaMarginVerticalMode);
    private cj;
    get ck(): SeriesHighlightingMode;
    set ck(a: SeriesHighlightingMode);
    private ch;
    get ci(): SeriesHighlightingBehavior;
    set ci(a: SeriesHighlightingBehavior);
    private bq;
    get br(): LegendHighlightingMode;
    set br(a: LegendHighlightingMode);
    private bv;
    get bx(): LegendItemBadgeShape;
    set bx(a: LegendItemBadgeShape);
    private bs;
    get bt(): LegendItemBadgeMode;
    set bt(a: LegendItemBadgeMode);
    private ii;
    get ir(): number;
    set ir(a: number);
    private cz;
    get c0(): ToolTipType;
    set c0(a: ToolTipType);
    private ap;
    get aq(): CrosshairsDisplayMode;
    set aq(a: CrosshairsDisplayMode);
    private d0;
    get em(): boolean;
    set em(a: boolean);
    private ru;
    get sh(): Brush;
    set sh(a: Brush);
    private fx;
    get g3(): number;
    set g3(a: number);
    private rt;
    get sg(): Brush;
    set sg(a: Brush);
    private dz;
    get el(): boolean;
    set el(a: boolean);
    private rp;
    get sc(): Brush;
    set sc(a: Brush);
    private rr;
    get se(): Brush;
    set se(a: Brush);
    private rq;
    get sd(): Brush;
    set sd(a: Brush);
    private rs;
    get sf(): Brush;
    set sf(a: Brush);
    private h9;
    get ij(): number;
    set ij(a: number);
    private ia;
    get ik(): number;
    set ik(a: number);
    private ec;
    get e8(): boolean;
    set e8(a: boolean);
    private d6;
    get es(): boolean;
    set es(a: boolean);
    private r4;
    get sr(): Brush;
    set sr(a: Brush);
    private r5;
    get ss(): Brush;
    set ss(a: Brush);
    private id;
    get io(): number;
    set io(a: number);
    private dy;
    get ek(): boolean;
    set ek(a: boolean);
    private dx;
    get ej(): boolean;
    set ej(a: boolean);
    private fo;
    get calloutsItemsSource(): IEnumerable;
    set calloutsItemsSource(a: IEnumerable);
    private ah;
    get ai(): CalloutPlacementPositionsCollection;
    set ai(a: CalloutPlacementPositionsCollection);
    private i5;
    get j1(): string;
    set j1(a: string);
    private i6;
    get j3(): string;
    set j3(a: string);
    private i4;
    get jx(): string;
    set jx(a: string);
    private i3;
    get ju(): string;
    set ju(a: string);
    get cv(): SeriesViewerScrollbarMode;
    set cv(a: SeriesViewerScrollbarMode);
    private ct;
    get cw(): SeriesViewerScrollbarMode;
    set cw(a: SeriesViewerScrollbarMode);
    private cu;
    get cs(): SeriesViewerHorizontalScrollbarPosition;
    set cs(a: SeriesViewerHorizontalScrollbarPosition);
    private cr;
    get cy(): SeriesViewerVerticalScrollbarPosition;
    set cy(a: SeriesViewerVerticalScrollbarPosition);
    private cx;
    get sx(): Brush;
    set sx(a: Brush);
    private r6;
    get sy(): Brush;
    set sy(a: Brush);
    private r7;
    get hc(): number;
    set hc(a: number);
    private f6;
    get hb(): number;
    set hb(a: number);
    private f5;
    get g8(): number;
    set g8(a: number);
    private f2;
    get g9(): number;
    set g9(a: number);
    private f3;
    get ha(): number;
    set ha(a: number);
    private f4;
    get he(): number;
    set he(a: number);
    private f8;
    get hd(): number;
    set hd(a: number);
    private f7;
    get eu(): boolean;
    set eu(a: boolean);
    private d7;
    static readonly m5: string;
    get s2(): Brush;
    set s2(a: Brush);
    private sa;
    get s3(): Brush;
    set s3(a: Brush);
    private sb;
    get h3(): number;
    set h3(a: number);
    private gx;
    get h2(): number;
    set h2(a: number);
    private gw;
    get h0(): number;
    set h0(a: number);
    private gu;
    get h6(): number;
    set h6(a: number);
    private g0;
    get h1(): number;
    set h1(a: number);
    private gv;
    get h5(): number;
    set h5(a: number);
    private gz;
    get h4(): number;
    set h4(a: number);
    private gy;
    get fb(): boolean;
    set fb(a: boolean);
    private ef;
    static readonly pa: string;
}
