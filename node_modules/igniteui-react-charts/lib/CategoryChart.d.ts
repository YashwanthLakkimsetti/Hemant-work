import { XYChart } from "./XYChart";
import { IEnumerable, Type } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { BrushCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected p7(): void;
    protected p9(a: Series, b: number): void;
    protected qu(a: string, b: any, c: any): void;
    private ac2;
    get ac4(): number;
    set ac4(a: number);
    private abh;
    get abi(): (time: number) => number;
    set abi(a: (time: number) => number);
    ada(): string;
    protected p2(a: XamDataChart): void;
    protected p8(a: Series, b: number): void;
    private aa7;
    private abb;
    protected pl(): void;
    protected y5(a: Axis): void;
    protected y3(a: Axis): void;
    protected get_bi(): DomainType;
    get bi(): DomainType;
    private aa1;
    get aa2(): CategoryChartType;
    set aa2(a: CategoryChartType);
    private aa3;
    get aa4(): CategorySeriesMarkerCollisionAvoidance;
    set aa4(a: CategorySeriesMarkerCollisionAvoidance);
    private abl;
    get abw(): boolean;
    set abw(a: boolean);
    private abm;
    get abx(): boolean;
    set abx(a: boolean);
    private aa5;
    get aa6(): CategoryTransitionInMode;
    set aa6(a: CategoryTransitionInMode);
    private abf;
    get abg(): TransitionInSpeedType;
    set abg(a: TransitionInSpeedType);
    private ab9;
    get acr(): number;
    set acr(a: number);
    private acc;
    get acu(): number;
    set acu(a: number);
    private ab8;
    get acq(): number;
    set acq(a: number);
    private acb;
    get act(): number;
    set act(a: number);
    private aca;
    get acs(): number;
    set acs(a: number);
    private acd;
    get acv(): number;
    set acv(a: number);
    private ace;
    get acy(): number;
    set acy(a: number);
    private aax;
    get aay(): AutoMarginsAndAngleUpdateMode;
    set aay(a: AutoMarginsAndAngleUpdateMode);
    private abn;
    ad9(): void;
    get aby(): boolean;
    set aby(a: boolean);
    protected static readonly adj: string;
    private abo;
    get abz(): boolean;
    set abz(a: boolean);
    private ab6;
    get aci(): number;
    set aci(a: number);
    private ab7;
    get acj(): number;
    set acj(a: number);
    private abs;
    get ab3(): boolean;
    set ab3(a: boolean);
    private static readonly ado;
    private abp;
    get ab0(): boolean;
    set ab0(a: boolean);
    private static readonly adx;
    private abr;
    get ab2(): boolean;
    set ab2(a: boolean);
    private aaz;
    get aa0(): AxisRangeBufferMode;
    set aa0(a: AxisRangeBufferMode);
    private abt;
    get ab4(): boolean;
    set ab4(a: boolean);
    private ac3;
    get ac5(): number;
    set ac5(a: number);
    private acg;
    get ac0(): number;
    set ac0(a: number);
    private acf;
    get acz(): number;
    set acz(a: number);
    private ach;
    get ac1(): number;
    set ac1(a: number);
    get acp(): number;
    get aco(): number;
    acl(): number;
    acn(): number;
    ack(): number;
    acm(): number;
    get acx(): number;
    get acw(): number;
    private aat;
    get aav(): BrushCollection;
    set aav(a: BrushCollection);
    private aau;
    get aaw(): BrushCollection;
    set aaw(a: BrushCollection);
    private abq;
    get ab1(): boolean;
    set ab1(a: boolean);
    private abj;
    get abu(): boolean;
    set abu(a: boolean);
    private abk;
    get abv(): boolean;
    set abv(a: boolean);
    constructor();
    protected get_fl(): List$1<DataSeriesType>;
    protected get fl(): List$1<DataSeriesType>;
    private ab5;
    protected fu(): IEnumerable;
    private ad7;
    private ad8;
    protected rd(): void;
    private _xAxis;
    private get xAxis();
    private set xAxis(value);
    private _yAxis;
    private get yAxis();
    private set yAxis(value);
    private aba;
    private aa9;
    protected at(a: DataSeries): DataSeriesType;
    protected cf(a: DataSeries, b: DataSeriesType): Series;
    protected rb(a: DataSeries): void;
    protected re(): void;
    protected get_fk(): List$1<IDataSeriesAdapterRule>;
    protected get fk(): List$1<IDataSeriesAdapterRule>;
    protected pi(a: Series, b: number): void;
    private ad5;
    private ad6;
    protected tw(): Axis;
    protected tx(): Axis;
    private abd;
    private abe;
    protected fh(a: string, b: boolean): List$1<Series>;
    protected ri(a: Series, b: Series, c: DataSeries): void;
    protected ey(): boolean;
    protected qt(a: string, b: any, c: any): void;
}
