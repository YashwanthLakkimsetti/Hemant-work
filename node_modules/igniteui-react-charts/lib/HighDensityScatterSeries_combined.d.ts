import { Series } from "./Series";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { SeriesView } from "./SeriesView";
import { ProgressiveLoadStatusEventArgs } from "./ProgressiveLoadStatusEventArgs";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class HighDensityScatterSeries extends Series {
    static $t: Type;
    protected get_d5(): boolean;
    protected gu(): number;
    constructor();
    protected get_ec(): boolean;
    qa: NumericXAxis;
    qc: NumericYAxis;
    sd: string;
    protected get qh(): IFastItemColumn$1<number>;
    protected set qh(a: IFastItemColumn$1<number>);
    private qg;
    r9: string;
    sh: string;
    sb: string;
    sj: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    hw(a: any, b: string): any;
    sl: string;
    protected get qj(): IFastItemColumn$1<number>;
    protected set qj(a: IFastItemColumn$1<number>);
    private qi;
    qq: boolean;
    qp: boolean;
    rl: number;
    rk: number;
    tj: Color;
    ti: Color;
    rx: number;
    private s0;
    protected l3(a: any, b: string, c: any, d: any): void;
    private su;
    qo(a: any): boolean;
    qn(a: any): boolean;
    private sq;
    private rr;
    private qk;
    private q6;
    private q5;
    private q4;
    private q3;
    private q2;
    private q1;
    private q0;
    private qz;
    private get ra();
    private get q9();
    private get q8();
    private get q7();
    private p8;
    private qd;
    private qe;
    private p9;
    private qb;
    private qm;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    private rs;
    get ry(): number;
    set ry(a: number);
    mi(a: boolean): void;
    private ss;
    private ru;
    private ro;
    private rn;
    protected k0(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    private sp;
    private sv;
    private st;
    progressiveLoadStatusChanged: (sender: any, e: ProgressiveLoadStatusEventArgs) => void;
    private sn;
    private sr;
    private qr;
    private s2;
    private qx;
    private qw;
    private qy;
    private rd;
    private rb;
    private rc;
    private re;
    private rg;
    private ri;
    private rh;
    private rf;
    private qt;
    private qu;
    private qv;
    private qs;
    private sx;
    en(a: any): boolean;
    private sz;
    private rv;
    private rw;
    private rj;
    private sy;
    private sw;
    private rq;
    private rp;
    private p5;
    private rt;
    private so;
    protected bx(): SeriesView;
    ly(a: SeriesView): void;
    protected p7: HighDensityScatterSeriesView;
    ap(a: Axis): AxisRange;
    private ql;
    protected m4(a: Rect, b: Rect): void;
    protected m5(a: Rect, b: Rect): void;
    private _itemIndexes;
    private p6;
    private p3;
    ht(a: Point): any;
    private rz;
    s1(a: number[], b: number, c: number): void;
    protected get_e3(): boolean;
    protected set_e3(a: boolean): void;
    kx(a: boolean, b: SeriesView): void;
    mj(a: Rect, b: RenderSurface): void;
    private qf;
    mg(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    ku(): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class HighDensityScatterSeriesView extends SeriesView {
    static $t: Type;
    constructor(a: HighDensityScatterSeries);
    as(): void;
    ca(): void;
    protected bz: HighDensityScatterSeries;
    private bx;
    private b5;
    private b4;
    private b2;
    private b3;
    private b0;
    b6(): void;
    by(): number[];
    b9(): void;
    b8(a: () => void): void;
    protected a6(a: RenderingContext, b: boolean): void;
    b1(a: Color, b: Color): boolean;
    b7(): void;
    al(a: any): void;
}
