import { EventArgs, Base, Type, Point, IList$1, IEnumerable, IEnumerator$1, IEnumerator, INotifyPropertyChanged, PropertyChangedEventArgs } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { Series } from "./Series";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategorySeries } from "./CategorySeries";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { NumericAxisBase } from "./NumericAxisBase";
import { ISupportsMarkers } from "./ISupportsMarkers";
import { CategoryFrame } from "./CategoryFrame";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { Rect } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { SeriesViewer } from "./SeriesViewer";
import { PointCollection } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { IChartLegend } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { RenderSurface } from "./RenderSurface";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { Path } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { DependencyObject } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { IScaler } from "./IScaler";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { AnchoredCategoryBucketCalculator } from "./AnchoredCategoryBucketCalculator";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CollisionAvoider } from "./CollisionAvoider";
import { ICategoryScaler } from "./ICategoryScaler";
import { IBucketizer } from "./IBucketizer";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { IBarSeries } from "./IBarSeries";
import { Color } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { DomRenderer } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { IProvidesViewport } from "./IProvidesViewport";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ValuesHolder } from "./ValuesHolder";
import { PreparationParams } from "./PreparationParams";
import { RenderingContext } from "igniteui-react-core";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Canvas } from "igniteui-react-core";
import { Panel } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class StackedSeriesCreatedEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: StackedFragmentSeries);
    c: StackedFragmentSeries;
    get brush(): Brush;
    set brush(a: Brush);
    get legendItemTemplate(): DataTemplate;
    set legendItemTemplate(a: DataTemplate);
    get legendItemBadgeTemplate(): DataTemplate;
    set legendItemBadgeTemplate(a: DataTemplate);
    get legendItemVisibility(): Visibility;
    set legendItemVisibility(a: Visibility);
    get outline(): Brush;
    set outline(a: Brush);
    get dashArray(): DoubleCollection;
    set dashArray(a: DoubleCollection);
    get dashCap(): PenLineCap;
    set dashCap(a: PenLineCap);
    get index(): number;
    get thickness(): number;
    set thickness(a: number);
    get title(): any;
    set title(a: any);
    get transitionDuration(): number;
    set transitionDuration(a: number);
    get transitionEasingFunction(): (time: number) => number;
    set transitionEasingFunction(a: (time: number) => number);
    get markerBrush(): Brush;
    set markerBrush(a: Brush);
    get markerOutline(): Brush;
    set markerOutline(a: Brush);
    get markerStyle(): Style;
    set markerStyle(a: Style);
    get markerTemplate(): DataTemplate;
    set markerTemplate(a: DataTemplate);
    get markerType(): MarkerType;
    set markerType(a: MarkerType);
    get markerThickness(): number;
    set markerThickness(a: number);
    get startCap(): PenLineCap;
    set startCap(a: PenLineCap);
    get endCap(): PenLineCap;
    set endCap(a: PenLineCap);
}
/**
 * @hidden
 */
export declare abstract class FragmentBase extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    constructor();
    u7: CategoryLineRasterizer;
    private _logicalSeriesLink;
    get logicalSeriesLink(): StackedFragmentSeries;
    set logicalSeriesLink(a: StackedFragmentSeries);
    private u9;
    get parentSeries(): StackedSeriesBase;
    set parentSeries(a: StackedSeriesBase);
    protected get_dn(): boolean;
    protected get_du(): boolean;
    jp(): string;
    hc(): number;
    hg(): number;
    resolveLegendIndex(): number;
    bf(): Series;
    rn(): CategoryAxisBase;
    u6(): CategoryFramePreparer;
    r8(): NumericAxisBase;
    vb(a: ISupportsMarkers, b: CategoryFrame, c: number[], d: IDetectsCollisions, e: number, f: number, g: number, h: number): boolean;
    s3(a: CategoryFrame, b: CategorySeriesView): void;
    pl(a: Point, b: boolean, c: boolean): Point;
    ag(): Axis[];
    private vc;
    ve(a: PointCollection, b: List$1<number[]>, c: CategorySeriesView): void;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    tp(a: CategorySeriesView): number;
    ap(a: Axis): AxisRange;
    vd(): number;
    vf(a: IChartLegend): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    mj(a: Rect, b: RenderSurface): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class AreaFragment extends FragmentBase {
    static $t: Type;
    constructor();
    protected bx(): SeriesView;
    vg: AreaFragmentView;
    ly(a: SeriesView): void;
    protected get_de(): boolean;
    protected get_dd(): boolean;
    protected ry(): CategoryTransitionInMode;
    protected vi(a: Point, b: boolean): boolean;
    ev(a: Point, b: boolean): boolean;
    private vh;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    kx(a: boolean, b: SeriesView): void;
    s6(a: CategoryFrame, b: CategorySeriesView): void;
    ms(): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class ColumnFragment extends FragmentBase {
    static $t: Type;
    protected get_dh(): boolean;
    protected get_d2(): boolean;
    protected gu(): number;
    protected ry(): CategoryTransitionInMode;
    constructor();
    protected bx(): SeriesView;
    vh: ColumnFragmentView;
    ly(a: SeriesView): void;
    vk: number;
    vl: number;
    get fragmentXAxis(): CategoryAxisBase;
    get fragmentYAxis(): NumericAxisBase;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    rn(): CategoryAxisBase;
    r8(): NumericAxisBase;
    protected get_c2(): boolean;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    kx(a: boolean, b: SeriesView): void;
    ap(a: Axis): AxisRange;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    e6(): boolean;
    so(a: SeriesView): number;
    sp(a: SeriesView): number;
    sq(a: SeriesView): number;
    pu(a: Point): Rect;
    ev(a: Point, b: boolean): boolean;
    protected ey(a: Point, b: boolean): boolean;
    protected vq(a: Rect, b: number): Rect;
    hz(a: any, b: Point): any;
    ht(a: Point): any;
    hf(a: Point): number;
    hd(a: Point): number;
    vb(a: ISupportsMarkers, b: CategoryFrame, c: number[], d: IDetectsCollisions, e: number, f: number, g: number, h: number): boolean;
    private vj;
    mg(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    s3(a: CategoryFrame, b: CategorySeriesView): void;
    s6(a: CategoryFrame, b: CategorySeriesView): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BarFragment extends ColumnFragment {
    static $t: Type;
    constructor();
    protected get_df(): boolean;
    protected get_d2(): boolean;
    protected get_dh(): boolean;
    protected ry(): CategoryTransitionInMode;
    get barFragmentXAxis(): NumericXAxis;
    get barFragmentYAxis(): CategoryYAxis;
    rn(): CategoryAxisBase;
    protected get_isVertical(): boolean;
    f5(a: Point): number;
    r8(): NumericAxisBase;
    protected vq(a: Rect, b: number): Rect;
    pu(a: Point): Rect;
    ev(a: Point, b: boolean): boolean;
    vb(a: ISupportsMarkers, b: CategoryFrame, c: number[], d: IDetectsCollisions, e: number, f: number, g: number, h: number): boolean;
    ht(a: Point): any;
    hf(a: Point): number;
    tp(a: CategorySeriesView): number;
    protected l3(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class AreaFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class LineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class SplineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class StackedBucketCalculator extends CategoryBucketCalculator {
    static $t: Type;
    constructor(a: CategorySeriesView);
    getBucket(a: number): number[];
    getBucket1(a: AnchoredCategorySeries, b: number, c: number, d: Rect, e: Rect, f: CategoryFrame): number[];
}
/**
 * @hidden
 */
export declare class StackedBarBucketCalculator extends StackedBucketCalculator {
    static $t: Type;
    constructor(a: CategorySeriesView);
    g(a: number): void;
    getBucket(a: number): number[];
    getBucket1(a: AnchoredCategorySeries, b: number, c: number, d: Rect, e: Rect, f: CategoryFrame): number[];
}
/**
 * @hidden
 */
export declare class StackedColumnBucketCalculator extends StackedBucketCalculator {
    static $t: Type;
    constructor(a: CategorySeriesView);
    getBucket(a: number): number[];
    getBucket1(a: AnchoredCategorySeries, b: number, c: number, d: Rect, e: Rect, f: CategoryFrame): number[];
}
/**
 * @hidden
 */
export declare class FragmentBaseValueList extends Base implements IList$1<number> {
    static $t: Type;
    private a;
    constructor(a: FragmentBase);
    indexOf(a: number): number;
    insert(a: number, b: number): void;
    removeAt(a: number): void;
    item(a: number, b?: number): number;
    add(a: number): void;
    clear(): void;
    contains(a: number): boolean;
    copyTo(a: number[], b: number): void;
    get count(): number;
    get isReadOnly(): boolean;
    remove(a: number): boolean;
    getEnumerator(): IEnumerator$1<number>;
    getEnumeratorObject(): IEnumerator;
}
/**
 * @hidden
 */
export declare class LineFragment extends FragmentBase {
    static $t: Type;
    protected get_d1(): boolean;
    constructor();
    protected bx(): SeriesView;
    vg: LineFragmentView;
    ly(a: SeriesView): void;
    protected vi(a: Point, b: boolean): boolean;
    protected get_de(): boolean;
    ev(a: Point, b: boolean): boolean;
    private vh;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    kx(a: boolean, b: SeriesView): void;
    s6(a: CategoryFrame, b: CategorySeriesView): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare abstract class SplineFragmentBase extends SplineSeriesBase {
    static $t: Type;
    private _logicalSeriesLink;
    get logicalSeriesLink(): StackedFragmentSeries;
    set logicalSeriesLink(a: StackedFragmentSeries);
    vq: CategoryLineRasterizer;
    constructor();
    private vs;
    get parentSeries(): StackedSeriesBase;
    set parentSeries(a: StackedSeriesBase);
    protected get_dn(): boolean;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected get_du(): boolean;
    jp(): string;
    pl(a: Point, b: boolean, c: boolean): Point;
    ag(): Axis[];
    private vu;
    hc(): number;
    resolveLegendIndex(): number;
    hg(): number;
    bf(): Series;
    vc(a: CategoryFrame, b: number[], c: CollisionAvoider, d: number, e: number, f: CategorySeriesView, g: number): boolean;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    ap(a: Axis): AxisRange;
    vv(a: CategoryFrame, b: Rect, c: Rect, d: CategoryAxisBase, e: NumericYAxis, f: CategorySeriesView): void;
    s3(a: CategoryFrame, b: CategorySeriesView): void;
    u6(a: CategorySeriesView): number[][];
    u7(a: CategorySeriesView): number[][];
    vl(a: CategorySeriesView): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class SplineAreaFragment extends SplineFragmentBase {
    static $t: Type;
    constructor();
    protected bx(): SeriesView;
    ly(a: SeriesView): void;
    private vw;
    ac(): void;
    protected get_de(): boolean;
    protected get_dd(): boolean;
    protected get_eg(): boolean;
    protected ry(): CategoryTransitionInMode;
    protected vy(a: Point, b: boolean): boolean;
    ev(a: Point, b: boolean): boolean;
    private vx;
    v0: PointCollection;
    kx(a: boolean, b: SeriesView): void;
    s6(a: CategoryFrame, b: CategorySeriesView): void;
    mj(a: Rect, b: RenderSurface): void;
    vz(a: PointCollection, b: List$1<number[]>, c: CategorySeriesView): void;
    tp(a: CategorySeriesView): number;
    ms(): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class SplineFragment extends SplineFragmentBase {
    static $t: Type;
    protected get_eg(): boolean;
    constructor();
    protected bx(): SeriesView;
    vw: SplineFragmentView;
    ly(a: SeriesView): void;
    protected vy(a: Point, b: boolean): boolean;
    protected get_de(): boolean;
    ev(a: Point, b: boolean): boolean;
    private vx;
    kx(a: boolean, b: SeriesView): void;
    s6(a: CategoryFrame, b: CategorySeriesView): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class SplineFragmentBaseValueList extends Base implements IList$1<number> {
    static $t: Type;
    private a;
    constructor(a: SplineFragmentBase);
    indexOf(a: number): number;
    insert(a: number, b: number): void;
    removeAt(a: number): void;
    item(a: number, b?: number): number;
    add(a: number): void;
    clear(): void;
    contains(a: number): boolean;
    copyTo(a: number[], b: number): void;
    get count(): number;
    get isReadOnly(): boolean;
    remove(a: number): boolean;
    getEnumerator(): IEnumerator$1<number>;
    getEnumeratorObject(): IEnumerator;
}
/**
 * @hidden
 */
export declare abstract class StackedSeriesBase extends CategorySeries implements IIsCategoryBased {
    static $t: Type;
    constructor();
    lj(): void;
    protected get_dx(): boolean;
    getHostReferenceValue(): number;
    protected bx(): SeriesView;
    tm: StackedSeriesView;
    ly(a: SeriesView): void;
    lz(a: Rect, b: Rect): void;
    private _series;
    get series(): StackedSeriesCollection;
    set series(a: StackedSeriesCollection);
    hl(): number;
    la(a: (arg1: Series) => boolean): void;
    tn: boolean;
    tp: boolean;
    protected get_isStacked(): boolean;
    seriesCreated: (sender: any, e: StackedSeriesCreatedEventArgs) => void;
    uc: Visibility;
    tv: number;
    tu: number;
    td: number[];
    te: number[];
    tl: StackedSeriesManager;
    ti: StackedSeriesCollection;
    get th(): StackedSeriesCollection;
    private t1;
    private t7;
    private t6;
    mp(a: Point): void;
    ru(a: CategorySeriesView): CategoryFramePreparer;
    s3(a: CategoryFrame, b: CategorySeriesView): void;
    mi(a: boolean): void;
    kx(a: boolean, b: SeriesView): void;
    t2(): void;
    t8(): void;
    protected get_to(): boolean;
    get to(): boolean;
    en(a: any): boolean;
    ap(a: Axis): AxisRange;
    qe(): boolean;
    protected k0(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    tg(): CategorySeriesView;
    ts(): number;
    tt(): number;
    tx(a: StackedFragmentSeries): number;
    tw(a: Point): number;
    tq(a: AnchoredCategorySeries, b: Rect, c: Rect, d: SeriesView): boolean;
    private tr;
    t3(): void;
    s6(a: CategoryFrame, b: CategorySeriesView): void;
    t5(a: AnchoredCategorySeries, b: CategoryFrame, c: CategorySeriesView, d: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    aq(a: Rect): AxisRange;
    mk(): void;
    protected t4(): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    get currentCategoryMode(): CategoryMode;
    get scaler(): ICategoryScaler;
    get yScaler(): IScaler;
    get bucketizer(): IBucketizer;
    get currentMode2Index(): number;
    provideCollisionDetector(): IDetectsCollisions;
    protected eq(): boolean;
    protected get_dn(): boolean;
    mj(a: Rect, b: RenderSurface): void;
    tf: CategoryFrame;
    mg(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    hs(): any;
    get mayContainUnknowns(): boolean;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class HorizontalStackedSeriesBase extends StackedSeriesBase {
    static $t: Type;
    xAxis: CategoryAxisBase;
    protected get_c6(): boolean;
    protected get_ej(): boolean;
    bv(): SeriesPlotAreaMarginHorizontalMode;
    bw(): SeriesPlotAreaMarginVerticalMode;
    yAxis: NumericYAxis;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    ag(): Axis[];
    si(): boolean;
    ms(): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    ug(a: any): boolean;
    uf(a: any): boolean;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedAreaSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    protected get_dd(): boolean;
    constructor();
    ac(): void;
    protected bx(): SeriesView;
    ul: StackedAreaSeriesView;
    ly(a: SeriesView): void;
    ap(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare abstract class VerticalStackedSeriesBase extends StackedSeriesBase {
    static $t: Type;
    xAxis: NumericXAxis;
    yAxis: CategoryYAxis;
    rn(): CategoryAxisBase;
    r8(): NumericAxisBase;
    bv(): SeriesPlotAreaMarginHorizontalMode;
    bw(): SeriesPlotAreaMarginVerticalMode;
    aq(a: Rect): AxisRange;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_isVertical(): boolean;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    si(): boolean;
    protected l3(a: any, b: string, c: any, d: any): void;
    ug(a: any): boolean;
    uf(a: any): boolean;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedBarSeries extends VerticalStackedSeriesBase implements IBarSeries {
    static $t: Type;
    protected get_df(): boolean;
    protected get_d2(): boolean;
    protected gu(): number;
    constructor();
    ac(): void;
    protected bx(): SeriesView;
    ul: StackedBarSeriesView;
    ly(a: SeriesView): void;
    um: number;
    un: number;
    tg(): CategorySeriesView;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    sr(): number;
    ts(): number;
    tt(): number;
    ap(a: Axis): AxisRange;
    en(a: any): boolean;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    protected k0(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    hd(a: Point): number;
    ht(a: Point): any;
    t8(): void;
    tw(a: Point): number;
    tq(a: AnchoredCategorySeries, b: Rect, c: Rect, d: SeriesView): boolean;
    ga(): number;
    t5(a: AnchoredCategorySeries, b: CategoryFrame, c: CategorySeriesView, d: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    getPreferredCategoryMode(): CategoryMode;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedColumnSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    protected get_dh(): boolean;
    protected get_d2(): boolean;
    protected gu(): number;
    constructor();
    protected bx(): SeriesView;
    ul: StackedColumnSeriesView;
    ly(a: SeriesView): void;
    um: number;
    un: number;
    tg(): CategorySeriesView;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    ap(a: Axis): AxisRange;
    ga(): number;
    t5(a: AnchoredCategorySeries, b: CategoryFrame, c: CategorySeriesView, d: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedSplineAreaSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    um: boolean;
    protected gu(): number;
    protected get_dd(): boolean;
    protected get_eg(): boolean;
    constructor();
    ac(): void;
    protected bx(): SeriesView;
    ul: StackedSplineAreaSeriesView;
    ly(a: SeriesView): void;
    ap(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected l3(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedSplineSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    um: boolean;
    protected get_eg(): boolean;
    protected gu(): number;
    constructor();
    ac(): void;
    protected bx(): SeriesView;
    ul: StackedSplineSeriesView;
    ly(a: SeriesView): void;
    ap(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedFragmentSeries extends DependencyObject implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    itemsSource: IEnumerable;
    jk: Brush;
    jf: Brush;
    jt: DoubleCollection;
    js: DoubleCollection;
    jx: PenLineCap;
    ju: PenLineCap;
    ap: boolean;
    private ag;
    ai: boolean;
    bs: number;
    a9: number;
    jr: Color;
    jq: Color;
    ax: boolean;
    private ah;
    an: boolean;
    bt: number;
    ba: number;
    bu: number;
    bb: number;
    jy: PenLineCap;
    jv: PenLineCap;
    aq: boolean;
    aj: boolean;
    gn: DataTemplate;
    gk: DataTemplate;
    go: DataTemplate;
    gl: DataTemplate;
    kh: Visibility;
    kf: Visibility;
    r: LegendItemBadgeShape;
    p: LegendItemBadgeMode;
    q: LegendItemBadgeShape;
    o: LegendItemBadgeMode;
    jl: Brush;
    jg: Brush;
    jm: Brush;
    jh: Brush;
    ke: Style;
    kd: Style;
    gp: DataTemplate;
    gm: DataTemplate;
    t: MarkerType;
    s: MarkerType;
    d8: string;
    bp: number;
    a6: number;
    jn: Brush;
    ji: Brush;
    jo: Brush;
    jj: Brush;
    bd: number;
    a2: number;
    bn: number;
    a4: number;
    w: SeriesOutlineMode;
    v: SeriesOutlineMode;
    bm: number;
    a3: number;
    bq: number;
    a7: number;
    ak: boolean;
    ar: boolean;
    br: number;
    a8: number;
    jz: PenLineCap;
    jw: PenLineCap;
    bv: number;
    bc: number;
    bo: number;
    a5: number;
    ca: any;
    cb: any;
    b6: any;
    ad: (time: number) => number;
    b4: number;
    b5: number;
    ae: (time: number) => number;
    n: CategoryTransitionInMode;
    as: boolean;
    z: TransitionInSpeedType;
    al: boolean;
    by: number;
    m: CategoryTransitionInMode;
    y: TransitionInSpeedType;
    ac: (time: number) => number;
    ab: (time: number) => number;
    bx: number;
    aw: boolean;
    am: boolean;
    e1: string;
    ex: string;
    ez: string;
    b7(a: number, b: number): any;
    ki: Visibility;
    kg: Visibility;
    private _parentSeries;
    get parentSeries(): StackedSeriesBase;
    set parentSeries(a: StackedSeriesBase);
    b3: number;
    aa: SeriesViewer;
    af: IFastItemColumn$1<number>;
    private _visualSeriesLink;
    get visualSeriesLink(): AnchoredCategorySeries;
    set visualSeriesLink(a: AnchoredCategorySeries);
    az: List$1<number>;
    a0: List$1<number>;
    ay: List$1<number[]>;
    at: boolean;
    bz(a: Point): number;
    b8(a: Point): any;
    b2(a: Point, b: boolean): number;
    b1(a: Point, b: boolean): number;
    bk(a: Point, b: boolean, c: boolean): number;
    j5(a: Point, b: boolean, c: boolean): Point;
    j9(a: Point): Rect;
    j(a: Point): Rect[];
    ka(a: Point): Rect;
    k(a: Point): Rect[];
    kb(a: Point): Rect;
    kc(a: Point): Rect;
    bg(a: Point, b: boolean, c: boolean): number;
    j1(a: Point, b: boolean, c: boolean): Point;
    bi(a: Point, b: boolean, c: boolean): number;
    j3(a: Point, b: boolean, c: boolean): Point;
    j6(a: Point, b: boolean, c: boolean): Point;
    bl(a: Point, b: boolean, c: boolean): number;
    j2(a: Point, b: boolean, c: boolean): Point;
    bh(a: Point, b: boolean, c: boolean): number;
    j4(a: Point, b: boolean, c: boolean): Point;
    bj(a: Point, b: boolean, c: boolean): number;
    b0(a: Point): number;
    bf(): number;
    be(a: Point): number;
    b9(a: Point): any;
    ao(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    j7(a: Point): Point;
    j0(a: Point): Point;
    au(a: any): boolean;
    j8(): Rect;
    e5(): void;
    fa(a: Point): void;
    av(a: Point, b: boolean): boolean;
    e4(a: Point): void;
    bw: DomRenderer;
    provideRenderer(a: DomRenderer): void;
    jp: Brush;
    gj(): void;
    fv(): void;
    fx(): void;
    fc(): void;
    fd(): void;
    fg(): void;
    f1(): void;
    fs(): void;
    fe(): void;
    fh(): void;
    f4(): void;
    f5(): void;
    gi(): void;
    f6(): void;
    f7(): void;
    ff(): void;
    fi(): void;
    fo(): void;
    fp(): void;
    fq(): void;
    fn(): void;
    fm(): void;
    fr(): void;
    ft(): void;
    fu(): void;
    fy(): void;
    fz(): void;
    f0(): void;
    fl(): void;
    fb(): void;
    fj(): void;
    f2(): void;
    f3(): void;
    f8(): void;
    f9(): void;
    fw(): void;
    ga(): void;
    gc(): void;
    gb(): void;
    ge(): void;
    gf(): void;
    gg(): void;
    fk(): void;
    gd(): void;
    gh(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected e8(a: string, b: any, c: any): void;
    protected e6(a: any, b: string, c: any, d: any): void;
    e9(): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedSeriesCollection extends ObservableCollection$1<StackedFragmentSeries> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class StackedSeriesFramePreparer extends CategoryFramePreparer {
    static $t: Type;
    constructor(a: number, b: IIsCategoryBased);
    constructor(a: number, b: IIsCategoryBased, c: ISupportsMarkers, d: IProvidesViewport, e: ISupportsErrorBars, f: IBucketizer);
    constructor(a: number, ..._rest: any[]);
    protected j(a: PreparationParams): ValuesHolder;
    protected t(a: PreparationParams, b: ValuesHolder, c: number, d: boolean, e: boolean): number;
    protected l(a: CategoryFrame, b: number[], c: IDetectsCollisions, d: number, e: number, f: number): boolean;
}
/**
 * @hidden
 */
export declare class AreaFragmentView extends AnchoredCategorySeriesView {
    static $t: Type;
    da: AreaFragment;
    as(): void;
    constructor(a: AreaFragment);
    dg: Path;
    di: Path;
    dh: Path;
    dj: Path;
    dc: Path;
    de: Path;
    dd: Path;
    df: Path;
    db(): void;
    cs(): CategoryBucketCalculator;
    protected bb(): void;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    al(a: any): void;
}
/**
 * @hidden
 */
export declare class ColumnFragmentView extends AnchoredCategorySeriesView {
    static $t: Type;
    da: ColumnFragment;
    as(): void;
    constructor(a: ColumnFragment);
    protected de: List$1<Rectangle>;
    db: Pool$1<Rectangle>;
    dc: List$1<number>;
    dd: List$1<number>;
    private dk;
    private df;
    private dh;
    private dg;
    protected be(a: any, b: number): void;
    di(a: Rectangle, b: number, c: number): void;
    protected bf(a: any, b: number): void;
    protected ac(a: number): any;
    private dj;
    protected ab(a: number): any;
    protected a6(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    al(a: any): void;
    getDefaultTooltipTemplate(): string;
}
/**
 * @hidden
 */
export declare class LineFragmentView extends AnchoredCategorySeriesView {
    static $t: Type;
    da: LineFragment;
    constructor(a: LineFragment);
    dg: Path;
    df: Path;
    dh: Path;
    dd: Path;
    dc: Path;
    de: Path;
    db(): void;
    cs(): CategoryBucketCalculator;
    protected bb(): void;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    al(a: any): void;
}
/**
 * @hidden
 */
export declare class SplineAreaFragmentView extends SplineSeriesBaseView {
    static $t: Type;
    private dc;
    as(): void;
    constructor(a: SplineAreaFragment);
    di: Path;
    dk: Path;
    dj: Path;
    dl: Path;
    de: Path;
    dg: Path;
    df: Path;
    dh: Path;
    dd(): void;
    protected bb(): void;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    al(a: any): void;
}
/**
 * @hidden
 */
export declare class SplineFragmentView extends SplineSeriesBaseView {
    static $t: Type;
    dc: SplineFragment;
    constructor(a: SplineFragment);
    cs(): CategoryBucketCalculator;
    di: Path;
    dh: Path;
    dj: Path;
    df: Path;
    de: Path;
    dg: Path;
    dd(): void;
    protected bb(): void;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    al(a: any): void;
}
/**
 * @hidden
 */
export declare class StackedSeriesView extends CategorySeriesView {
    static $t: Type;
    c0: StackedSeriesBase;
    private readonly c1;
    get c2(): Canvas;
    private readonly c3;
    get c4(): Panel;
    constructor(a: StackedSeriesBase);
    cs(): CategoryBucketCalculator;
    ap(): void;
    ar(a: RenderingContext, b: RenderingContext): void;
    protected af(): void;
}
/**
 * @hidden
 */
export declare class StackedBarSeriesView extends StackedSeriesView {
    static $t: Type;
    c5: StackedBarSeries;
    constructor(a: StackedBarSeries);
    cs(): CategoryBucketCalculator;
    as(): void;
}
/**
 * @hidden
 */
export declare class StackedColumnSeriesView extends StackedSeriesView {
    static $t: Type;
    constructor(a: StackedColumnSeries);
    cs(): CategoryBucketCalculator;
    as(): void;
}
/**
 * @hidden
 */
export declare class StackedAreaSeriesView extends StackedSeriesView {
    static $t: Type;
    constructor(a: StackedAreaSeries);
    as(): void;
}
/**
 * @hidden
 */
export declare class StackedSplineAreaSeriesView extends StackedSeriesView {
    static $t: Type;
    constructor(a: StackedSplineAreaSeries);
    as(): void;
    c5(): number;
}
/**
 * @hidden
 */
export declare class StackedSplineSeriesView extends StackedSeriesView {
    static $t: Type;
    constructor(a: StackedSplineSeries);
    as(): void;
    c5(): number;
}
/**
 * @hidden
 */
export declare class StackedSeriesManager extends Base {
    static $t: Type;
    constructor(a: StackedSeriesBase);
    b: StackedSeriesBase;
    f: ObservableCollection$1<AnchoredCategorySeries>;
    c: StackedSeriesCollection;
    e: ObservableCollection$1<AnchoredCategorySeries>;
    d: ObservableCollection$1<AnchoredCategorySeries>;
    j: Canvas;
    k: Panel;
    a(a: StackedFragmentSeries): AnchoredCategorySeries;
    private i;
    h(a: boolean): void;
    private g;
}
