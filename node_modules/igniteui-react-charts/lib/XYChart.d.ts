import { DomainChart } from "./DomainChart";
import { IEnumerable$1, Type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { VerticalAlignment } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { YAxisLabelLocation } from "./YAxisLabelLocation";
import { XAxisLabelLocation } from "./XAxisLabelLocation";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { TitleSettings } from "./TitleSettings";
import { DataSeries } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
/**
 * @hidden
 */
export declare abstract class XYChart extends DomainChart {
    static $t: Type;
    provideContainer(a: any): void;
    protected p7(): void;
    protected qu(a: string, b: any, c: any): void;
    private ty;
    get t0(): (item: any) => string;
    set t0(a: (item: any) => string);
    private tz;
    get t1(): (item: any) => string;
    set t1(a: (item: any) => string);
    private uf;
    get vh(): number;
    set vh(a: number);
    private uh;
    get vj(): number;
    set vj(a: number);
    private ug;
    get vi(): number;
    set vi(a: number);
    private ue;
    get vg(): number;
    set vg(a: number);
    private uw;
    get vy(): number;
    set vy(a: number);
    private uy;
    get v0(): number;
    set v0(a: number);
    private ux;
    get vz(): number;
    set vz(a: number);
    private uv;
    get vx(): number;
    set vx(a: number);
    private zp;
    get z5(): Brush;
    set z5(a: Brush);
    private zw;
    get aac(): Brush;
    set aac(a: Brush);
    private zn;
    get z3(): Brush;
    set z3(a: Brush);
    private zo;
    get z4(): Brush;
    set z4(a: Brush);
    private uq;
    get vs(): number;
    set vs(a: number);
    private u7;
    get v9(): number;
    set v9(a: number);
    private up;
    get vr(): number;
    set vr(a: number);
    private u6;
    get v8(): number;
    set v8(a: number);
    private us;
    get vu(): number;
    set vu(a: number);
    private u9;
    get wb(): number;
    set wb(a: number);
    private ur;
    get vt(): number;
    set vt(a: number);
    private u8;
    get wa(): number;
    set wa(a: number);
    private uo;
    get vq(): number;
    set vq(a: number);
    private u5;
    get v7(): number;
    set v7(a: number);
    private zv;
    get aab(): Brush;
    set aab(a: Brush);
    private z2;
    get aai(): Brush;
    set aai(a: Brush);
    protected qv(a: string, b: any, c: any): void;
    private wh;
    get w5(): string;
    set w5(a: string);
    private wl;
    get ya(): string;
    set ya(a: string);
    private wj;
    get xt(): string;
    set xt(a: string);
    private wn;
    get yy(): string;
    set yy(a: string);
    private y4;
    private y6;
    protected rc(a: DataSeries): void;
    protected abstract tw(): Axis;
    protected abstract tx(): Axis;
    protected y7(a: (arg1: Axis) => void): void;
    protected y8(a: (arg1: Axis) => void, b: string): void;
    protected zd(a: (arg1: Axis) => void, b: boolean): void;
    protected zc(a: (arg1: Axis) => void): void;
    protected pr(a: (arg1: Axis) => void, b: boolean): void;
    protected zb(a: (arg1: TitleSettings) => void): void;
    protected zg(a: (arg1: TitleSettings) => void): void;
    protected ze(a: (arg1: AxisLabelSettings) => void): void;
    protected y9(a: (arg1: AxisLabelSettings) => void): void;
    va(a: number): number;
    vc(a: number): number;
    vb(a: number): number;
    vd(a: number): number;
    protected q9(a: XamDataChart): void;
    static wq(a: CategoryAxisBase, b: IEnumerable$1<DataSeries>): string;
    protected p2(a: XamDataChart): void;
    protected y3(a: Axis): void;
    protected y5(a: Axis): void;
    protected pz(): void;
    protected y1(a: Axis, b: (arg1: AxisLabelSettings) => void): void;
    protected y2(a: Axis, b: (arg1: TitleSettings) => void): void;
    protected qt(a: string, b: any, c: any): void;
    zf(): void;
    za(): void;
    t3(a: YAxisLabelLocation): AxisLabelsLocation;
    t2(a: XAxisLabelLocation): AxisLabelsLocation;
    private wc;
    get we(): any;
    set we(a: any);
    private wd;
    get wf(): any;
    set wf(a: any);
    private zq;
    get z6(): Brush;
    set z6(a: Brush);
    private zx;
    get aad(): Brush;
    set aad(a: Brush);
    private ui;
    get vk(): number;
    set vk(a: number);
    private uz;
    get v1(): number;
    set v1(a: number);
    private uj;
    get vl(): number;
    set vl(a: number);
    private u0;
    get v2(): number;
    set v2(a: number);
    private zs;
    get z8(): Brush;
    set z8(a: Brush);
    private zz;
    get aaf(): Brush;
    set aaf(a: Brush);
    private zt;
    get z9(): Brush;
    set z9(a: Brush);
    private z0;
    get aag(): Brush;
    set aag(a: Brush);
    private uk;
    get vm(): number;
    set vm(a: number);
    private u1;
    get v3(): number;
    set v3(a: number);
    private ul;
    get vn(): number;
    set vn(a: number);
    private u2;
    get v4(): number;
    set v4(a: number);
    private zu;
    get aaa(): Brush;
    set aaa(a: Brush);
    private z1;
    get aah(): Brush;
    set aah(a: Brush);
    private um;
    get vo(): number;
    set vo(a: number);
    private u3;
    get v5(): number;
    set v5(a: number);
    private wi;
    get xk(): string;
    set xk(a: string);
    private wm;
    get yp(): string;
    set yp(a: string);
    private zr;
    get z7(): Brush;
    set z7(a: Brush);
    private zy;
    get aae(): Brush;
    set aae(a: Brush);
    private ud;
    get vf(): number;
    set vf(a: number);
    private uu;
    get vw(): number;
    set vw(a: number);
    private uc;
    get ve(): number;
    set ve(a: number);
    private ut;
    get vv(): number;
    set vv(a: number);
    private un;
    get vp(): number;
    set vp(a: number);
    private u4;
    get v6(): number;
    set v6(a: number);
    private t8;
    get ua(): boolean;
    set ua(a: boolean);
    private t9;
    get ub(): boolean;
    set ub(a: boolean);
    private zi;
    get zl(): HorizontalAlignment;
    set zl(a: HorizontalAlignment);
    private aal;
    get aao(): VerticalAlignment;
    set aao(a: VerticalAlignment);
    private zh;
    get zk(): HorizontalAlignment;
    set zk(a: HorizontalAlignment);
    private zj;
    protected get_zm(): HorizontalAlignment;
    protected set_zm(a: HorizontalAlignment): void;
    get zm(): HorizontalAlignment;
    set zm(a: HorizontalAlignment);
    private aaj;
    get aam(): VerticalAlignment;
    set aam(a: VerticalAlignment);
    private aak;
    get aan(): VerticalAlignment;
    set aan(a: VerticalAlignment);
    private aap;
    get aar(): Visibility;
    set aar(a: Visibility);
    private aaq;
    get aas(): Visibility;
    set aas(a: Visibility);
    private t6;
    protected get_t7(): YAxisLabelLocation;
    protected set_t7(a: YAxisLabelLocation): void;
    get t7(): YAxisLabelLocation;
    set t7(a: YAxisLabelLocation);
    private t4;
    protected get_t5(): XAxisLabelLocation;
    protected set_t5(a: XAxisLabelLocation): void;
    get t5(): XAxisLabelLocation;
    set t5(a: XAxisLabelLocation);
    private wg;
    get ww(): string;
    set ww(a: string);
    private ts;
    get tu(): any[];
    set tu(a: any[]);
    private wk;
    get x1(): string;
    set x1(a: string);
    private tt;
    get tv(): any[];
    set tv(a: any[]);
}
