import { Base, Type, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ScalerParams } from "./ScalerParams";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { CategoryMode } from "./CategoryMode";
import { FramePreparer } from "./FramePreparer";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { List$1 } from "igniteui-react-core";
import { ISupportsMarkers } from "./ISupportsMarkers";
import { IProvidesViewport } from "./IProvidesViewport";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { CategoryFrame } from "./CategoryFrame";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { PreparationParams } from "./PreparationParams";
import { Frame } from "./Frame";
import { ICategoryScaler } from "./ICategoryScaler";
import { ValuesHolder } from "./ValuesHolder";
import { NumericAxisBase } from "./NumericAxisBase";
import { IHasCategoryTrendline } from "./IHasCategoryTrendline";
import { IHasSingleValueCategory } from "./IHasSingleValueCategory";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { ICategorySeriesInteractionManager } from "./ICategorySeriesInteractionManager";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { HighlightingInfo } from "./HighlightingInfo";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { AssigningCategoryMarkerStyleEventArgs } from "./AssigningCategoryMarkerStyleEventArgs";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { Pool$1 } from "igniteui-react-core";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { RenderSurface } from "./RenderSurface";
import { Clipper } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class CategoryBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected c: CategorySeriesView;
    constructor(a: CategorySeriesView);
    e: number;
    f: number;
    d: number;
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    g(a: number): void;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class CategoryFramePreparerBase extends FramePreparer {
    static $t: Type;
    constructor(a: number, b: IIsCategoryBased);
    constructor(a: number, b: IIsCategoryBased, c: ISupportsMarkers, d: IProvidesViewport, e: ISupportsErrorBars, f: IBucketizer);
    constructor(a: number, ..._rest: any[]);
    g: IBucketizer;
    h: IIsCategoryBased;
    protected abstract l(a: CategoryFrame, b: number[], c: IDetectsCollisions, d: number, e: number, f: number): boolean;
    m: boolean;
    private i;
    r(a: ICategoryScaler, b: Rect, c: Rect, d: Rect): number;
    private s;
    d(a: Frame, b: SeriesView): void;
    protected v(a: CategoryFrame, b: SeriesView): void;
    private o;
    protected get q(): List$1<number[]>;
    private p;
    private n;
    protected t(a: PreparationParams, b: ValuesHolder, c: number, d: boolean, e: boolean): number;
    protected k(): boolean;
    protected abstract z(a: ValuesHolder, b: number, c: boolean, d: boolean): void;
    protected abstract u(a: ValuesHolder, b: number, c: boolean): void;
    protected abstract e(a: number, b: ValuesHolder): number[];
    protected f(a: PreparationParams, b: number, c: ValuesHolder, d: number, e: boolean, f: number[], g: number): {
        ret: number[];
        p1?: number;
        p4: boolean;
        p5: number[];
    };
    protected y(a: PreparationParams, b: number, c: boolean, d: ScalerParams, e: ScalerParams, f: boolean, g: boolean): void;
    protected abstract x(a: PreparationParams, b: number[], c: number, d: boolean, e: ScalerParams, f: ScalerParams): void;
    protected w(a: PreparationParams, b: ValuesHolder, c: number): void;
    protected abstract j(a: PreparationParams): ValuesHolder;
}
/**
 * @hidden
 */
export declare class CategoryFramePreparer extends CategoryFramePreparerBase {
    static $t: Type;
    constructor(a: number, b: IIsCategoryBased);
    constructor(a: number, b: IIsCategoryBased, c: ISupportsMarkers, d: IProvidesViewport, e: ISupportsErrorBars, f: IBucketizer);
    constructor(a: number, ..._rest: any[]);
    private aa;
    private ab;
    protected ac: IHasCategoryTrendline;
    protected ad: IHasSingleValueCategory;
    protected l(a: CategoryFrame, b: number[], c: IDetectsCollisions, d: number, e: number, f: number): boolean;
    protected j(a: PreparationParams): ValuesHolder;
    protected x(a: PreparationParams, b: number[], c: number, d: boolean, e: ScalerParams, f: ScalerParams): void;
    protected y(a: PreparationParams, b: number, c: boolean, d: ScalerParams, e: ScalerParams, f: boolean, g: boolean): void;
    protected w(a: PreparationParams, b: ValuesHolder, c: number): void;
    protected z(a: ValuesHolder, b: number, c: boolean, d: boolean): void;
    protected u(a: ValuesHolder, b: number, c: boolean): void;
    protected e(a: number, b: ValuesHolder): number[];
}
/**
 * @hidden
 */
export declare abstract class CategorySeries extends MarkerSeries implements IHasCategoryModePreference, ISupportsErrorBars {
    static $t: Type;
    rt: CategoryFramePreparer;
    protected bx(): SeriesView;
    rx: CategorySeriesView;
    private r6;
    get r7(): ICategorySeriesInteractionManager;
    c1(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    private ss;
    ly(a: SeriesView): void;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    get categoryAxis(): CategoryAxisBase;
    rn(): CategoryAxisBase;
    r8(): NumericAxisBase;
    protected get_c6(): boolean;
    protected get_ej(): boolean;
    protected get_dg(): boolean;
    constructor();
    ac(): void;
    se: boolean;
    sd: boolean;
    protected sa: boolean;
    protected r9: boolean;
    assigningCategoryStyle: (sender: any, args: AssigningCategoryStyleEventArgs) => void;
    assigningCategoryMarkerStyle: (sender: any, args: AssigningCategoryMarkerStyleEventArgs) => void;
    sg(): boolean;
    protected sh(): boolean;
    protected s5(a: AssigningCategoryStyleEventArgs): void;
    protected s4(a: AssigningCategoryMarkerStyleEventArgs): void;
    rh(a: number, b: number): any[];
    kx(a: boolean, b: SeriesView): void;
    bh(): SeriesComponentsForView;
    le(): void;
    sj: boolean;
    protected m5(a: Rect, b: Rect): void;
    rz: CategoryTransitionInMode;
    sf: boolean;
    protected m4(a: Rect, b: Rect): void;
    protected l3(a: any, b: string, c: any, d: any): void;
    protected sc(): boolean;
    protected sb(): boolean;
    sm(a: Point): number;
    protected get_d9(): boolean;
    ar(): CategoryAxisBase;
    hf(a: Point): number;
    abstract getOffsetValue(): number;
    abstract getCategoryWidth(): number;
    ht(a: Point): any;
    hd(a: Point): number;
    f5(a: Point): number;
    private r4;
    private r5;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    protected get_dx(): boolean;
    kv(): void;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    protected sl(): List$1<Marker>;
    protected r3(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected r2(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected r1(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    rq: CategoryFrame;
    rs: CategoryFrame;
    ro: CategoryFrame;
    rr: CategoryFrame;
    rp(): CategoryFrame;
    rw: CategorySeriesRenderManager;
    protected s1(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    s2(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    private sk;
    protected eq(): boolean;
    protected ry(): CategoryTransitionInMode;
    r0: CategoryTransitionSourceFramePreparer;
    protected ky(): void;
    mi(a: boolean): void;
    protected b9(): TransitionInSpeedType;
    protected sn(): number;
    sr(): number;
    get GetErrorBarsXAxis(): Axis;
    get GetErrorBarsYAxis(): Axis;
    s0(a: CategorySeriesView, b: CategoryFrame): void;
    s6(a: CategoryFrame, b: CategorySeriesView): void;
    s3(a: CategoryFrame, b: CategorySeriesView): void;
    so(a: SeriesView): number;
    sp(a: SeriesView): number;
    sq(a: SeriesView): number;
    sz(a: SeriesView): void;
    mj(a: Rect, b: RenderSurface): void;
    s7(): void;
    abstract fetchXAxis(): Axis;
    abstract fetchYAxis(): Axis;
    abstract si(): boolean;
    ru(a: CategorySeriesView): CategoryFramePreparer;
    an(a: Axis): Axis;
    ag(): Axis[];
    static ri(a: List$1<number[]>, b: number, c: Rect, d: Rect, e: boolean): Clipper;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class CategorySeriesView extends MarkerSeriesView implements ISupportsMarkers {
    static $t: Type;
    ct: CategorySeries;
    cw: number;
    cv(a: CategoryFrame): boolean;
    cy(a: CategoryFrame): void;
    constructor(a: CategorySeries);
    updateMarkerTemplate(a: number, b: number, c: number): void;
    cr: CategoryBucketCalculator;
    cs(): CategoryBucketCalculator;
    cu: Pool$1<Marker>;
    get shouldDisplayMarkers(): boolean;
    updateMarkerCount(a: number): void;
    cf(a: (arg1: Marker) => void): void;
    cx(): void;
}
