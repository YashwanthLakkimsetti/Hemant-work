import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { Axis } from "./Axis";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "./HighlightingInfo";
import { ScatterFrame } from "./ScatterFrame";
import { SeriesView } from "./SeriesView";
import { Point, Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { AxisRange } from "./AxisRange";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { Size } from "igniteui-react-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { IErrorBarCalculator } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class ScatterBase extends MarkerSeries implements ISupportsErrorBars, ITrendLineSeries {
    static $t: Type;
    protected bx(): SeriesView;
    ku(): void;
    ly(a: SeriesView): void;
    rx: ScatterBaseView;
    protected get_ec(): boolean;
    ag(): Axis[];
    hw(a: any, b: string): any;
    c1(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    protected bp(): SeriesHitTestMode;
    pw(a: Point): Rect;
    ev(a: Point, b: boolean): boolean;
    constructor();
    rw: ScatterAxisInfoCache;
    xAxis: NumericXAxis;
    yAxis: NumericYAxis;
    td: string;
    get sc(): IFastItemColumn$1<number>;
    set sc(a: IFastItemColumn$1<number>);
    private sa;
    tl: string;
    get sd(): IFastItemColumn$1<number>;
    set sd(a: IFastItemColumn$1<number>);
    private sb;
    s9: string;
    th: string;
    tb: string;
    tj: string;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get uw(): Brush;
    set uw(a: Brush);
    static readonly t9: DependencyProperty;
    trendLineThickness: number;
    uy: PenLineCap;
    ux: DoubleCollection;
    trendLinePeriod: number;
    ro: CollisionAvoidanceType;
    get GetErrorBarsXAxis(): Axis;
    get GetErrorBarsYAxis(): Axis;
    sy: number;
    sx: number;
    r8: ScatterItemSearchMode;
    sw: number;
    le(): void;
    ry: ScatterErrorBarSettings;
    protected l3(a: any, b: string, c: any, d: any): void;
    protected sn(): boolean;
    protected sm(): boolean;
    sh(a: any): boolean;
    sg(a: any): boolean;
    private t8;
    private uz;
    private u0;
    private tn;
    protected sl(a: string, b: FastItemsSourceEventAction): boolean;
    protected k0(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    tz(a: ScatterFrame): void;
    t0(a: ScatterFrame, b: Clipper): void;
    ap(a: Axis): AxisRange;
    ht(a: Point): any;
    private r5;
    get r6(): ScatterItemSearchMode;
    set r6(a: ScatterItemSearchMode);
    protected r7(): ScatterItemSearchMode;
    hd(a: Point): number;
    f5(a: Point): number;
    protected ss(a: Point): number;
    private rh;
    private ri;
    protected sr(a: Point): number;
    private tq;
    protected get_sk(): boolean;
    protected get sk(): boolean;
    private sv;
    protected su(a: Point): number;
    protected st(a: Point): number;
    pl(a: Point, b: boolean, c: boolean): Point;
    en(a: any): boolean;
    protected m4(a: Rect, b: Rect): void;
    protected m5(a: Rect, b: Rect): void;
    r2: ScatterFrame;
    r4: ScatterFrame;
    r0: ScatterFrame;
    r1(): ScatterFrame;
    to(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    tw(a: ScatterFrame, b: ScatterBaseView): void;
    kx(a: boolean, b: SeriesView): void;
    sj: boolean;
    si: boolean;
    protected sf: boolean;
    protected se: boolean;
    protected get_dx(): boolean;
    private rs;
    private rt;
    protected rq(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rr(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    p0(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    protected rp(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningScatterStyle: (sender: any, args: AssigningScatterStyleEventArgs) => void;
    assigningScatterMarkerStyle: (sender: any, args: AssigningScatterMarkerStyleEventArgs) => void;
    protected sp(): boolean;
    protected so(): boolean;
    t7(a: ScatterFrame, b: ScatterBaseView): void;
    rk(a: number, b: number): any[];
    protected rl(a: number, b: number): any[];
    protected r9: ScatterSeriesRenderManager;
    tp(a: ScatterBaseView, b: ScatterFrame): void;
    protected ts(a: number, b: number, c: boolean): void;
    protected tr(a: number, b: number, c: boolean): void;
    protected t2(a: AssigningScatterStyleEventArgs): void;
    protected t1(a: AssigningScatterMarkerStyleEventArgs): void;
    tu(a: ScatterFrame, b: ScatterBaseView): void;
    tx(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    tv(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    tt(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: any, e: number, f: number, g: boolean): {
        p4?: number;
        p5?: number;
    };
    ty(a: ErrorBarsHelper, b: IErrorBarCalculator, c: number, d: number, e: number, f: boolean): {
        p2?: number;
        p3?: number;
        p4?: number;
    };
    t4(a: ScatterFrame, b: ScatterBaseView): void;
    private t5;
    private t6;
    e9(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    mi(a: boolean): void;
    protected mv(): void;
    r3: ScatterFrame;
    mj(a: Rect, b: RenderSurface): void;
    private rz;
    mg(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    t3(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    rj(a: ScatterBaseView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    sq(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    protected k7(a: any): void;
    gc(): number;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    au: AssigningScatterMarkerStyleEventArgs;
    av: AssigningScatterStyleEventArgs;
    aw(a: ScatterBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ax(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ay(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class ScatterBaseView extends MarkerSeriesView {
    static $t: Type;
    cv: MarkerManagerBase;
    protected ct: Point[];
    protected cw: ScatterBase;
    protected c1: List$1<number>;
    constructor(a: ScatterBase);
    private dc;
    private dd;
    cx: ScatterTrendLineManager;
    as(): void;
    private db;
    de(a: Marker): Size;
    protected cu(): MarkerManagerBase;
    protected c9(a: IDictionary$2<any, OwnedPoint>): void;
    c0(): List$1<Marker>;
    cs(): Point[];
    protected cr(): Point[];
    protected cz(): List$1<number>;
    c2(): void;
    c7(a: PathGeometry): void;
    c3(): void;
    c8(a: PathGeometry): void;
    da(): void;
    cy: HashPool$2<any, Marker>;
    cf(a: (arg1: Marker) => void): void;
    c5(a: (arg1: Marker) => void): void;
    c6(): void;
    protected a5(a: RenderingContext, b: boolean): void;
    c4(a: boolean): void;
    getDefaultTooltipTemplate(): string;
}
