import { __extends } from "tslib";
import { IgrAxis } from "./igr-axis";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { DataToolTipLayer } from "./DataToolTipLayer";
import { ensureBool, ensureEnum, brushToString, stringToBrush, arrayFindByName } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays grouped tooltips with summaries for series.
 * THIS IS A COMMUNITY TECHNOLOGY PREVIEW, not for use in production.
*/
var IgrDataToolTipLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrDataToolTipLayer, _super);
    function IgrDataToolTipLayer(props) {
        return _super.call(this, props) || this;
    }
    IgrDataToolTipLayer.prototype.createImplementation = function () {
        return new DataToolTipLayer();
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "isAnnotationHoverLayer", {
        /**
         * Gets whether the series is an annotation layer displayed only when hovering over the chart.
        */
        get: function () {
            return this.i.db;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "isDefaultTooltipBehaviorDisabled", {
        /**
         * Gets whether the default tooltip behaviors for the chart are disabled if this layer is present.
        */
        get: function () {
            return this.i.dk;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "targetAxis", {
        /**
         * Gets or sets the Axis to target this annotation to. If null, this annotation layer will not render content.
        */
        get: function () {
            if (this.i.rg == null) {
                return null;
            }
            if (!this.i.rg.externalObject) {
                var e = IgrAxis._createFromInternal(this.i.rg);
                if (e) {
                    e._implementation = this.i.rg;
                }
                this.i.rg.externalObject = e;
            }
            return this.i.rg.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.rg = null : this.i.rg = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "useInterpolation", {
        /**
         * Gets or sets whether to use value interpolation when drawing the tooltips.
        */
        get: function () {
            return this.i.su;
        },
        set: function (v) {
            this.i.su = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupingMode", {
        /**
         * Gets or sets the grouping mode to apply to use for the tooltip layer.
        */
        get: function () {
            return this.i.ry;
        },
        set: function (v) {
            this.i.ry = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "actualGroupingMode", {
        /**
         * Gets the actual resolved tooltip layer grouping mode.
        */
        get: function () {
            return this.i.rx;
        },
        set: function (v) {
            this.i.rx = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "positionOffsetX", {
        /**
         * Gets or sets the offset of the tooltip layer on the X axis.
        */
        get: function () {
            return this.i.s3;
        },
        set: function (v) {
            this.i.s3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "positionOffsetY", {
        /**
         * Gets or sets the offset of the tooltip layer on the Y axis.
        */
        get: function () {
            return this.i.s4;
        },
        set: function (v) {
            this.i.s4 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "defaultPositionOffsetX", {
        /**
         * Gets or sets the default offset of the tooltip layer on the X axis.
        */
        get: function () {
            return this.i.s1;
        },
        set: function (v) {
            this.i.s1 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "defaultPositionOffsetY", {
        /**
         * Gets or sets the default offset of the tooltip layer on the Y axis.
        */
        get: function () {
            return this.i.s2;
        },
        set: function (v) {
            this.i.s2 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupedPositionModeX", {
        /**
         * Gets or sets the tooltip position mode on the X axis for grouped series.
        */
        get: function () {
            return this.i.rq;
        },
        set: function (v) {
            this.i.rq = ensureEnum(DataTooltipGroupedPositionX_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "actualGroupedPositionModeX", {
        /**
         * Gets the actual resolved tooltip position mode on the X axis for grouped series.
        */
        get: function () {
            return this.i.rp;
        },
        set: function (v) {
            this.i.rp = ensureEnum(DataTooltipGroupedPositionX_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupedPositionModeY", {
        /**
         * Gets or sets the tooltip position mode on the Y axis for grouped series.
        */
        get: function () {
            return this.i.ru;
        },
        set: function (v) {
            this.i.ru = ensureEnum(DataTooltipGroupedPositionY_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "actualGroupedPositionModeY", {
        /**
         * Gets the actual resolved tooltip position mode on the Y axis for grouped series.
        */
        get: function () {
            return this.i.rt;
        },
        set: function (v) {
            this.i.rt = ensureEnum(DataTooltipGroupedPositionY_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "shouldUpdateWhenSeriesDataChanges", {
        /**
         * Gets or sets whether the data legend should update when the series data is mutated.
        */
        get: function () {
            return this.i.st;
        },
        set: function (v) {
            this.i.st = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "includedSeries", {
        /**
         * Gets or sets indexes or names of series to include in displaying in the data legend, e.g. "0, 1"
        */
        get: function () {
            return this.i.rd;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.rd = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "excludedSeries", {
        /**
         * Gets or sets indexes or names of series to exclude from displaying in the data legend, e.g. "0, 1"
         * The ExcludedSeries property takes precedences over values of IncludedSeries property
        */
        get: function () {
            return this.i.q8;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.q8 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "includedColumns", {
        /**
         * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
         * The ExcludedColumns property takes precedences over values of IncludedColumns property
        */
        get: function () {
            return this.i.rc;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.rc = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "excludedColumns", {
        /**
         * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
         * The ExcludedColumns property takes precedences over values of IncludedColumns property
        */
        get: function () {
            return this.i.q7;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.q7 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatAbbreviation", {
        /**
         * Gets or sets mode for abbreviating large numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.rh;
        },
        set: function (v) {
            this.i.rh = ensureEnum(DataAbbreviationMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatMaxFractions", {
        /**
         * Gets or sets maximum digits for formating numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.t3;
        },
        set: function (v) {
            this.i.t3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatMinFractions", {
        /**
         * Gets or sets minimum digits for formating numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.t4;
        },
        set: function (v) {
            this.i.t4 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatMode", {
        /**
         * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
        */
        get: function () {
            return this.i.rn;
        },
        set: function (v) {
            this.i.rn = ensureEnum(DataLegendValueMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatCulture", {
        /**
         * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.vy;
        },
        set: function (v) {
            this.i.vy = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatUseGrouping", {
        /**
         * Gets or sets whether or not use groupping sperator, e.g, 15,000 for 15000
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.sv;
        },
        set: function (v) {
            this.i.sv = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatString", {
        /**
         * Gets or sets the format string for values displayed in the data legend.
        */
        get: function () {
            return this.i.v4;
        },
        set: function (v) {
            this.i.v4 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the ValueFormatString string.
        */
        get: function () {
            return this.i.re;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.re = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginBottom", {
        get: function () {
            return this.i.yv ? this.i.yv.bottom : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.yv.bottom = +v;
            this.i.yv = this.i.yv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginLeft", {
        get: function () {
            return this.i.yv ? this.i.yv.left : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.yv.left = +v;
            this.i.yv = this.i.yv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginRight", {
        get: function () {
            return this.i.yv ? this.i.yv.right : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.yv.right = +v;
            this.i.yv = this.i.yv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginTop", {
        get: function () {
            return this.i.yv ? this.i.yv.top : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.yv.top = +v;
            this.i.yv = this.i.yv;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureValueRowMargin = function () {
        if (this.i.yv) {
            return;
        }
        this.i.yv = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowVisible", {
        /**
         * Gets or sets whether to show series rows.
        */
        get: function () {
            return this.i.sw;
        },
        set: function (v) {
            this.i.sw = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextWhenMissingData", {
        /**
         * Gets or sets text displayed when data column is missing a value, e.g. "no data"
        */
        get: function () {
            return this.i.wd;
        },
        set: function (v) {
            this.i.wd = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextUseSeriesColors", {
        /**
         * Gets or sets whether to use series colors when displaying values in the legend
        */
        get: function () {
            return this.i.sx;
        },
        set: function (v) {
            this.i.sx = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginBottom", {
        get: function () {
            return this.i.yw ? this.i.yw.bottom : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.yw.bottom = +v;
            this.i.yw = this.i.yw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginLeft", {
        get: function () {
            return this.i.yw ? this.i.yw.left : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.yw.left = +v;
            this.i.yw = this.i.yw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginRight", {
        get: function () {
            return this.i.yw ? this.i.yw.right : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.yw.right = +v;
            this.i.yw = this.i.yw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginTop", {
        get: function () {
            return this.i.yw ? this.i.yw.top : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.yw.top = +v;
            this.i.yw = this.i.yw;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureValueTextMargin = function () {
        if (this.i.yw) {
            return;
        }
        this.i.yw = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.yg);
        },
        set: function (v) {
            this.i.yg = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.sk == null) {
                return null;
            }
            return this.i.sk.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.sk = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatString", {
        /**
         * Gets or sets the format string for header text displayed in the data legend.
        */
        get: function () {
            return this.i.um;
        },
        set: function (v) {
            this.i.um = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the HeaderFormatString string.
        */
        get: function () {
            return this.i.rb;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.rb = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatCulture", {
        /**
         * Gets or sets globalization culture when displaying header as date time
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.ui;
        },
        set: function (v) {
            this.i.ui = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatDate", {
        /**
         * Gets or sets date format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.ri;
        },
        set: function (v) {
            this.i.ri = ensureEnum(DataLegendHeaderDateMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatTime", {
        /**
         * Gets or sets time format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.rj;
        },
        set: function (v) {
            this.i.rj = ensureEnum(DataLegendHeaderTimeMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerText", {
        /**
         * Gets or sets the HeaderText for the data legend.
        */
        get: function () {
            return this.i.ur;
        },
        set: function (v) {
            this.i.ur = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextColor", {
        /**
         * Gets or sets the header text color.
        */
        get: function () {
            return brushToString(this.i.x8);
        },
        set: function (v) {
            this.i.x8 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginBottom", {
        get: function () {
            return this.i.yp ? this.i.yp.bottom : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.yp.bottom = +v;
            this.i.yp = this.i.yp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginLeft", {
        get: function () {
            return this.i.yp ? this.i.yp.left : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.yp.left = +v;
            this.i.yp = this.i.yp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginRight", {
        get: function () {
            return this.i.yp ? this.i.yp.right : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.yp.right = +v;
            this.i.yp = this.i.yp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginTop", {
        get: function () {
            return this.i.yp ? this.i.yp.top : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.yp.top = +v;
            this.i.yp = this.i.yp;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureHeaderTextMargin = function () {
        if (this.i.yp) {
            return;
        }
        this.i.yp = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginBottom", {
        get: function () {
            return this.i.yo ? this.i.yo.bottom : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.yo.bottom = +v;
            this.i.yo = this.i.yo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginLeft", {
        get: function () {
            return this.i.yo ? this.i.yo.left : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.yo.left = +v;
            this.i.yo = this.i.yo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginRight", {
        get: function () {
            return this.i.yo ? this.i.yo.right : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.yo.right = +v;
            this.i.yo = this.i.yo;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginTop", {
        get: function () {
            return this.i.yo ? this.i.yo.top : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.yo.top = +v;
            this.i.yo = this.i.yo;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureHeaderRowMargin = function () {
        if (this.i.yo) {
            return;
        }
        this.i.yo = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowVisible", {
        /**
         * Gets or sets whether to show Header row.
        */
        get: function () {
            return this.i.sm;
        },
        set: function (v) {
            this.i.sm = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextStyle", {
        /**
         * Gets or Sets the style to use for the header text.
        */
        get: function () {
            if (this.i.sc == null) {
                return null;
            }
            return this.i.sc.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.sc = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextColor", {
        /**
         * Gets or sets the summary text color.
        */
        get: function () {
            return brushToString(this.i.yb);
        },
        set: function (v) {
            this.i.yb = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextStyle", {
        /**
         * Gets or Sets the style to use for the summary text.
        */
        get: function () {
            if (this.i.sf == null) {
                return null;
            }
            return this.i.sf.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.sf = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryType", {
        /**
         * Gets or sets the SummaryType for the data legend.
        */
        get: function () {
            return this.i.rl;
        },
        set: function (v) {
            this.i.rl = ensureEnum(DataLegendSummaryType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleText", {
        /**
         * Gets or sets the SummaryTitleText for the data legend.
        */
        get: function () {
            return this.i.va;
        },
        set: function (v) {
            this.i.va = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginBottom", {
        get: function () {
            return this.i.ys ? this.i.ys.bottom : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.ys.bottom = +v;
            this.i.ys = this.i.ys;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginLeft", {
        get: function () {
            return this.i.ys ? this.i.ys.left : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.ys.left = +v;
            this.i.ys = this.i.ys;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginRight", {
        get: function () {
            return this.i.ys ? this.i.ys.right : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.ys.right = +v;
            this.i.ys = this.i.ys;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginTop", {
        get: function () {
            return this.i.ys ? this.i.ys.top : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.ys.top = +v;
            this.i.ys = this.i.ys;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureSummaryTitleTextMargin = function () {
        if (this.i.ys) {
            return;
        }
        this.i.ys = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginBottom", {
        get: function () {
            return this.i.yr ? this.i.yr.bottom : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.yr.bottom = +v;
            this.i.yr = this.i.yr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginLeft", {
        get: function () {
            return this.i.yr ? this.i.yr.left : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.yr.left = +v;
            this.i.yr = this.i.yr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginRight", {
        get: function () {
            return this.i.yr ? this.i.yr.right : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.yr.right = +v;
            this.i.yr = this.i.yr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginTop", {
        get: function () {
            return this.i.yr ? this.i.yr.top : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.yr.top = +v;
            this.i.yr = this.i.yr;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureSummaryRowMargin = function () {
        if (this.i.yr) {
            return;
        }
        this.i.yr = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryValueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.yd);
        },
        set: function (v) {
            this.i.yd = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryValueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.sh == null) {
                return null;
            }
            return this.i.sh.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.sh = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryLabelText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.u5;
        },
        set: function (v) {
            this.i.u5 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryLabelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.ya);
        },
        set: function (v) {
            this.i.ya = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryLabelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.se == null) {
                return null;
            }
            return this.i.se.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.se = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryUnitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.vg;
        },
        set: function (v) {
            this.i.vg = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryUnitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.yc);
        },
        set: function (v) {
            this.i.yc = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryUnitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.sg == null) {
                return null;
            }
            return this.i.sg.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.sg = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginBottom", {
        get: function () {
            return this.i.yn ? this.i.yn.bottom : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.yn.bottom = +v;
            this.i.yn = this.i.yn;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginLeft", {
        get: function () {
            return this.i.yn ? this.i.yn.left : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.yn.left = +v;
            this.i.yn = this.i.yn;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginRight", {
        get: function () {
            return this.i.yn ? this.i.yn.right : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.yn.right = +v;
            this.i.yn = this.i.yn;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginTop", {
        get: function () {
            return this.i.yn ? this.i.yn.top : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.yn.top = +v;
            this.i.yn = this.i.yn;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureBadgeMargin = function () {
        if (this.i.yn) {
            return;
        }
        this.i.yn = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeShape", {
        /**
         * Gets or sets the BadgeShape for the data legend.
        */
        get: function () {
            return this.i.r2;
        },
        set: function (v) {
            this.i.r2 = ensureEnum(LegendItemBadgeShape_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsDisplayMode", {
        /**
         * Gets or sets the UnitsMode for the data legend.
        */
        get: function () {
            return this.i.rm;
        },
        set: function (v) {
            this.i.rm = ensureEnum(DataLegendUnitsMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.vr;
        },
        set: function (v) {
            this.i.vr = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.yf);
        },
        set: function (v) {
            this.i.yf = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginBottom", {
        get: function () {
            return this.i.yu ? this.i.yu.bottom : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.yu.bottom = +v;
            this.i.yu = this.i.yu;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginLeft", {
        get: function () {
            return this.i.yu ? this.i.yu.left : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.yu.left = +v;
            this.i.yu = this.i.yu;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginRight", {
        get: function () {
            return this.i.yu ? this.i.yu.right : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.yu.right = +v;
            this.i.yu = this.i.yu;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginTop", {
        get: function () {
            return this.i.yu ? this.i.yu.top : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.yu.top = +v;
            this.i.yu = this.i.yu;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureUnitsTextMargin = function () {
        if (this.i.yu) {
            return;
        }
        this.i.yu = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.sj == null) {
                return null;
            }
            return this.i.sj.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.sj = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginBottom", {
        get: function () {
            return this.i.yt ? this.i.yt.bottom : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.yt.bottom = +v;
            this.i.yt = this.i.yt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginLeft", {
        get: function () {
            return this.i.yt ? this.i.yt.left : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.yt.left = +v;
            this.i.yt = this.i.yt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginRight", {
        get: function () {
            return this.i.yt ? this.i.yt.right : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.yt.right = +v;
            this.i.yt = this.i.yt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginTop", {
        get: function () {
            return this.i.yt ? this.i.yt.top : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.yt.top = +v;
            this.i.yt = this.i.yt;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureTitleTextMargin = function () {
        if (this.i.yt) {
            return;
        }
        this.i.yt = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextColor", {
        /**
         * Gets or sets the display text color.
        */
        get: function () {
            return brushToString(this.i.ye);
        },
        set: function (v) {
            this.i.ye = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextStyle", {
        /**
         * Gets or Sets the style to use for the display text.
        */
        get: function () {
            if (this.i.si == null) {
                return null;
            }
            return this.i.si.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.si = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelDisplayMode", {
        /**
         * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
        */
        get: function () {
            return this.i.rk;
        },
        set: function (v) {
            this.i.rk = ensureEnum(DataLegendLabelMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.x9);
        },
        set: function (v) {
            this.i.x9 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginBottom", {
        get: function () {
            return this.i.yq ? this.i.yq.bottom : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.yq.bottom = +v;
            this.i.yq = this.i.yq;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginLeft", {
        get: function () {
            return this.i.yq ? this.i.yq.left : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.yq.left = +v;
            this.i.yq = this.i.yq;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginRight", {
        get: function () {
            return this.i.yq ? this.i.yq.right : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.yq.right = +v;
            this.i.yq = this.i.yq;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginTop", {
        get: function () {
            return this.i.yq ? this.i.yq.top : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.yq.top = +v;
            this.i.yq = this.i.yq;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureLabelTextMargin = function () {
        if (this.i.yq) {
            return;
        }
        this.i.yq = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.sd == null) {
                return null;
            }
            return this.i.sd.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.sd = fi;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
            return this.targetAxis;
        }
        if (this.valueFormatSpecifiers != null && arrayFindByName(this.valueFormatSpecifiers, name)) {
            return arrayFindByName(this.valueFormatSpecifiers, name);
        }
        if (this.headerFormatSpecifiers != null && arrayFindByName(this.headerFormatSpecifiers, name)) {
            return arrayFindByName(this.headerFormatSpecifiers, name);
        }
        return null;
    };
    IgrDataToolTipLayer.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.targetAxis && this.targetAxis._styling) {
            this.targetAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    IgrDataToolTipLayer.prototype.hideToolTips = function () {
        this.i.ld();
    };
    return IgrDataToolTipLayer;
}(IgrAnnotationLayer));
export { IgrDataToolTipLayer };
