/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { typeCast, runOn, markType } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Defaults } from "./Defaults";
import { ISortingAxis_$type } from "./ISortingAxis";
/**
 * @hidden
 */
var SplineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SplineSeries, _super);
    function SplineSeries() {
        var _this = _super.call(this) || this;
        _this.vq = null;
        _this.vq = new CategoryLineRasterizer();
        _this.ab = SplineSeries.$;
        return _this;
    }
    SplineSeries.prototype.get_eg = function () {
        return true;
    };
    SplineSeries.prototype.bx = function () {
        return new SplineSeriesView(this);
    };
    SplineSeries.prototype.ly = function (a) {
        _super.prototype.ly.call(this, a);
        this.vr = a;
    };
    SplineSeries.prototype.preferredCategoryMode = function (a) {
        return 0;
    };
    SplineSeries.prototype.kx = function (a, b) {
        _super.prototype.kx.call(this, a, b);
        var c = b;
        c.dd();
    };
    SplineSeries.prototype.s6 = function (a, b) {
        _super.prototype.s6.call(this, a, b);
        var c = b;
        var d = c.cr.d;
        var e = typeCast(SplineSeriesView.$, b);
        var f = a.f;
        var g = this.getEffectiveViewport1(b);
        this.rw.a0(this, this.sg(), runOn(this, this.rh), this.so(b), this.sp(b));
        var h = false;
        var i = this.rw.b;
        if (i != null) {
            h = true;
        }
        if (h) {
            var j = new ScalerParams(0, b.bv, b.bu, this.un.cg, g);
            this.s2(f, -1, this.valueColumn.count, this.un, j, b.q);
        }
        var k = e.dj;
        var l = e.dk;
        var m = e.di;
        this.rw.ad(k, true, false, true, false);
        this.rw.ad(l, true, false, true, false);
        this.rw.ad(m, false, true, false, false);
        m._opacity = 0.75 * this.rw.j;
        if (b.cv(a)) {
            e.de(f.count, f, true, 1, this.te(f, f.count - 1, b.bu, b.bv), d, this.ft);
            b.cy(a);
        }
    };
    Object.defineProperty(SplineSeries.prototype, "useHighMarkerFidelity", {
        get: function () {
            return this.sj;
        },
        enumerable: false,
        configurable: true
    });
    SplineSeries.$t = markType(SplineSeries, 'SplineSeries', SplineSeriesBase.$);
    return SplineSeries;
}(SplineSeriesBase));
export { SplineSeries };
/**
 * @hidden
 */
var SplineSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SplineSeriesView, _super);
    function SplineSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.dc = null;
        _this.dm = new Path();
        _this.dl = new Path();
        _this.dn = new Path();
        _this.dh = new Path();
        _this.dg = new Path();
        _this.df = new Path();
        _this.dc = a;
        return _this;
    }
    SplineSeriesView.prototype.as = function () {
        _super.prototype.as.call(this);
        if (!this.q) {
            this.dc.qc = Defaults.e;
        }
    };
    Object.defineProperty(SplineSeriesView.prototype, "dj", {
        get: function () {
            return this.dm;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplineSeriesView.prototype, "dk", {
        get: function () {
            return this.dn;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplineSeriesView.prototype, "di", {
        get: function () {
            return this.dl;
        },
        enumerable: false,
        configurable: true
    });
    SplineSeriesView.prototype.dd = function () {
        this.dl.ak = null;
        this.dm.ak = null;
        this.dn.ak = null;
        this.aq();
    };
    SplineSeriesView.prototype.de = function (a, b, c, d, e, f, g) {
        this.dc.vq.a = typeCast(ISortingAxis_$type, this.ct.fetchXAxis()) !== null ? true : false;
        this.dc.vq.m(this.dm, this.dl, this.dn, a, b, c, d, e, f, g);
        this.aq();
    };
    SplineSeriesView.prototype.bc = function () {
        _super.prototype.bc.call(this);
        this.dg.ak = this.dm.ak;
        this.dh.ak = this.dn.ak;
        this.df.ak = this.dl.ak;
        var a = this.bo();
        this.dg._stroke = a;
        this.dg.ac = this.e.fu + 3;
        this.dh._stroke = a;
        this.dh.ac = this.e.fu + 3;
        this.df._fill = a;
        this.df._opacity = 1;
    };
    SplineSeriesView.prototype.a6 = function (a, b) {
        _super.prototype.a6.call(this, a, b);
        if (a.d) {
            if (b) {
                a.s(this.df);
                a.s(this.dg);
                a.s(this.dh);
            }
            else {
                a.s(this.dl);
                a.s(this.dm);
                a.s(this.dn);
            }
        }
    };
    SplineSeriesView.prototype.al = function (a) {
        _super.prototype.al.call(this, a);
        this.e.a8.exportPathData(a, this.dm, "lowerShape", ["Lower", "Main"]);
        this.e.a8.exportPathData(a, this.dn, "upperShape", ["Upper"]);
        this.e.a8.exportPathData(a, this.dl, "translucentShape", ["Translucent"]);
    };
    SplineSeriesView.$t = markType(SplineSeriesView, 'SplineSeriesView', SplineSeriesBaseView.$);
    return SplineSeriesView;
}(SplineSeriesBaseView));
export { SplineSeriesView };
