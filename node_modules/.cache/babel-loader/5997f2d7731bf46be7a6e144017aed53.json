{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { CategoryChart } from './CategoryChart';\nimport { CategoryChartType_$type } from './CategoryChartType';\nimport { CategorySeriesMarkerCollisionAvoidance_$type } from './CategorySeriesMarkerCollisionAvoidance';\nimport { CategoryTransitionInMode_$type } from './CategoryTransitionInMode';\nimport { TransitionInSpeedType_$type } from './TransitionInSpeedType';\nimport { fromBrushCollection, toBrushCollection, ensureEnum, ensureBool, NamePatcher } from \"igniteui-react-core\";\nimport { IgrXYChart } from './igr-xy-chart';\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { DataSeriesType } from \"igniteui-react-core\";\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { IgrCategoryXAxis } from './igr-category-x-axis';\nimport { IgrNumericYAxis } from './igr-numeric-y-axis';\nimport { AxisRangeBufferMode_$type } from './AxisRangeBufferMode';\nimport { AutoMarginsAndAngleUpdateMode_$type } from './AutoMarginsAndAngleUpdateMode';\n/**\n * Represents a chart with an ordinal X-axis and a numeric Y-axis.\n*\n* **Ignite UI for React Category Chart** - [Documentation](https://www.infragistics.com/products/ignite-ui-react/react/components/CategoryChart.html)\n*\n* The Ignite UI Category Chart is a lightweight, highly performant chart. It can be easily configured to display category data using an extremely simple and intuitive API. All you need to do is provide your data to the chart and it will take care of everything else.\n*\n* Example:\n*\n* ```ts\n* <IgrCategoryChart\n* \tdataSource={this.state.data} />\n* ```\n*/\n\nvar IgrCategoryChart =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrCategoryChart, _super);\n\n  function IgrCategoryChart(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._dataSource = null;\n    _this._defaultTooltips = null;\n    _this._uniqueTooltipId = 0;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._getMainRef = _this._getMainRef.bind(_this);\n    _this._tooltipRef = _this._tooltipRef.bind(_this);\n    _this._activeTooltipElements = new Map();\n    _this._activeTooltips = new Map();\n    _this._currentTooltips = [];\n\n    if (document) {\n      _this._container = document.createElement(\"div\");\n      _this._container.style.display = \"block\";\n      _this._container.style.width = \"100%\";\n      _this._container.style.height = \"100%\";\n    }\n\n    var root;\n    root = _this._container;\n\n    if (_this._container != null) {\n      root = _this._container;\n    }\n\n    var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n    _this._wrapper = ren;\n    var chart = _this.i;\n    _this._chart = chart;\n\n    if (chart.xAxis) {\n      var x = new IgrCategoryXAxis(null);\n\n      x._provideRenderer(ren);\n\n      x._implementation = chart.xAxis;\n      chart.xAxis.externalObject = x;\n    }\n\n    if (chart.yAxis) {\n      var y = new IgrNumericYAxis(null);\n\n      y._provideRenderer(ren);\n\n      y._implementation = chart.yAxis;\n      chart.yAxis.externalObject = y;\n    }\n\n    chart.provideContainer(ren);\n\n    _this.bindData();\n\n    chart.notifyResized();\n    ren.addSizeWatcher(function () {\n      _this._chart.notifyResized();\n    });\n    _this._initialized = true;\n    return _this;\n  }\n\n  Object.defineProperty(IgrCategoryChart.prototype, \"height\", {\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      this._height = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n\n        this._chart.notifyResized();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"width\", {\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      this._width = value;\n\n      if (this._elRef) {\n        this._elRef.style.width = value;\n\n        this._chart.notifyResized();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrCategoryChart.prototype._tooltipRef = function (t) {\n    //console.log(t);\n    if (t === null) {\n      return;\n    }\n\n    if (t.currentOwner && t.currentOwner.tooltipTemplate) {\n      t.template = t.currentOwner.tooltipTemplate;\n    }\n\n    this._activeTooltips.set(t.currentOwner, t);\n  };\n\n  IgrCategoryChart.prototype._getMainRef = function (ref) {\n    this._elRef = ref;\n  };\n\n  IgrCategoryChart.prototype.render = function () {\n    // if (!this._childrenDiffer(this.props.children)) {\n    // \tlet div = React.createElement(\"div\", {\n    // \t\tref: (ref) => {\n    // \t\t\tthis._elRef = ref;\n    // \t\t},\n    // \t\tchildren: this.props.children\n    // \t});\n    // \treturn div;\n    // } else {\n    var children = [];\n\n    if (this._currentTooltips && this._currentTooltips.length > 0) {\n      for (var i = 0; i < this._currentTooltips.length; i++) {\n        var t = this._currentTooltips[i];\n\n        if (this._activeTooltipElements.has(t)) {\n          children.push(this._activeTooltipElements.get(t));\n        } else {\n          if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n            continue;\n          }\n\n          var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n          var tEle = React.createElement(Tooltip, {\n            ref: this._tooltipRef,\n            key: this._currentTooltips[i].key,\n            owner: this._currentTooltips[i]\n          });\n          var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n\n          this._activeTooltipElements.set(t, portal);\n\n          children.push(portal);\n        }\n      }\n    }\n\n    var div = React.createElement(\"div\", {\n      className: \"ig-category-chart igr-category-chart\",\n      ref: this._getMainRef,\n      children: children\n    });\n    return div; //}\n  };\n\n  IgrCategoryChart.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    this._elRef.style.width = this._width ? this._width : \"\";\n    this._elRef.style.height = this._height ? this._height : \"\";\n\n    this._elRef.appendChild(this._container);\n\n    this._chart.notifyResized();\n\n    this.initializeContent();\n  };\n\n  IgrCategoryChart.prototype.componentWillUnmount = function () {\n    this._chart.destroy();\n\n    this._wrapper.destroy();\n  };\n\n  IgrCategoryChart.prototype.createImplementation = function () {\n    return new CategoryChart();\n  };\n\n  Object.defineProperty(IgrCategoryChart.prototype, \"i\", {\n    get: function get() {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrCategoryChart.prototype.createSeriesComponent = function (type) {\n    if (TypeRegistrar.isRegistered(type)) {\n      var s = TypeRegistrar.create(type);\n      s.owner = this;\n\n      s._provideRenderer(this._wrapper);\n\n      return s;\n    } else {\n      //we shouldn't get here, hopefully.\n      throw Error(\"series type not loaded: \" + type);\n    }\n  };\n\n  IgrCategoryChart.prototype.createSeries = function (type) {\n    switch (type) {\n      case DataSeriesType.Area:\n        return this.createSeriesComponent('IgrAreaSeries');\n\n      case DataSeriesType.Column:\n        return this.createSeriesComponent('IgrColumnSeries');\n\n      case DataSeriesType.Line:\n        return this.createSeriesComponent('IgrLineSeries');\n\n      case DataSeriesType.Point:\n        return this.createSeriesComponent('IgrPointSeries');\n\n      case DataSeriesType.Spline:\n        return this.createSeriesComponent('IgrSplineSeries');\n\n      case DataSeriesType.SplineArea:\n        return this.createSeriesComponent('IgrSplineAreaSeries');\n\n      case DataSeriesType.StepArea:\n        return this.createSeriesComponent('IgrStepAreaSeries');\n\n      case DataSeriesType.StepLine:\n        return this.createSeriesComponent('IgrStepLineSeries');\n\n      case DataSeriesType.Waterfall:\n        return this.createSeriesComponent('IgrWaterfallSeries');\n\n      case DataSeriesType.ItemToolTipLayer:\n        return this.createSeriesComponent('IgrItemToolTipLayer');\n\n      case DataSeriesType.CategoryToolTipLayer:\n        return this.createSeriesComponent('IgrCategoryToolTipLayer');\n\n      case DataSeriesType.CrosshairLayer:\n        return this.createSeriesComponent('IgrCrosshairLayer');\n\n      case DataSeriesType.FinalValueLayer:\n        return this.createSeriesComponent('IgrFinalValueLayer');\n\n      case DataSeriesType.CalloutLayer:\n        return this.createSeriesComponent('IgrCalloutLayer');\n\n      case DataSeriesType.CategoryHighlightLayer:\n        return this.createSeriesComponent('IgrCategoryHighlightLayer');\n\n      case DataSeriesType.CategoryItemHighlightLayer:\n        return this.createSeriesComponent('IgrCategoryItemHighlightLayer');\n\n      case DataSeriesType.DataToolTipLayer:\n        return this.createSeriesComponent('IgrDataToolTipLayer');\n\n      default:\n        return this.createSeriesComponent('IgrColumnSeries');\n    }\n  };\n\n  Object.defineProperty(IgrCategoryChart.prototype, \"dataSource\", {\n    get: function get() {\n      return this._dataSource;\n    },\n    set: function set(value) {\n      this._dataSource = value;\n      this.bindData();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrCategoryChart.prototype.bindData = function () {\n    if (this._chart != null && this._chart !== undefined) {\n      this._chart.itemsSource = this._dataSource;\n    }\n  };\n\n  IgrCategoryChart.prototype.initializeContent = function () {\n    if (TypeRegistrar.isRegistered(\"IgrDataChartDefaultTooltips\")) {\n      var d = TypeRegistrar.create(\"IgrDataChartDefaultTooltips\");\n      this._defaultTooltips = d;\n\n      this._onDefaultTooltipsReady(d); //this._container.appendChild(cr.location.nativeElement);\n\n    } // supports angular themes or custom properties set in CSS \n\n\n    this._styling(this._elRef, this);\n\n    this._chart.notifyResized();\n  };\n\n  IgrCategoryChart.prototype.createTooltip = function () {\n    // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n    // \treturn null;\n    // }\n    // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n    var wrapper = this._wrapper.createElement(\"div\");\n\n    var ele = wrapper.getNativeElement();\n    ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n    this._uniqueTooltipId++;\n    this._currentTooltips = this._currentTooltips.slice(0);\n\n    this._currentTooltips.push(ele); //let element = React.createElement(Tooltip,  );\n    //let portal = ReactDOM.createPortal(element, ele);\n\n\n    var self = this;\n\n    ele.updateToolTip = function (c, isSubContent) {\n      if (c.externalObject) {\n        c = c.externalObject;\n      } else {\n        var ext = new IgrDataContext();\n        ext._implementation = c;\n        c = ext;\n      }\n\n      if (!isSubContent) {\n        if (ele.parentElement != self._container) {\n          if (ele.parentElement != null) {\n            ele.parentElement.removeChild(ele);\n          }\n\n          self._container.appendChild(ele);\n        }\n      } else {\n        c.isSubContent = true;\n      }\n\n      if (self._activeTooltips.has(ele)) {\n        var t = self._activeTooltips.get(ele);\n\n        if (t.template === null && ele.tooltipTemplate !== null) {\n          t.template = ele.tooltipTemplate;\n        }\n\n        t.dataContext = c;\n      }\n\n      ele.style.display = \"block\";\n      return true;\n    };\n\n    ele.hideToolTip = function () {\n      ele.style.display = \"none\";\n    };\n\n    ele.style.display = \"none\";\n\n    this._updateTooltipState();\n\n    return ele;\n  };\n\n  IgrCategoryChart.prototype._ensureTooltipCreated = function (series) {\n    var _this = this;\n\n    series._ensureTooltipCreated(function () {\n      return _this.createTooltip();\n    }, function (ele) {\n      var wrapper = new ReactWrapper(ele, _this._wrapper);\n      wrapper.updateToolTip = ele.updateToolTip;\n      wrapper.hideToolTip = ele.hideToolTip;\n\n      if (_this._activeTooltips.has(ele)) {\n        var tCont = _this._activeTooltips.get(ele);\n\n        tCont.template = ele.tooltipTemplate;\n      }\n\n      return wrapper;\n    });\n  };\n\n  IgrCategoryChart.prototype._createXAxis = function () {\n    var x = new IgrCategoryXAxis(null);\n\n    x._provideRenderer(this._wrapper);\n\n    return x.i;\n  };\n\n  IgrCategoryChart.prototype._createYAxis = function () {\n    var y = new IgrNumericYAxis(null);\n    y.provideRenderer(this._wrapper);\n    return y.i;\n  };\n\n  IgrCategoryChart.prototype._ensureDefaultTooltip = function (series) {\n    if (this._defaultTooltips == null) {\n      return;\n    }\n\n    this._defaultTooltips[\"ensureDefaultTooltip\"](series);\n  };\n\n  IgrCategoryChart.prototype._onDefaultTooltipsReady = function (cr) {\n    if (this.i.dataChart) {\n      var currSeries = this.i.dataChart.series;\n\n      for (var i = 0; i < currSeries.count; i++) {\n        if (currSeries.item(i).externalObject.showDefaultTooltip) {\n          this._ensureDefaultTooltip(currSeries.item(i).externalObject);\n        }\n      }\n    }\n  };\n\n  IgrCategoryChart.prototype._updateTooltipState = function () {\n    if (this._initialized) {\n      this.setState({\n        tooltips: this._currentTooltips\n      });\n    }\n  };\n\n  Object.defineProperty(IgrCategoryChart.prototype, \"transitionInDuration\", {\n    /**\n    * Gets or sets the duration used for animating series plots when the chart is loading into view\n    *\n    * `transitionInDuration` controls the length of time taken by the transition-in animation.  Try setting it to 2 seconds:\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \ttransitionInDuration={2000} />\n    * ```\n    */\n    get: function get() {\n      return this.i.ac4;\n    },\n    set: function set(v) {\n      this.i.ac4 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"transitionInEasingFunction\", {\n    /**\n     * Gets or sets the easing function used for animating series plots when the chart is loading into view\n     * This can be set to one of the known values \"linear\" or \"cubic,\" or it can be set to an easing function which takes a single numeric parameter and returns a number.\n    */\n    get: function get() {\n      return this.i.abi;\n    },\n    set: function set(v) {\n      this.i.abi = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"domainType\", {\n    /**\n     * Gets domain type of this chart\n    */\n    get: function get() {\n      return this.i.bi;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"chartType\", {\n    /**\n     * Gets or sets the type of chart series to generate from the data.\n    *\n    * The `chartType` property determines the type of data series to display.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" />\n    * ```\n    */\n    get: function get() {\n      return this.i.aa2;\n    },\n    set: function set(v) {\n      this.i.aa2 = ensureEnum(CategoryChartType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"markerCollisionAvoidance\", {\n    /**\n     * Gets or sets the behavior for markers in each series which are placed too close together for the current view, resulting in a collision.\n    *\n    * `markerCollisionAvoidance` controls the technique the chart uses to avoid overlapping markers.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \t markerCollisionAvoidance=\"none\" />\n    * ```\n    */\n    get: function get() {\n      return this.i.aa4;\n    },\n    set: function set(v) {\n      this.i.aa4 = ensureEnum(CategorySeriesMarkerCollisionAvoidance_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"isSplineShapePartOfRange\", {\n    /**\n     * Gets or sets whether to include the spline shape in the axis range requested of the axis for spline type series.\n    */\n    get: function get() {\n      return this.i.abw;\n    },\n    set: function set(v) {\n      this.i.abw = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"isTransitionInEnabled\", {\n    /**\n     * Gets or sets whether animation of series plots is enabled when the chart is loading into view\n    *\n    * Set `isTransitionInEnabled` to true if you want your chart series to animate into position when the chart is loading into view.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \t isTransitionInEnabled =\"true\" />\n    * ```\n    */\n    get: function get() {\n      return this.i.abx;\n    },\n    set: function set(v) {\n      this.i.abx = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"transitionInMode\", {\n    /**\n     * Gets or sets the method that determines how to animate series plots when the chart is loading into view\n    *\n    * `transitionInMode` controls the direction of the transition-in animation.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tCategoryTransitionInMode=\"accordionfromRight\" />\n    * ```\n    */\n    get: function get() {\n      return this.i.aa6;\n    },\n    set: function set(v) {\n      this.i.aa6 = ensureEnum(CategoryTransitionInMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"transitionInSpeedType\", {\n    /**\n     * Gets or sets the arrival speed used for animating series plots when the chart is loading into view\n    *\n    * `transitionInSpeedType` controls the speed of the transition-in animation.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \t transitionInSpeedType=\"indexScaled\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function get() {\n      return this.i.abg;\n    },\n    set: function set(v) {\n      this.i.abg = ensureEnum(TransitionInSpeedType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"xAxisInterval\", {\n    /**\n     * Gets or sets the frequency of displayed labels along the X-axis.\n     * Gets or sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.\n    *\n    * `xAxisInterval` determines how often to show a label, tickmark, and/or gridline along the x-axis.  Set this property to _n_ to display a label every _nth_ item.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \txAxisInterval={3} />\n    * ```\n    */\n    get: function get() {\n      return this.i.acr;\n    },\n    set: function set(v) {\n      this.i.acr = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"xAxisMinorInterval\", {\n    /**\n     * Gets or sets the frequency of displayed minor lines along the X-axis.\n     * Gets or sets the set value is a factor that determines how the minor lines will be displayed.\n    *\n    * `xAxisMinorInterval` determines how often to show a minor gridline along the x-axis.  This property is relevant only when the displayed series is a type with grouping, like column series.\n    *\n    * `xAxisMinorInterval` is expressed as a number between 0 and 1, representing the frequency of the interval.  To display minor gridlines representing 10ths of an item width, set `xAxisMinorInterval` to 0.1.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \txAxisMinorInterval={0.1}\n    *     xAxisMinorStroke=\"green\"\n    *     xAxisMinorStrokeThickness={1} />\n    * ```\n    */\n    get: function get() {\n      return this.i.acu;\n    },\n    set: function set(v) {\n      this.i.acu = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"xAxisGap\", {\n    /**\n     * Gets or sets the amount of space between adjacent categories for the X-axis.\n     * The gap is silently clamped to the range [0, 1] when used.\n    *\n    * Use the `xAxisGap` property to configure the spacing between items on the x-axis.  This property is relevant only when the displayed series is a type with item spacing, like column series.\n    *\n    * An `xAxisGap` of 0 allocates no space between items.  An `xAxisGap` of 1 allocates a space between items equal to the width of one item.\n    *\n    * To set the item spacing to 75% the width of one item, set the `xAxisGap` to 0.75, as in this code:\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \t xAxisGap={0.75} />\n    * ```\n    */\n    get: function get() {\n      return this.i.acq;\n    },\n    set: function set(v) {\n      this.i.acq = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"xAxisMinimumGapSize\", {\n    /**\n     * Gets or sets the minimum amount of pixels to use for the gap between categories, if possible.\n    */\n    get: function get() {\n      return this.i.act;\n    },\n    set: function set(v) {\n      this.i.act = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"xAxisMaximumGap\", {\n    /**\n     * Gets or sets the maximum gap value to allow. This defaults to 1.0.\n    */\n    get: function get() {\n      return this.i.acs;\n    },\n    set: function set(v) {\n      this.i.acs = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"xAxisOverlap\", {\n    /**\n     * Gets or sets the amount of overlap between adjacent categories for the X-axis.\n     * Gets or sets the overlap is silently clamped to the range [-1, 1] when used.\n    *\n    * Use the `xAxisOverlap` property to configure the spacing between items on the x-axis.  This property is relevant only when the displayed series is a type with item spacing, like column series.\n    *\n    * An `xAxisOverlap` of 0 places grouped items adjacent to each other.  An `xAxisOverlap` of 1 places grouped items in the same axis space, completely overlapping.  An `xAxisOverlap` of -1 places a space between grouped items equal to the width of one item.\n    *\n    * To place grouped items with 75% overlap, set the `xAxisOverlap` to 0.75, as in this code:\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \txAxisOverlap={0} />\n    * ```\n    */\n    get: function get() {\n      return this.i.acv;\n    },\n    set: function set(v) {\n      this.i.acv = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisInterval\", {\n    /**\n     * Gets or sets the distance between each label and grid line along the Y-axis.\n    *\n    * `yAxisInterval` determines how often to show a label, tickmark, and/or gridline along the y-axis.  Set this property to a number less than the numeric range of the y-axis.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tyAxisInterval={10} />\n    * ```\n    */\n    get: function get() {\n      return this.i.acy;\n    },\n    set: function set(v) {\n      this.i.acy = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"autoMarginAndAngleUpdateMode\", {\n    /**\n     * Gets or sets a whether the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n    */\n    get: function get() {\n      return this.i.aay;\n    },\n    set: function set(v) {\n      this.i.aay = ensureEnum(AutoMarginsAndAngleUpdateMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"shouldAutoExpandMarginForInitialLabels\", {\n    /**\n     * Gets or sets a whether the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n    */\n    get: function get() {\n      return this.i.aby;\n    },\n    set: function set(v) {\n      this.i.aby = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"shouldConsiderAutoRotationForInitialLabels\", {\n    /**\n     * Gets or sets a whether the series viewer should consider auto rotating labels to fit them in the initial view. This implies that ShouldAutoExpandMarginForInitialLabels is true.\n    */\n    get: function get() {\n      return this.i.abz;\n    },\n    set: function set(v) {\n      this.i.abz = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"autoExpandMarginExtraPadding\", {\n    /**\n     * Gets or sets the extra amount the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n    */\n    get: function get() {\n      return this.i.aci;\n    },\n    set: function set(v) {\n      this.i.aci = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"autoExpandMarginMaximumValue\", {\n    /**\n     * Gets or sets the maximum amount the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n    */\n    get: function get() {\n      return this.i.acj;\n    },\n    set: function set(v) {\n      this.i.acj = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisFavorLabellingScaleEnd\", {\n    /**\n     * Gets or sets whether the axis should favor emitting a label at the end of the scale.\n    */\n    get: function get() {\n      return this.i.ab3;\n    },\n    set: function set(v) {\n      this.i.ab3 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"xAxisEnhancedIntervalPreferMoreCategoryLabels\", {\n    /**\n     * Gets or sets whether the x axis enhanced interval management should prefer to show all the labels if possible without collisions for supported types of category axes. This is for use with EnhancedIntervalMinimumCharacters = -1 and axes that have an integral interval.\n    */\n    get: function get() {\n      return this.i.ab0;\n    },\n    set: function set(v) {\n      this.i.ab0 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisEnhancedIntervalPreferMoreCategoryLabels\", {\n    /**\n     * Gets or sets whether the y axis enhanced interval management should prefer to show all the labels if possible without collisions for supported types of category axes. This is for use with EnhancedIntervalMinimumCharacters = -1 and axes that have an integral interval.\n    */\n    get: function get() {\n      return this.i.ab2;\n    },\n    set: function set(v) {\n      this.i.ab2 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisAutoRangeBufferMode\", {\n    /**\n     * Gets or sets how the numeric axis will adjust its range buffer to less closely fix the data from the series.\n    */\n    get: function get() {\n      return this.i.aa0;\n    },\n    set: function set(v) {\n      this.i.aa0 = ensureEnum(AxisRangeBufferMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisIsLogarithmic\", {\n    /**\n     * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.\n     * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.\n    *\n    * Set `yAxisIsLogarithmic` to true if you want the y-axis to be a logarithmic scale.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tyAxisIsLogarithmic=\"true\" />\n    * ```\n    */\n    get: function get() {\n      return this.i.ab4;\n    },\n    set: function set(v) {\n      this.i.ab4 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisLogarithmBase\", {\n    /**\n     * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.\n     * This property is effective only when YAxisIsLogarithmic is true.\n    *\n    * When `yAxisIsLogarithmic` is true, `yAxisLogarithmBase` sets the logarithm base of the y-axis scale.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tyAxisIsLogarithmic=\"true\"\n    *     yAxisLogarithmBase={2} />\n    * ```\n    */\n    get: function get() {\n      return this.i.ac5;\n    },\n    set: function set(v) {\n      this.i.ac5 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisMinimumValue\", {\n    /**\n     * Gets or sets the data value corresponding to the minimum value of the Y-axis.\n    *\n    * `yAxisMaximumValue` determines the minimum of the y-axis.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tyAxisMinimumValue={42} />\n    * ```\n    */\n    get: function get() {\n      return this.i.ac0;\n    },\n    set: function set(v) {\n      this.i.ac0 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisMaximumValue\", {\n    /**\n     * Gets or sets the data value corresponding to the maximum value of the Y-axis.\n    *\n    * `yAxisMaximumValue` determines the maximum of the y-axis.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tyAxisMaximumValue={150} />\n    * ```\n    */\n    get: function get() {\n      return this.i.acz;\n    },\n    set: function set(v) {\n      this.i.acz = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisMinorInterval\", {\n    /**\n     * Gets or sets the frequency of displayed minor lines along the Y-axis.\n    *\n    * `yAxisMinorInterval` determines how often to show a minor gridline along the y-axis.  Set this property to a number less than the y-axis interval.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tyAxisMinorInterval={2}\n    *     yAxisMinorStroke=\"green\"\n    *     yAxisMinorStrokeThickness={1} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function get() {\n      return this.i.ac1;\n    },\n    set: function set(v) {\n      this.i.ac1 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"xAxisActualMinimum\", {\n    /**\n     * Gets the current minimum value for the X-axis.\n    */\n    get: function get() {\n      return this.i.acp;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"xAxisActualMaximum\", {\n    /**\n     * Gets the current maximum value for the X-axis.\n    */\n    get: function get() {\n      return this.i.aco;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisActualMinimum\", {\n    /**\n     * Gets the current minimum value for the Y-axis.\n    */\n    get: function get() {\n      return this.i.acx;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisActualMaximum\", {\n    /**\n     * Gets the current maximum value for the Y-axis.\n    */\n    get: function get() {\n      return this.i.acw;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"negativeBrushes\", {\n    /**\n     * Gets or sets the palette used for coloring negative items of Waterfall chart type.\n    *\n    * `negativeBrushes` controls the brushes used by the chart for negative data, when the `chartType` is one that supports negative brushes.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tnegativeBrushes=\"#ff0000, #cc0000, #aa0000\" />\n    * ```\n    */\n    get: function get() {\n      return fromBrushCollection(this.i.aav);\n    },\n    set: function set(v) {\n      this.i.aav = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"negativeOutlines\", {\n    /**\n     * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.\n    *\n    * `negativeOutlines` controls the outlines used by the chart for negative data, when the `chartType` is one that supports negative brushes.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tnegativeOutlines=\"#0000ff, #0000cc, #0000aa\" />\n    * ```\n    */\n    get: function get() {\n      return fromBrushCollection(this.i.aaw);\n    },\n    set: function set(v) {\n      this.i.aaw = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"yAxisAbbreviateLargeNumbers\", {\n    /**\n     * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.\n    *\n    * To abbreviate on the y-axis using formats like \"1K\" or \"1M,\" set `yAxisAbbreviateLargeNumbers` to true.\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \tyAxisAbbreviateLargeNumbers=\"true\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function get() {\n      return this.i.ab1;\n    },\n    set: function set(v) {\n      this.i.ab1 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"isCategoryHighlightingEnabled\", {\n    /**\n     * Gets or sets whether the category should be highlighted when hovered\n    */\n    get: function get() {\n      return this.i.abu;\n    },\n    set: function set(v) {\n      this.i.abu = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryChart.prototype, \"isItemHighlightingEnabled\", {\n    /**\n     * Gets or sets whether the item should be highlighted when hovered\n    */\n    get: function get() {\n      return this.i.abv;\n    },\n    set: function set(v) {\n      this.i.abv = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n  * Export serialized visual data.\n  */\n\n  IgrCategoryChart.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.ada();\n    return iv;\n  };\n\n  IgrCategoryChart.prototype.recalculateMarginAutoExpansion = function () {\n    this.i.ad9();\n  };\n\n  IgrCategoryChart.prototype.getCurrentXAxisActualMinimum = function () {\n    var iv = this.i.acl();\n    return iv;\n  };\n\n  IgrCategoryChart.prototype.getCurrentYAxisActualMinimum = function () {\n    var iv = this.i.acn();\n    return iv;\n  };\n\n  IgrCategoryChart.prototype.getCurrentXAxisActualMaximum = function () {\n    var iv = this.i.ack();\n    return iv;\n  };\n\n  IgrCategoryChart.prototype.getCurrentYAxisActualMaximum = function () {\n    var iv = this.i.acm();\n    return iv;\n  };\n\n  return IgrCategoryChart;\n}(IgrXYChart);\n\nexport { IgrCategoryChart };","map":{"version":3,"names":["__extends","React","ReactDOM","ReactRenderer","ReactWrapper","TypeRegistrar","CategoryChart","CategoryChartType_$type","CategorySeriesMarkerCollisionAvoidance_$type","CategoryTransitionInMode_$type","TransitionInSpeedType_$type","fromBrushCollection","toBrushCollection","ensureEnum","ensureBool","NamePatcher","IgrXYChart","DataChartStylingDefaults","DataSeriesType","IgrDataContext","IgrCategoryXAxis","IgrNumericYAxis","AxisRangeBufferMode_$type","AutoMarginsAndAngleUpdateMode_$type","IgrCategoryChart","_super","props","_this","call","_dataSource","_defaultTooltips","_uniqueTooltipId","_styling","ensureStylablePatched","Object","getPrototypeOf","_getMainRef","bind","_tooltipRef","_activeTooltipElements","Map","_activeTooltips","_currentTooltips","document","_container","createElement","style","display","width","height","root","ren","_wrapper","chart","i","_chart","xAxis","x","_provideRenderer","_implementation","externalObject","yAxis","y","provideContainer","bindData","notifyResized","addSizeWatcher","_initialized","defineProperty","prototype","get","_height","set","value","_elRef","enumerable","configurable","_width","t","currentOwner","tooltipTemplate","template","ref","render","children","length","has","push","isRegistered","Tooltip","tEle","key","owner","portal","createPortal","div","className","componentDidMount","appendChild","initializeContent","componentWillUnmount","destroy","createImplementation","createSeriesComponent","type","s","create","Error","createSeries","Area","Column","Line","Point","Spline","SplineArea","StepArea","StepLine","Waterfall","ItemToolTipLayer","CategoryToolTipLayer","CrosshairLayer","FinalValueLayer","CalloutLayer","CategoryHighlightLayer","CategoryItemHighlightLayer","DataToolTipLayer","undefined","itemsSource","d","_onDefaultTooltipsReady","createTooltip","wrapper","ele","getNativeElement","slice","self","updateToolTip","c","isSubContent","ext","parentElement","removeChild","dataContext","hideToolTip","_updateTooltipState","_ensureTooltipCreated","series","tCont","_createXAxis","_createYAxis","provideRenderer","_ensureDefaultTooltip","cr","dataChart","currSeries","count","item","showDefaultTooltip","setState","tooltips","ac4","v","abi","bi","aa2","aa4","abw","abx","aa6","abg","acr","acu","acq","act","acs","acv","acy","aay","aby","abz","aci","acj","ab3","ab0","ab2","aa0","ab4","ac5","ac0","acz","ac1","acp","aco","acx","acw","aav","aaw","ab1","abu","abv","exportSerializedVisualData","iv","ada","recalculateMarginAutoExpansion","ad9","getCurrentXAxisActualMinimum","acl","getCurrentYAxisActualMinimum","acn","getCurrentXAxisActualMaximum","ack","getCurrentYAxisActualMaximum","acm"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-charts/esm5/lib/igr-category-chart.js"],"sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { CategoryChart } from './CategoryChart';\nimport { CategoryChartType_$type } from './CategoryChartType';\nimport { CategorySeriesMarkerCollisionAvoidance_$type } from './CategorySeriesMarkerCollisionAvoidance';\nimport { CategoryTransitionInMode_$type } from './CategoryTransitionInMode';\nimport { TransitionInSpeedType_$type } from './TransitionInSpeedType';\nimport { fromBrushCollection, toBrushCollection, ensureEnum, ensureBool, NamePatcher } from \"igniteui-react-core\";\nimport { IgrXYChart } from './igr-xy-chart';\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { DataSeriesType } from \"igniteui-react-core\";\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { IgrCategoryXAxis } from './igr-category-x-axis';\nimport { IgrNumericYAxis } from './igr-numeric-y-axis';\nimport { AxisRangeBufferMode_$type } from './AxisRangeBufferMode';\nimport { AutoMarginsAndAngleUpdateMode_$type } from './AutoMarginsAndAngleUpdateMode';\n/**\n * Represents a chart with an ordinal X-axis and a numeric Y-axis.\n*\n* **Ignite UI for React Category Chart** - [Documentation](https://www.infragistics.com/products/ignite-ui-react/react/components/CategoryChart.html)\n*\n* The Ignite UI Category Chart is a lightweight, highly performant chart. It can be easily configured to display category data using an extremely simple and intuitive API. All you need to do is provide your data to the chart and it will take care of everything else.\n*\n* Example:\n*\n* ```ts\n* <IgrCategoryChart\n* \tdataSource={this.state.data} />\n* ```\n*/\nvar IgrCategoryChart = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrCategoryChart, _super);\n    function IgrCategoryChart(props) {\n        var _this = _super.call(this, props) || this;\n        _this._dataSource = null;\n        _this._defaultTooltips = null;\n        _this._uniqueTooltipId = 0;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._getMainRef = _this._getMainRef.bind(_this);\n        _this._tooltipRef = _this._tooltipRef.bind(_this);\n        _this._activeTooltipElements = new Map();\n        _this._activeTooltips = new Map();\n        _this._currentTooltips = [];\n        if (document) {\n            _this._container = document.createElement(\"div\");\n            _this._container.style.display = \"block\";\n            _this._container.style.width = \"100%\";\n            _this._container.style.height = \"100%\";\n        }\n        var root;\n        root = _this._container;\n        if (_this._container != null) {\n            root = _this._container;\n        }\n        var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n        _this._wrapper = ren;\n        var chart = _this.i;\n        _this._chart = chart;\n        if (chart.xAxis) {\n            var x = new IgrCategoryXAxis(null);\n            x._provideRenderer(ren);\n            x._implementation = chart.xAxis;\n            chart.xAxis.externalObject = x;\n        }\n        if (chart.yAxis) {\n            var y = new IgrNumericYAxis(null);\n            y._provideRenderer(ren);\n            y._implementation = chart.yAxis;\n            chart.yAxis.externalObject = y;\n        }\n        chart.provideContainer(ren);\n        _this.bindData();\n        chart.notifyResized();\n        ren.addSizeWatcher(function () {\n            _this._chart.notifyResized();\n        });\n        _this._initialized = true;\n        return _this;\n    }\n    Object.defineProperty(IgrCategoryChart.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this._chart.notifyResized();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._elRef) {\n                this._elRef.style.width = value;\n                this._chart.notifyResized();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrCategoryChart.prototype._tooltipRef = function (t) {\n        //console.log(t);\n        if (t === null) {\n            return;\n        }\n        if (t.currentOwner &&\n            t.currentOwner.tooltipTemplate) {\n            t.template = t.currentOwner.tooltipTemplate;\n        }\n        this._activeTooltips.set(t.currentOwner, t);\n    };\n    IgrCategoryChart.prototype._getMainRef = function (ref) {\n        this._elRef = ref;\n    };\n    IgrCategoryChart.prototype.render = function () {\n        // if (!this._childrenDiffer(this.props.children)) {\n        // \tlet div = React.createElement(\"div\", {\n        // \t\tref: (ref) => {\n        // \t\t\tthis._elRef = ref;\n        // \t\t},\n        // \t\tchildren: this.props.children\n        // \t});\n        // \treturn div;\n        // } else {\n        var children = [];\n        if (this._currentTooltips && this._currentTooltips.length > 0) {\n            for (var i = 0; i < this._currentTooltips.length; i++) {\n                var t = this._currentTooltips[i];\n                if (this._activeTooltipElements.has(t)) {\n                    children.push(this._activeTooltipElements.get(t));\n                }\n                else {\n                    if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n                        continue;\n                    }\n                    var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n                    var tEle = React.createElement(Tooltip, {\n                        ref: this._tooltipRef,\n                        key: this._currentTooltips[i].key,\n                        owner: this._currentTooltips[i]\n                    });\n                    var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n                    this._activeTooltipElements.set(t, portal);\n                    children.push(portal);\n                }\n            }\n        }\n        var div = React.createElement(\"div\", {\n            className: \"ig-category-chart igr-category-chart\",\n            ref: this._getMainRef,\n            children: children\n        });\n        return div;\n        //}\n    };\n    IgrCategoryChart.prototype.componentDidMount = function () {\n        _super.prototype.componentDidMount.call(this);\n        this._elRef.style.width = this._width ? this._width : \"\";\n        this._elRef.style.height = this._height ? this._height : \"\";\n        this._elRef.appendChild(this._container);\n        this._chart.notifyResized();\n        this.initializeContent();\n    };\n    IgrCategoryChart.prototype.componentWillUnmount = function () {\n        this._chart.destroy();\n        this._wrapper.destroy();\n    };\n    IgrCategoryChart.prototype.createImplementation = function () {\n        return new CategoryChart();\n    };\n    Object.defineProperty(IgrCategoryChart.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrCategoryChart.prototype.createSeriesComponent = function (type) {\n        if (TypeRegistrar.isRegistered(type)) {\n            var s = TypeRegistrar.create(type);\n            s.owner = this;\n            s._provideRenderer(this._wrapper);\n            return s;\n        }\n        else {\n            //we shouldn't get here, hopefully.\n            throw Error(\"series type not loaded: \" + type);\n        }\n    };\n    IgrCategoryChart.prototype.createSeries = function (type) {\n        switch (type) {\n            case DataSeriesType.Area:\n                return this.createSeriesComponent('IgrAreaSeries');\n            case DataSeriesType.Column:\n                return this.createSeriesComponent('IgrColumnSeries');\n            case DataSeriesType.Line:\n                return this.createSeriesComponent('IgrLineSeries');\n            case DataSeriesType.Point:\n                return this.createSeriesComponent('IgrPointSeries');\n            case DataSeriesType.Spline:\n                return this.createSeriesComponent('IgrSplineSeries');\n            case DataSeriesType.SplineArea:\n                return this.createSeriesComponent('IgrSplineAreaSeries');\n            case DataSeriesType.StepArea:\n                return this.createSeriesComponent('IgrStepAreaSeries');\n            case DataSeriesType.StepLine:\n                return this.createSeriesComponent('IgrStepLineSeries');\n            case DataSeriesType.Waterfall:\n                return this.createSeriesComponent('IgrWaterfallSeries');\n            case DataSeriesType.ItemToolTipLayer:\n                return this.createSeriesComponent('IgrItemToolTipLayer');\n            case DataSeriesType.CategoryToolTipLayer:\n                return this.createSeriesComponent('IgrCategoryToolTipLayer');\n            case DataSeriesType.CrosshairLayer:\n                return this.createSeriesComponent('IgrCrosshairLayer');\n            case DataSeriesType.FinalValueLayer:\n                return this.createSeriesComponent('IgrFinalValueLayer');\n            case DataSeriesType.CalloutLayer:\n                return this.createSeriesComponent('IgrCalloutLayer');\n            case DataSeriesType.CategoryHighlightLayer:\n                return this.createSeriesComponent('IgrCategoryHighlightLayer');\n            case DataSeriesType.CategoryItemHighlightLayer:\n                return this.createSeriesComponent('IgrCategoryItemHighlightLayer');\n            case DataSeriesType.DataToolTipLayer:\n                return this.createSeriesComponent('IgrDataToolTipLayer');\n            default:\n                return this.createSeriesComponent('IgrColumnSeries');\n        }\n    };\n    Object.defineProperty(IgrCategoryChart.prototype, \"dataSource\", {\n        get: function () {\n            return this._dataSource;\n        },\n        set: function (value) {\n            this._dataSource = value;\n            this.bindData();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrCategoryChart.prototype.bindData = function () {\n        if (this._chart != null && this._chart !== undefined) {\n            this._chart.itemsSource = this._dataSource;\n        }\n    };\n    IgrCategoryChart.prototype.initializeContent = function () {\n        if (TypeRegistrar.isRegistered(\"IgrDataChartDefaultTooltips\")) {\n            var d = TypeRegistrar.create(\"IgrDataChartDefaultTooltips\");\n            this._defaultTooltips = d;\n            this._onDefaultTooltipsReady(d);\n            //this._container.appendChild(cr.location.nativeElement);\n        }\n        // supports angular themes or custom properties set in CSS \n        this._styling(this._elRef, this);\n        this._chart.notifyResized();\n    };\n    IgrCategoryChart.prototype.createTooltip = function () {\n        // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n        // \treturn null;\n        // }\n        // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n        var wrapper = this._wrapper.createElement(\"div\");\n        var ele = wrapper.getNativeElement();\n        ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n        this._uniqueTooltipId++;\n        this._currentTooltips = this._currentTooltips.slice(0);\n        this._currentTooltips.push(ele);\n        //let element = React.createElement(Tooltip,  );\n        //let portal = ReactDOM.createPortal(element, ele);\n        var self = this;\n        ele.updateToolTip = function (c, isSubContent) {\n            if (c.externalObject) {\n                c = c.externalObject;\n            }\n            else {\n                var ext = new IgrDataContext();\n                ext._implementation = c;\n                c = ext;\n            }\n            if (!isSubContent) {\n                if (ele.parentElement != self._container) {\n                    if (ele.parentElement != null) {\n                        ele.parentElement.removeChild(ele);\n                    }\n                    self._container.appendChild(ele);\n                }\n            }\n            else {\n                c.isSubContent = true;\n            }\n            if (self._activeTooltips.has(ele)) {\n                var t = self._activeTooltips.get(ele);\n                if (t.template === null &&\n                    ele.tooltipTemplate !== null) {\n                    t.template = ele.tooltipTemplate;\n                }\n                t.dataContext = c;\n            }\n            ele.style.display = \"block\";\n            return true;\n        };\n        ele.hideToolTip = function () {\n            ele.style.display = \"none\";\n        };\n        ele.style.display = \"none\";\n        this._updateTooltipState();\n        return ele;\n    };\n    IgrCategoryChart.prototype._ensureTooltipCreated = function (series) {\n        var _this = this;\n        series._ensureTooltipCreated(function () { return _this.createTooltip(); }, function (ele) {\n            var wrapper = new ReactWrapper(ele, _this._wrapper);\n            wrapper.updateToolTip = ele.updateToolTip;\n            wrapper.hideToolTip = ele.hideToolTip;\n            if (_this._activeTooltips.has(ele)) {\n                var tCont = _this._activeTooltips.get(ele);\n                tCont.template = ele.tooltipTemplate;\n            }\n            return wrapper;\n        });\n    };\n    IgrCategoryChart.prototype._createXAxis = function () {\n        var x = new IgrCategoryXAxis(null);\n        x._provideRenderer(this._wrapper);\n        return x.i;\n    };\n    IgrCategoryChart.prototype._createYAxis = function () {\n        var y = new IgrNumericYAxis(null);\n        y.provideRenderer(this._wrapper);\n        return y.i;\n    };\n    IgrCategoryChart.prototype._ensureDefaultTooltip = function (series) {\n        if (this._defaultTooltips == null) {\n            return;\n        }\n        this._defaultTooltips[\"ensureDefaultTooltip\"](series);\n    };\n    IgrCategoryChart.prototype._onDefaultTooltipsReady = function (cr) {\n        if (this.i.dataChart) {\n            var currSeries = this.i.dataChart.series;\n            for (var i = 0; i < currSeries.count; i++) {\n                if (currSeries.item(i).externalObject.showDefaultTooltip) {\n                    this._ensureDefaultTooltip(currSeries.item(i).externalObject);\n                }\n            }\n        }\n    };\n    IgrCategoryChart.prototype._updateTooltipState = function () {\n        if (this._initialized) {\n            this.setState({ tooltips: this._currentTooltips });\n        }\n    };\n    Object.defineProperty(IgrCategoryChart.prototype, \"transitionInDuration\", {\n        /**\n     * Gets or sets the duration used for animating series plots when the chart is loading into view\n    *\n    * `transitionInDuration` controls the length of time taken by the transition-in animation.  Try setting it to 2 seconds:\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tdataSource={this.state.data}\n    * \ttransitionInDuration={2000} />\n    * ```\n    */\n        get: function () {\n            return this.i.ac4;\n        },\n        set: function (v) {\n            this.i.ac4 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"transitionInEasingFunction\", {\n        /**\n         * Gets or sets the easing function used for animating series plots when the chart is loading into view\n         * This can be set to one of the known values \"linear\" or \"cubic,\" or it can be set to an easing function which takes a single numeric parameter and returns a number.\n        */\n        get: function () {\n            return this.i.abi;\n        },\n        set: function (v) {\n            this.i.abi = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"domainType\", {\n        /**\n         * Gets domain type of this chart\n        */\n        get: function () {\n            return this.i.bi;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"chartType\", {\n        /**\n         * Gets or sets the type of chart series to generate from the data.\n        *\n        * The `chartType` property determines the type of data series to display.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" />\n        * ```\n        */\n        get: function () {\n            return this.i.aa2;\n        },\n        set: function (v) {\n            this.i.aa2 = ensureEnum(CategoryChartType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"markerCollisionAvoidance\", {\n        /**\n         * Gets or sets the behavior for markers in each series which are placed too close together for the current view, resulting in a collision.\n        *\n        * `markerCollisionAvoidance` controls the technique the chart uses to avoid overlapping markers.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \t markerCollisionAvoidance=\"none\" />\n        * ```\n        */\n        get: function () {\n            return this.i.aa4;\n        },\n        set: function (v) {\n            this.i.aa4 = ensureEnum(CategorySeriesMarkerCollisionAvoidance_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"isSplineShapePartOfRange\", {\n        /**\n         * Gets or sets whether to include the spline shape in the axis range requested of the axis for spline type series.\n        */\n        get: function () {\n            return this.i.abw;\n        },\n        set: function (v) {\n            this.i.abw = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"isTransitionInEnabled\", {\n        /**\n         * Gets or sets whether animation of series plots is enabled when the chart is loading into view\n        *\n        * Set `isTransitionInEnabled` to true if you want your chart series to animate into position when the chart is loading into view.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \t isTransitionInEnabled =\"true\" />\n        * ```\n        */\n        get: function () {\n            return this.i.abx;\n        },\n        set: function (v) {\n            this.i.abx = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"transitionInMode\", {\n        /**\n         * Gets or sets the method that determines how to animate series plots when the chart is loading into view\n        *\n        * `transitionInMode` controls the direction of the transition-in animation.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tCategoryTransitionInMode=\"accordionfromRight\" />\n        * ```\n        */\n        get: function () {\n            return this.i.aa6;\n        },\n        set: function (v) {\n            this.i.aa6 = ensureEnum(CategoryTransitionInMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"transitionInSpeedType\", {\n        /**\n         * Gets or sets the arrival speed used for animating series plots when the chart is loading into view\n        *\n        * `transitionInSpeedType` controls the speed of the transition-in animation.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \t transitionInSpeedType=\"indexScaled\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.abg;\n        },\n        set: function (v) {\n            this.i.abg = ensureEnum(TransitionInSpeedType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"xAxisInterval\", {\n        /**\n         * Gets or sets the frequency of displayed labels along the X-axis.\n         * Gets or sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.\n        *\n        * `xAxisInterval` determines how often to show a label, tickmark, and/or gridline along the x-axis.  Set this property to _n_ to display a label every _nth_ item.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \txAxisInterval={3} />\n        * ```\n        */\n        get: function () {\n            return this.i.acr;\n        },\n        set: function (v) {\n            this.i.acr = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"xAxisMinorInterval\", {\n        /**\n         * Gets or sets the frequency of displayed minor lines along the X-axis.\n         * Gets or sets the set value is a factor that determines how the minor lines will be displayed.\n        *\n        * `xAxisMinorInterval` determines how often to show a minor gridline along the x-axis.  This property is relevant only when the displayed series is a type with grouping, like column series.\n        *\n        * `xAxisMinorInterval` is expressed as a number between 0 and 1, representing the frequency of the interval.  To display minor gridlines representing 10ths of an item width, set `xAxisMinorInterval` to 0.1.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \txAxisMinorInterval={0.1}\n        *     xAxisMinorStroke=\"green\"\n        *     xAxisMinorStrokeThickness={1} />\n        * ```\n        */\n        get: function () {\n            return this.i.acu;\n        },\n        set: function (v) {\n            this.i.acu = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"xAxisGap\", {\n        /**\n         * Gets or sets the amount of space between adjacent categories for the X-axis.\n         * The gap is silently clamped to the range [0, 1] when used.\n        *\n        * Use the `xAxisGap` property to configure the spacing between items on the x-axis.  This property is relevant only when the displayed series is a type with item spacing, like column series.\n        *\n        * An `xAxisGap` of 0 allocates no space between items.  An `xAxisGap` of 1 allocates a space between items equal to the width of one item.\n        *\n        * To set the item spacing to 75% the width of one item, set the `xAxisGap` to 0.75, as in this code:\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \t xAxisGap={0.75} />\n        * ```\n        */\n        get: function () {\n            return this.i.acq;\n        },\n        set: function (v) {\n            this.i.acq = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"xAxisMinimumGapSize\", {\n        /**\n         * Gets or sets the minimum amount of pixels to use for the gap between categories, if possible.\n        */\n        get: function () {\n            return this.i.act;\n        },\n        set: function (v) {\n            this.i.act = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"xAxisMaximumGap\", {\n        /**\n         * Gets or sets the maximum gap value to allow. This defaults to 1.0.\n        */\n        get: function () {\n            return this.i.acs;\n        },\n        set: function (v) {\n            this.i.acs = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"xAxisOverlap\", {\n        /**\n         * Gets or sets the amount of overlap between adjacent categories for the X-axis.\n         * Gets or sets the overlap is silently clamped to the range [-1, 1] when used.\n        *\n        * Use the `xAxisOverlap` property to configure the spacing between items on the x-axis.  This property is relevant only when the displayed series is a type with item spacing, like column series.\n        *\n        * An `xAxisOverlap` of 0 places grouped items adjacent to each other.  An `xAxisOverlap` of 1 places grouped items in the same axis space, completely overlapping.  An `xAxisOverlap` of -1 places a space between grouped items equal to the width of one item.\n        *\n        * To place grouped items with 75% overlap, set the `xAxisOverlap` to 0.75, as in this code:\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \txAxisOverlap={0} />\n        * ```\n        */\n        get: function () {\n            return this.i.acv;\n        },\n        set: function (v) {\n            this.i.acv = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisInterval\", {\n        /**\n         * Gets or sets the distance between each label and grid line along the Y-axis.\n        *\n        * `yAxisInterval` determines how often to show a label, tickmark, and/or gridline along the y-axis.  Set this property to a number less than the numeric range of the y-axis.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tyAxisInterval={10} />\n        * ```\n        */\n        get: function () {\n            return this.i.acy;\n        },\n        set: function (v) {\n            this.i.acy = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"autoMarginAndAngleUpdateMode\", {\n        /**\n         * Gets or sets a whether the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.aay;\n        },\n        set: function (v) {\n            this.i.aay = ensureEnum(AutoMarginsAndAngleUpdateMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"shouldAutoExpandMarginForInitialLabels\", {\n        /**\n         * Gets or sets a whether the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.aby;\n        },\n        set: function (v) {\n            this.i.aby = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"shouldConsiderAutoRotationForInitialLabels\", {\n        /**\n         * Gets or sets a whether the series viewer should consider auto rotating labels to fit them in the initial view. This implies that ShouldAutoExpandMarginForInitialLabels is true.\n        */\n        get: function () {\n            return this.i.abz;\n        },\n        set: function (v) {\n            this.i.abz = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"autoExpandMarginExtraPadding\", {\n        /**\n         * Gets or sets the extra amount the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.aci;\n        },\n        set: function (v) {\n            this.i.aci = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"autoExpandMarginMaximumValue\", {\n        /**\n         * Gets or sets the maximum amount the series viewer should auto expand margins to accommodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.acj;\n        },\n        set: function (v) {\n            this.i.acj = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisFavorLabellingScaleEnd\", {\n        /**\n         * Gets or sets whether the axis should favor emitting a label at the end of the scale.\n        */\n        get: function () {\n            return this.i.ab3;\n        },\n        set: function (v) {\n            this.i.ab3 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"xAxisEnhancedIntervalPreferMoreCategoryLabels\", {\n        /**\n         * Gets or sets whether the x axis enhanced interval management should prefer to show all the labels if possible without collisions for supported types of category axes. This is for use with EnhancedIntervalMinimumCharacters = -1 and axes that have an integral interval.\n        */\n        get: function () {\n            return this.i.ab0;\n        },\n        set: function (v) {\n            this.i.ab0 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisEnhancedIntervalPreferMoreCategoryLabels\", {\n        /**\n         * Gets or sets whether the y axis enhanced interval management should prefer to show all the labels if possible without collisions for supported types of category axes. This is for use with EnhancedIntervalMinimumCharacters = -1 and axes that have an integral interval.\n        */\n        get: function () {\n            return this.i.ab2;\n        },\n        set: function (v) {\n            this.i.ab2 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisAutoRangeBufferMode\", {\n        /**\n         * Gets or sets how the numeric axis will adjust its range buffer to less closely fix the data from the series.\n        */\n        get: function () {\n            return this.i.aa0;\n        },\n        set: function (v) {\n            this.i.aa0 = ensureEnum(AxisRangeBufferMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisIsLogarithmic\", {\n        /**\n         * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.\n         * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.\n        *\n        * Set `yAxisIsLogarithmic` to true if you want the y-axis to be a logarithmic scale.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tyAxisIsLogarithmic=\"true\" />\n        * ```\n        */\n        get: function () {\n            return this.i.ab4;\n        },\n        set: function (v) {\n            this.i.ab4 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisLogarithmBase\", {\n        /**\n         * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.\n         * This property is effective only when YAxisIsLogarithmic is true.\n        *\n        * When `yAxisIsLogarithmic` is true, `yAxisLogarithmBase` sets the logarithm base of the y-axis scale.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tyAxisIsLogarithmic=\"true\"\n        *     yAxisLogarithmBase={2} />\n        * ```\n        */\n        get: function () {\n            return this.i.ac5;\n        },\n        set: function (v) {\n            this.i.ac5 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisMinimumValue\", {\n        /**\n         * Gets or sets the data value corresponding to the minimum value of the Y-axis.\n        *\n        * `yAxisMaximumValue` determines the minimum of the y-axis.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tyAxisMinimumValue={42} />\n        * ```\n        */\n        get: function () {\n            return this.i.ac0;\n        },\n        set: function (v) {\n            this.i.ac0 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisMaximumValue\", {\n        /**\n         * Gets or sets the data value corresponding to the maximum value of the Y-axis.\n        *\n        * `yAxisMaximumValue` determines the maximum of the y-axis.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tyAxisMaximumValue={150} />\n        * ```\n        */\n        get: function () {\n            return this.i.acz;\n        },\n        set: function (v) {\n            this.i.acz = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisMinorInterval\", {\n        /**\n         * Gets or sets the frequency of displayed minor lines along the Y-axis.\n        *\n        * `yAxisMinorInterval` determines how often to show a minor gridline along the y-axis.  Set this property to a number less than the y-axis interval.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tyAxisMinorInterval={2}\n        *     yAxisMinorStroke=\"green\"\n        *     yAxisMinorStrokeThickness={1} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ac1;\n        },\n        set: function (v) {\n            this.i.ac1 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"xAxisActualMinimum\", {\n        /**\n         * Gets the current minimum value for the X-axis.\n        */\n        get: function () {\n            return this.i.acp;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"xAxisActualMaximum\", {\n        /**\n         * Gets the current maximum value for the X-axis.\n        */\n        get: function () {\n            return this.i.aco;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisActualMinimum\", {\n        /**\n         * Gets the current minimum value for the Y-axis.\n        */\n        get: function () {\n            return this.i.acx;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisActualMaximum\", {\n        /**\n         * Gets the current maximum value for the Y-axis.\n        */\n        get: function () {\n            return this.i.acw;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"negativeBrushes\", {\n        /**\n         * Gets or sets the palette used for coloring negative items of Waterfall chart type.\n        *\n        * `negativeBrushes` controls the brushes used by the chart for negative data, when the `chartType` is one that supports negative brushes.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tnegativeBrushes=\"#ff0000, #cc0000, #aa0000\" />\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.aav);\n        },\n        set: function (v) {\n            this.i.aav = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"negativeOutlines\", {\n        /**\n         * Brushes to use for drawing negative elements, when using a chart type with contextual coloring, such as Waterfall.\n        *\n        * `negativeOutlines` controls the outlines used by the chart for negative data, when the `chartType` is one that supports negative brushes.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tnegativeOutlines=\"#0000ff, #0000cc, #0000aa\" />\n        * ```\n        */\n        get: function () {\n            return fromBrushCollection(this.i.aaw);\n        },\n        set: function (v) {\n            this.i.aaw = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"yAxisAbbreviateLargeNumbers\", {\n        /**\n         * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.\n        *\n        * To abbreviate on the y-axis using formats like \"1K\" or \"1M,\" set `yAxisAbbreviateLargeNumbers` to true.\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tdataSource={this.state.data}\n        * \tyAxisAbbreviateLargeNumbers=\"true\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ab1;\n        },\n        set: function (v) {\n            this.i.ab1 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"isCategoryHighlightingEnabled\", {\n        /**\n         * Gets or sets whether the category should be highlighted when hovered\n        */\n        get: function () {\n            return this.i.abu;\n        },\n        set: function (v) {\n            this.i.abu = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryChart.prototype, \"isItemHighlightingEnabled\", {\n        /**\n         * Gets or sets whether the item should be highlighted when hovered\n        */\n        get: function () {\n            return this.i.abv;\n        },\n        set: function (v) {\n            this.i.abv = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n * Export serialized visual data.\n\r\n*/\n    IgrCategoryChart.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.ada();\n        return (iv);\n    };\n    IgrCategoryChart.prototype.recalculateMarginAutoExpansion = function () {\n        this.i.ad9();\n    };\n    IgrCategoryChart.prototype.getCurrentXAxisActualMinimum = function () {\n        var iv = this.i.acl();\n        return (iv);\n    };\n    IgrCategoryChart.prototype.getCurrentYAxisActualMinimum = function () {\n        var iv = this.i.acn();\n        return (iv);\n    };\n    IgrCategoryChart.prototype.getCurrentXAxisActualMaximum = function () {\n        var iv = this.i.ack();\n        return (iv);\n    };\n    IgrCategoryChart.prototype.getCurrentYAxisActualMaximum = function () {\n        var iv = this.i.acm();\n        return (iv);\n    };\n    return IgrCategoryChart;\n}(IgrXYChart));\nexport { IgrCategoryChart };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}