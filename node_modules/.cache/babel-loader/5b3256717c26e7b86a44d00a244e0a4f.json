{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { PercentagePriceOscillatorIndicator } from \"./PercentagePriceOscillatorIndicator\";\n/**\n * Represents a IgxDataChartComponent percentage price oscillator series.\n * Default required members: High, Low, Volume\n*\n* You can use the `IgrPercentagePriceOscillatorIndicator` to show the difference between two moving averages.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPercentagePriceOscillatorIndicator\n*     name=\"series\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"/>\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPercentagePriceOscillatorIndicator({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\n\nvar IgrPercentagePriceOscillatorIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrPercentagePriceOscillatorIndicator, _super);\n\n  function IgrPercentagePriceOscillatorIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrPercentagePriceOscillatorIndicator.prototype.createImplementation = function () {\n    return new PercentagePriceOscillatorIndicator();\n  };\n\n  Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function get() {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"shortPeriod\", {\n    /**\n     * Gets or sets the short moving average period for the current PercentagePriceOscillatorIndicator object.\n     * The typical, and initial, value for short PPO periods is 10.\n    *\n    * You can use the `shortPeriod` to set the short moving average period.\n    *\n    * ```ts\n    * this.series.shortPeriod = 10;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *    <IgrPercentagePriceOscillatorIndicator\n    *     name=\"series\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     shortPeriod = {10}/>\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function get() {\n      return this.i.shortPeriod;\n    },\n    set: function set(v) {\n      this.i.shortPeriod = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"longPeriod\", {\n    /**\n     * Gets or sets the long moving average period for the current PercentagePriceOscillatorIndicator object.\n     * The typical, and initial, value for long PVO periods is 30.\n    *\n    * You can use the `longPeriod` to set the long moving average period.\n    *\n    * ```ts\n    * this.series.longPeriod = 30;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *    <IgrPercentagePriceOscillatorIndicator\n    *     name=\"series\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    * \tlongPeriod = {30} />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function get() {\n      return this.i.longPeriod;\n    },\n    set: function set(v) {\n      this.i.longPeriod = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrPercentagePriceOscillatorIndicator;\n}(IgrStrategyBasedIndicator);\n\nexport { IgrPercentagePriceOscillatorIndicator };","map":{"version":3,"names":["__extends","IgrStrategyBasedIndicator","PercentagePriceOscillatorIndicator","IgrPercentagePriceOscillatorIndicator","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","shortPeriod","set","v","longPeriod"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-charts/esm5/lib/igr-percentage-price-oscillator-indicator.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { PercentagePriceOscillatorIndicator } from \"./PercentagePriceOscillatorIndicator\";\n/**\n * Represents a IgxDataChartComponent percentage price oscillator series.\n * Default required members: High, Low, Volume\n*\n* You can use the `IgrPercentagePriceOscillatorIndicator` to show the difference between two moving averages.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPercentagePriceOscillatorIndicator\n*     name=\"series\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"/>\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPercentagePriceOscillatorIndicator({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\nvar IgrPercentagePriceOscillatorIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrPercentagePriceOscillatorIndicator, _super);\n    function IgrPercentagePriceOscillatorIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrPercentagePriceOscillatorIndicator.prototype.createImplementation = function () {\n        return new PercentagePriceOscillatorIndicator();\n    };\n    Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"shortPeriod\", {\n        /**\n         * Gets or sets the short moving average period for the current PercentagePriceOscillatorIndicator object.\n         * The typical, and initial, value for short PPO periods is 10.\n        *\n        * You can use the `shortPeriod` to set the short moving average period.\n        *\n        * ```ts\n        * this.series.shortPeriod = 10;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *    <IgrPercentagePriceOscillatorIndicator\n        *     name=\"series\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     shortPeriod = {10}/>\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.shortPeriod;\n        },\n        set: function (v) {\n            this.i.shortPeriod = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPercentagePriceOscillatorIndicator.prototype, \"longPeriod\", {\n        /**\n         * Gets or sets the long moving average period for the current PercentagePriceOscillatorIndicator object.\n         * The typical, and initial, value for long PVO periods is 30.\n        *\n        * You can use the `longPeriod` to set the long moving average period.\n        *\n        * ```ts\n        * this.series.longPeriod = 30;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *    <IgrPercentagePriceOscillatorIndicator\n        *     name=\"series\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        * \tlongPeriod = {30} />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.longPeriod;\n        },\n        set: function (v) {\n            this.i.longPeriod = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrPercentagePriceOscillatorIndicator;\n}(IgrStrategyBasedIndicator));\nexport { IgrPercentagePriceOscillatorIndicator };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA,SAASC,kCAAT,QAAmD,sCAAnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,qCAAqC;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;EACvFJ,SAAS,CAACG,qCAAD,EAAwCC,MAAxC,CAAT;;EACA,SAASD,qCAAT,CAA+CE,KAA/C,EAAsD;IAClD,OAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;EACH;;EACDF,qCAAqC,CAACI,SAAtC,CAAgDC,oBAAhD,GAAuE,YAAY;IAC/E,OAAO,IAAIN,kCAAJ,EAAP;EACH,CAFD;;EAGAO,MAAM,CAACC,cAAP,CAAsBP,qCAAqC,CAACI,SAA5D,EAAuE,GAAvE,EAA4E;IACxE;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKC,eAAZ;IACH,CANuE;IAOxEC,UAAU,EAAE,KAP4D;IAQxEC,YAAY,EAAE;EAR0D,CAA5E;EAUAL,MAAM,CAACC,cAAP,CAAsBP,qCAAqC,CAACI,SAA5D,EAAuE,aAAvE,EAAsF;IAClF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOC,WAAd;IACH,CAjCiF;IAkClFC,GAAG,EAAE,aAAUC,CAAV,EAAa;MACd,KAAKH,CAAL,CAAOC,WAAP,GAAqB,CAACE,CAAtB;IACH,CApCiF;IAqClFL,UAAU,EAAE,KArCsE;IAsClFC,YAAY,EAAE;EAtCoE,CAAtF;EAwCAL,MAAM,CAACC,cAAP,CAAsBP,qCAAqC,CAACI,SAA5D,EAAuE,YAAvE,EAAqF;IACjF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOI,UAAd;IACH,CAjCgF;IAkCjFF,GAAG,EAAE,aAAUC,CAAV,EAAa;MACd,KAAKH,CAAL,CAAOI,UAAP,GAAoB,CAACD,CAArB;IACH,CApCgF;IAqCjFL,UAAU,EAAE,KArCqE;IAsCjFC,YAAY,EAAE;EAtCmE,CAArF;EAwCA,OAAOX,qCAAP;AACH,CAnGwE,CAmGvEF,yBAnGuE,CAAzE;;AAoGA,SAASE,qCAAT"},"metadata":{},"sourceType":"module"}