{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { LineSeries } from \"./LineSeries\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent line series.\n * Displays trend over time or ordered categories.\n * Useful when there are many data points and the order is important.\n*\n* `IgrLineSeries` belongs to a group of `IgrCategorySeries` and it is rendered using a collection of points connected by straight line segments.\n*\n* ```ts\n* <IgrDataChart\n* \tdataSource={this.data} >\n* <IgrCategoryXAxis name=\"xAxis\"\n* \tlabel=\"Country\" />\n* <IgrNumericYAxis name=\"yAxis\"\n* \tminimumValue={0}  />\n* <IgrLineSeries\n* \tname=\"series1\"\n* \txAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Coal\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* const series2 = new IgrLineSeries({ name: \"series2\" });\n* series2.markerType = MarkerType.Circle;\n* series2.valueMemberPath = \"RUS\";\n* series2.title = \"Russia\";\n* series2.xAxisName = \"xAxis\";\n* series2.yAxisName = \"yAxis\";\n* series2.thickness = 2;\n* ```\n*/\n\nvar IgrLineSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrLineSeries, _super);\n\n  function IgrLineSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrLineSeries.prototype.createImplementation = function () {\n    return new LineSeries();\n  };\n\n  Object.defineProperty(IgrLineSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function get() {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrLineSeries.prototype, \"isLineOnly\", {\n    /**\n     * Gets whether the current series shows only line shapes.\n    */\n    get: function get() {\n      return this.i.d1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrLineSeries.prototype, \"isAreaOrLine\", {\n    /**\n     * Gets whether the current series shows an area or line shape.\n    *\n    * Gets whether the `IgrSeries` shows an area or a line shape.\n    *\n    * ```ts\n    * let isAreaOrLine: boolean = series.isAreaOrLine;\n    * ```\n    */\n    get: function get() {\n      return this.i.de;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrLineSeries.prototype, \"unknownValuePlotting\", {\n    /**\n     * Determines how unknown values will be plotted on the chart.\n     * Null and Double.NaN are two examples of unknown values.\n    *\n    * Determines how unknown values will be plotted for the `IgrSeries`. This can be set to `LinearInterpolate` to create a continous shape or `DontPlot` to create breaks in the series.\n    *\n    * Null and Double.NaN are two examples of unknown values.\n    *\n    * ```ts\n    * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    * \tdataSource={this.data} >\n    * <IgrCategoryXAxis name=\"xAxis\"\n    * \tlabel=\"Country\" />\n    * <IgrNumericYAxis name=\"yAxis\"\n    * \tminimumValue={0}  />\n    * <IgrLineSeries\n    * \tname=\"series1\"\n    * \txAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Coal\"\n    * \tunknownValuePlotting:\"LinearInterpolate\"/>\n    * ```\n    */\n    get: function get() {\n      return this.i.unknownValuePlotting;\n    },\n    set: function set(v) {\n      this.i.unknownValuePlotting = ensureEnum(UnknownValuePlotting_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrLineSeries;\n}(IgrHorizontalAnchoredCategorySeries);\n\nexport { IgrLineSeries };","map":{"version":3,"names":["__extends","UnknownValuePlotting_$type","IgrHorizontalAnchoredCategorySeries","LineSeries","ensureEnum","IgrLineSeries","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","d1","de","unknownValuePlotting","set","v"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-charts/esm5/lib/igr-line-series.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { LineSeries } from \"./LineSeries\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent line series.\n * Displays trend over time or ordered categories.\n * Useful when there are many data points and the order is important.\n*\n* `IgrLineSeries` belongs to a group of `IgrCategorySeries` and it is rendered using a collection of points connected by straight line segments.\n*\n* ```ts\n* <IgrDataChart\n* \tdataSource={this.data} >\n* <IgrCategoryXAxis name=\"xAxis\"\n* \tlabel=\"Country\" />\n* <IgrNumericYAxis name=\"yAxis\"\n* \tminimumValue={0}  />\n* <IgrLineSeries\n* \tname=\"series1\"\n* \txAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Coal\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* const series2 = new IgrLineSeries({ name: \"series2\" });\n* series2.markerType = MarkerType.Circle;\n* series2.valueMemberPath = \"RUS\";\n* series2.title = \"Russia\";\n* series2.xAxisName = \"xAxis\";\n* series2.yAxisName = \"yAxis\";\n* series2.thickness = 2;\n* ```\n*/\nvar IgrLineSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrLineSeries, _super);\n    function IgrLineSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrLineSeries.prototype.createImplementation = function () {\n        return new LineSeries();\n    };\n    Object.defineProperty(IgrLineSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrLineSeries.prototype, \"isLineOnly\", {\n        /**\n         * Gets whether the current series shows only line shapes.\n        */\n        get: function () {\n            return this.i.d1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrLineSeries.prototype, \"isAreaOrLine\", {\n        /**\n         * Gets whether the current series shows an area or line shape.\n        *\n        * Gets whether the `IgrSeries` shows an area or a line shape.\n        *\n        * ```ts\n        * let isAreaOrLine: boolean = series.isAreaOrLine;\n        * ```\n        */\n        get: function () {\n            return this.i.de;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrLineSeries.prototype, \"unknownValuePlotting\", {\n        /**\n         * Determines how unknown values will be plotted on the chart.\n         * Null and Double.NaN are two examples of unknown values.\n        *\n        * Determines how unknown values will be plotted for the `IgrSeries`. This can be set to `LinearInterpolate` to create a continous shape or `DontPlot` to create breaks in the series.\n        *\n        * Null and Double.NaN are two examples of unknown values.\n        *\n        * ```ts\n        * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        * \tdataSource={this.data} >\n        * <IgrCategoryXAxis name=\"xAxis\"\n        * \tlabel=\"Country\" />\n        * <IgrNumericYAxis name=\"yAxis\"\n        * \tminimumValue={0}  />\n        * <IgrLineSeries\n        * \tname=\"series1\"\n        * \txAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Coal\"\n        * \tunknownValuePlotting:\"LinearInterpolate\"/>\n        * ```\n        */\n        get: function () {\n            return this.i.unknownValuePlotting;\n        },\n        set: function (v) {\n            this.i.unknownValuePlotting = ensureEnum(UnknownValuePlotting_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrLineSeries;\n}(IgrHorizontalAnchoredCategorySeries));\nexport { IgrLineSeries };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,0BAAT,QAA2C,qBAA3C;AACA,SAASC,mCAAT,QAAoD,2CAApD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;EAC/DN,SAAS,CAACK,aAAD,EAAgBC,MAAhB,CAAT;;EACA,SAASD,aAAT,CAAuBE,KAAvB,EAA8B;IAC1B,OAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;EACH;;EACDF,aAAa,CAACI,SAAd,CAAwBC,oBAAxB,GAA+C,YAAY;IACvD,OAAO,IAAIP,UAAJ,EAAP;EACH,CAFD;;EAGAQ,MAAM,CAACC,cAAP,CAAsBP,aAAa,CAACI,SAApC,EAA+C,GAA/C,EAAoD;IAChD;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKC,eAAZ;IACH,CAN+C;IAOhDC,UAAU,EAAE,KAPoC;IAQhDC,YAAY,EAAE;EARkC,CAApD;EAUAL,MAAM,CAACC,cAAP,CAAsBP,aAAa,CAACI,SAApC,EAA+C,YAA/C,EAA6D;IACzD;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOC,EAAd;IACH,CANwD;IAOzDH,UAAU,EAAE,KAP6C;IAQzDC,YAAY,EAAE;EAR2C,CAA7D;EAUAL,MAAM,CAACC,cAAP,CAAsBP,aAAa,CAACI,SAApC,EAA+C,cAA/C,EAA+D;IAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOE,EAAd;IACH,CAZ0D;IAa3DJ,UAAU,EAAE,KAb+C;IAc3DC,YAAY,EAAE;EAd6C,CAA/D;EAgBAL,MAAM,CAACC,cAAP,CAAsBP,aAAa,CAACI,SAApC,EAA+C,sBAA/C,EAAuE;IACnE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOG,oBAAd;IACH,CA9BkE;IA+BnEC,GAAG,EAAE,aAAUC,CAAV,EAAa;MACd,KAAKL,CAAL,CAAOG,oBAAP,GAA8BhB,UAAU,CAACH,0BAAD,EAA6BqB,CAA7B,CAAxC;IACH,CAjCkE;IAkCnEP,UAAU,EAAE,KAlCuD;IAmCnEC,YAAY,EAAE;EAnCqD,CAAvE;EAqCA,OAAOX,aAAP;AACH,CAlFgD,CAkF/CH,mCAlF+C,CAAjD;;AAmFA,SAASG,aAAT"},"metadata":{},"sourceType":"module"}