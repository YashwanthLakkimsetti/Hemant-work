{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { AsyncCompletedEventArgsDescriptionMetadata } from \"./AsyncCompletedEventArgsDescriptionMetadata\";\nimport { ShapeFilterRecordEventArgsDescriptionMetadata } from \"./ShapeFilterRecordEventArgsDescriptionMetadata\";\nimport { ShapeDataSourceDescription } from \"./ShapeDataSourceDescription\";\n/**\n * @hidden\n */\n\nvar ShapeDataSourceDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(ShapeDataSourceDescriptionMetadata, _super);\n\n  function ShapeDataSourceDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ShapeDataSourceDescriptionMetadata.b = function (a) {\n    if (ShapeDataSourceDescriptionMetadata.a == null) {\n      ShapeDataSourceDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      ShapeDataSourceDescriptionMetadata.c(ShapeDataSourceDescriptionMetadata.a);\n    }\n\n    if (a.g(ShapeDataSourceDescriptionMetadata.a)) {\n      return;\n    }\n\n    a.s(ShapeDataSourceDescriptionMetadata.a);\n    AsyncCompletedEventArgsDescriptionMetadata.d(a);\n    ShapeFilterRecordEventArgsDescriptionMetadata.d(a);\n  };\n\n  ShapeDataSourceDescriptionMetadata.c = function (a) {\n    a.item(\"WorldRect\", \"Rect\");\n    a.item(\"ComputedWorldRect\", \"Rect\");\n    a.item(\"DeferImportCompleted\", \"Boolean\");\n    a.item(\"ShapefileSource\", \"String\");\n    a.item(\"DatabaseSource\", \"String\");\n    a.item(\"ImportPendingRef\", \"EventRef::importPending\");\n    a.item(\"ImportCompletedRef\", \"EventRef::importCompleted\");\n    a.item(\"FilterRef\", \"EventRef::filter\");\n  };\n\n  ShapeDataSourceDescriptionMetadata.d = function (a) {\n    ShapeDataSourceDescriptionMetadata.b(a);\n    a.u(\"ShapeDataSource\", function () {\n      return new ShapeDataSourceDescription();\n    });\n    a.t(\"ShapeDataSource\", ShapeDataSourceDescriptionMetadata.a);\n  };\n\n  ShapeDataSourceDescriptionMetadata.$t = markType(ShapeDataSourceDescriptionMetadata, 'ShapeDataSourceDescriptionMetadata');\n  ShapeDataSourceDescriptionMetadata.a = null;\n  return ShapeDataSourceDescriptionMetadata;\n}(Base);\n\nexport { ShapeDataSourceDescriptionMetadata };","map":{"version":3,"names":["__extends","Base","String_$type","markType","Dictionary$2","AsyncCompletedEventArgsDescriptionMetadata","ShapeFilterRecordEventArgsDescriptionMetadata","ShapeDataSourceDescription","ShapeDataSourceDescriptionMetadata","_super","apply","arguments","b","a","c","g","s","d","item","u","t","$t"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-core/esm5/lib/ShapeDataSourceDescriptionMetadata.js"],"sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { AsyncCompletedEventArgsDescriptionMetadata } from \"./AsyncCompletedEventArgsDescriptionMetadata\";\nimport { ShapeFilterRecordEventArgsDescriptionMetadata } from \"./ShapeFilterRecordEventArgsDescriptionMetadata\";\nimport { ShapeDataSourceDescription } from \"./ShapeDataSourceDescription\";\n/**\n * @hidden\n */\nvar ShapeDataSourceDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ShapeDataSourceDescriptionMetadata, _super);\n    function ShapeDataSourceDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ShapeDataSourceDescriptionMetadata.b = function (a) {\n        if (ShapeDataSourceDescriptionMetadata.a == null) {\n            ShapeDataSourceDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            ShapeDataSourceDescriptionMetadata.c(ShapeDataSourceDescriptionMetadata.a);\n        }\n        if (a.g(ShapeDataSourceDescriptionMetadata.a)) {\n            return;\n        }\n        a.s(ShapeDataSourceDescriptionMetadata.a);\n        AsyncCompletedEventArgsDescriptionMetadata.d(a);\n        ShapeFilterRecordEventArgsDescriptionMetadata.d(a);\n    };\n    ShapeDataSourceDescriptionMetadata.c = function (a) {\n        a.item(\"WorldRect\", \"Rect\");\n        a.item(\"ComputedWorldRect\", \"Rect\");\n        a.item(\"DeferImportCompleted\", \"Boolean\");\n        a.item(\"ShapefileSource\", \"String\");\n        a.item(\"DatabaseSource\", \"String\");\n        a.item(\"ImportPendingRef\", \"EventRef::importPending\");\n        a.item(\"ImportCompletedRef\", \"EventRef::importCompleted\");\n        a.item(\"FilterRef\", \"EventRef::filter\");\n    };\n    ShapeDataSourceDescriptionMetadata.d = function (a) {\n        ShapeDataSourceDescriptionMetadata.b(a);\n        a.u(\"ShapeDataSource\", function () { return new ShapeDataSourceDescription(); });\n        a.t(\"ShapeDataSource\", ShapeDataSourceDescriptionMetadata.a);\n    };\n    ShapeDataSourceDescriptionMetadata.$t = markType(ShapeDataSourceDescriptionMetadata, 'ShapeDataSourceDescriptionMetadata');\n    ShapeDataSourceDescriptionMetadata.a = null;\n    return ShapeDataSourceDescriptionMetadata;\n}(Base));\nexport { ShapeDataSourceDescriptionMetadata };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,YAAf,EAA6BC,QAA7B,QAA6C,QAA7C;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,0CAAT,QAA2D,8CAA3D;AACA,SAASC,6CAAT,QAA8D,iDAA9D;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA;AACA;AACA;;AACA,IAAIC,kCAAkC;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;EACpFT,SAAS,CAACQ,kCAAD,EAAqCC,MAArC,CAAT;;EACA,SAASD,kCAAT,GAA8C;IAC1C,OAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;EACH;;EACDH,kCAAkC,CAACI,CAAnC,GAAuC,UAAUC,CAAV,EAAa;IAChD,IAAIL,kCAAkC,CAACK,CAAnC,IAAwC,IAA5C,EAAkD;MAC9CL,kCAAkC,CAACK,CAAnC,GAAuC,IAAIT,YAAJ,CAAiBF,YAAjB,EAA+BA,YAA/B,EAA6C,CAA7C,CAAvC;MACAM,kCAAkC,CAACM,CAAnC,CAAqCN,kCAAkC,CAACK,CAAxE;IACH;;IACD,IAAIA,CAAC,CAACE,CAAF,CAAIP,kCAAkC,CAACK,CAAvC,CAAJ,EAA+C;MAC3C;IACH;;IACDA,CAAC,CAACG,CAAF,CAAIR,kCAAkC,CAACK,CAAvC;IACAR,0CAA0C,CAACY,CAA3C,CAA6CJ,CAA7C;IACAP,6CAA6C,CAACW,CAA9C,CAAgDJ,CAAhD;EACH,CAXD;;EAYAL,kCAAkC,CAACM,CAAnC,GAAuC,UAAUD,CAAV,EAAa;IAChDA,CAAC,CAACK,IAAF,CAAO,WAAP,EAAoB,MAApB;IACAL,CAAC,CAACK,IAAF,CAAO,mBAAP,EAA4B,MAA5B;IACAL,CAAC,CAACK,IAAF,CAAO,sBAAP,EAA+B,SAA/B;IACAL,CAAC,CAACK,IAAF,CAAO,iBAAP,EAA0B,QAA1B;IACAL,CAAC,CAACK,IAAF,CAAO,gBAAP,EAAyB,QAAzB;IACAL,CAAC,CAACK,IAAF,CAAO,kBAAP,EAA2B,yBAA3B;IACAL,CAAC,CAACK,IAAF,CAAO,oBAAP,EAA6B,2BAA7B;IACAL,CAAC,CAACK,IAAF,CAAO,WAAP,EAAoB,kBAApB;EACH,CATD;;EAUAV,kCAAkC,CAACS,CAAnC,GAAuC,UAAUJ,CAAV,EAAa;IAChDL,kCAAkC,CAACI,CAAnC,CAAqCC,CAArC;IACAA,CAAC,CAACM,CAAF,CAAI,iBAAJ,EAAuB,YAAY;MAAE,OAAO,IAAIZ,0BAAJ,EAAP;IAA0C,CAA/E;IACAM,CAAC,CAACO,CAAF,CAAI,iBAAJ,EAAuBZ,kCAAkC,CAACK,CAA1D;EACH,CAJD;;EAKAL,kCAAkC,CAACa,EAAnC,GAAwClB,QAAQ,CAACK,kCAAD,EAAqC,oCAArC,CAAhD;EACAA,kCAAkC,CAACK,CAAnC,GAAuC,IAAvC;EACA,OAAOL,kCAAP;AACH,CAnCqE,CAmCpEP,IAnCoE,CAAtE;;AAoCA,SAASO,kCAAT"},"metadata":{},"sourceType":"module"}