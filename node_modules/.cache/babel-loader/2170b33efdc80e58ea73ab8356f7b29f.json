{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, typeCast, String_$type, markType } from \"./type\";\nimport { DiffApplyInfo } from \"./DiffApplyInfo\";\nimport { DescriptionTreeNode } from \"./DescriptionTreeNode\";\nimport { List$1 } from \"./List$1\";\nimport { DescriptionTreeAction } from \"./DescriptionTreeAction\";\nimport { DescriptionPropertyValue } from \"./DescriptionPropertyValue\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { DescriptionTreeReconciler_TreeModeData } from \"./DescriptionTreeReconciler_TreeModeData\";\n/**\n * @hidden\n */\n\nvar DescriptionTreeReconciler =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(DescriptionTreeReconciler, _super);\n\n  function DescriptionTreeReconciler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DescriptionTreeReconciler.a = function (a, b) {\n    var c = new DiffApplyInfo();\n\n    for (var d = 0; d < b.count; d++) {\n      var e = b._inner[d];\n\n      switch (e.a) {\n        case 0:\n          if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n            var f = e.g.f;\n            c.a.add_1(f);\n          }\n\n          e.b.m(e.i, e.f);\n\n          if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n            var g = e.f.f;\n\n            if (c.a.contains(g)) {\n              c.a.remove(g);\n            }\n\n            c.c.add(e);\n          }\n\n          break;\n\n        case 1:\n          if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n            var h = e.g.f;\n            c.a.add_1(h);\n          }\n\n          e.b.l(e.i);\n          break;\n\n        case 3:\n          {\n            var i = e.b.a(e.i).b;\n            var j = i[e.e];\n\n            if (typeCast(DescriptionTreeNode.$, j) !== null) {\n              var k = j.f;\n              c.a.add_1(k);\n            }\n\n            i[e.e] = e.f;\n\n            if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n              var l = e.f.f;\n\n              if (c.a.contains(l)) {\n                c.a.remove(l);\n              }\n\n              c.b.add(e);\n            }\n          }\n          break;\n\n        case 4:\n          {\n            var m = e.b.a(e.i).b;\n            var n = m[e.e];\n\n            if (typeCast(DescriptionTreeNode.$, n) !== null) {\n              var o = n.f;\n              c.a.add_1(o);\n            }\n\n            var p = new Array(m.length - 1);\n            var q = 0;\n\n            for (var r = 0; r < m.length; r++) {\n              if (r != e.e) {\n                p[q] = m[r];\n                q++;\n              }\n            }\n\n            e.b.m(e.i, p);\n          }\n          break;\n\n        case 2:\n          {\n            if (e.b == null && a == null) {\n              c.d.add(e);\n            } else {\n              var s = e.b.a(e.i).b;\n              var t = new Array(s.length + 1);\n              var u = 0;\n\n              for (var v = 0; v < t.length; v++) {\n                if (v == e.d) {\n                  t[v] = e.f;\n                } else {\n                  t[v] = s[u];\n                  u++;\n                }\n              }\n\n              e.b.m(e.i, t);\n\n              if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n                var w = e.f.f;\n\n                if (c.a.contains(w)) {\n                  c.a.remove(w);\n                }\n\n                c.b.add(e);\n              }\n            }\n          }\n          break;\n\n        case 5:\n          {\n            var x = e.b.a(e.i).b;\n\n            for (var y = 0; y < x.length; y++) {\n              var z = x[y];\n\n              if (typeCast(DescriptionTreeNode.$, z) !== null) {\n                var aa = z.f;\n                c.a.add_1(aa);\n              }\n            }\n\n            e.b.m(e.i, []);\n          }\n          break;\n      }\n    }\n\n    return c;\n  };\n\n  DescriptionTreeReconciler.c = function (a, b, c) {\n    var d = new List$1(DescriptionTreeAction.$, 0);\n\n    if (a == null && b == null) {\n      return d;\n    }\n\n    if (a != null && b == null) {\n      var e = new DescriptionTreeAction();\n      e.a = 4;\n      e.e = 0;\n      e.g = a;\n      e.c = null;\n      e.i = null;\n      d.add(e);\n      return d;\n    }\n\n    if (a == null && b != null) {\n      var f = new DescriptionTreeAction();\n      f.a = 2;\n      f.e = 0;\n      f.f = b;\n      f.c = null;\n      f.i = null;\n      d.add(f);\n      return d;\n    }\n\n    if (b.h != a.h) {\n      var g = new DescriptionTreeAction();\n      g.a = 3;\n      g.e = 0;\n      g.g = a;\n      g.f = b;\n      g.c = null;\n      g.i = null;\n      d.add(g);\n      return d;\n    }\n\n    DescriptionTreeReconciler.g(d, a, b, c);\n    return d;\n  };\n\n  DescriptionTreeReconciler.g = function (a, b, c, d) {\n    c.f = b.f;\n    var e = DescriptionTreeReconciler.e(b);\n    var f = DescriptionTreeReconciler.e(c);\n    var g = new List$1(DescriptionPropertyValue.$, 0);\n    var h = new List$1(DescriptionPropertyValue.$, 0);\n    var i = new List$1(DescriptionPropertyValue.$, 0);\n\n    for (var j = 0; j < e.count; j++) {\n      var k = e._inner[j];\n\n      if (c.b(k.c)) {\n        if (!Base.equalsStatic(k, c.a(k.c))) {\n          var l = c.a(k.c);\n\n          if (typeCast(DescriptionTreeNode.$, k.b) !== null && typeCast(DescriptionTreeNode.$, l.b) !== null) {\n            var m = k.b;\n            var n = l.b;\n\n            if (m.h == n.h) {\n              if (!m.b(\"Name\") && !n.b(\"Name\") || m.b(\"Name\") && n.b(\"Name\") && m.a(\"Name\").b == n.a(\"Name\").b) {\n                DescriptionTreeReconciler.g(a, m, n, d);\n              } else {\n                i.add(c.a(k.c));\n              }\n            } else {\n              i.add(c.a(k.c));\n            }\n          } else {\n            i.add(c.a(k.c));\n          }\n        }\n      } else {\n        if (!d) {\n          g.add(k);\n        }\n      }\n    }\n\n    for (var o = 0; o < f.count; o++) {\n      var p = f._inner[o];\n\n      if (!b.b(p.c)) {\n        h.add(p);\n      }\n    }\n\n    for (var q = 0; q < g.count; q++) {\n      var r = g._inner[q];\n      var s = new DescriptionTreeAction();\n      s.b = b;\n      s.a = 1;\n      s.i = r.c;\n      s.c = r.a;\n      s.g = r.b;\n      a.add(s);\n    }\n\n    for (var t = 0; t < h.count; t++) {\n      var u = h._inner[t];\n      var v = new DescriptionTreeAction();\n      v.b = b;\n      v.a = 0;\n      v.i = u.c;\n      v.c = u.a;\n      v.f = u.b;\n      v.g = null;\n      a.add(v);\n    }\n\n    for (var w = 0; w < i.count; w++) {\n      var x = i._inner[w];\n      var y = b.a(x.c).b;\n      var z = x.b;\n\n      if (!Base.equalsStatic(z, y)) {\n        var aa = new DescriptionTreeAction();\n        aa.b = b;\n        aa.a = 0;\n        aa.i = x.c;\n        aa.c = x.a;\n        aa.f = x.b;\n        aa.g = b.a(x.c).b;\n        a.add(aa);\n      }\n    }\n\n    var ab = DescriptionTreeReconciler.d(b);\n    var ac = DescriptionTreeReconciler.d(c);\n    var ad = new List$1(DescriptionPropertyValue.$, 0);\n    var ae = new List$1(DescriptionPropertyValue.$, 0);\n    var af = new List$1(DescriptionPropertyValue.$, 0);\n\n    for (var ag = 0; ag < ab.count; ag++) {\n      var ah = ab._inner[ag];\n\n      if (c.b(ah.c)) {\n        if (!DescriptionTreeReconciler.b(ah.b, c.a(ah.c).b)) {\n          af.add(c.a(ah.c));\n        } else {\n          var ai = ah.b;\n          var aj = c.a(ah.c).b;\n\n          for (var ak = 0; ak < ai.length; ak++) {\n            var al = ai[ak];\n            var am = aj[ak];\n\n            if (typeCast(DescriptionTreeNode.$, al) !== null && typeCast(DescriptionTreeNode.$, am) !== null) {\n              var an = al;\n              var ao = am;\n\n              if (an.h == ao.h) {\n                DescriptionTreeReconciler.g(a, an, ao, d);\n              } else {\n                var ap = new DescriptionTreeAction();\n                ap.i = ah.c;\n                ap.c = ah.a;\n                ap.b = b;\n                ap.a = 3;\n                ap.e = ak;\n                ap.d = ak;\n                ap.g = an;\n                ap.f = ao;\n                a.add(ap);\n              }\n            } else {\n              if (!Base.equalsStatic(al, am)) {\n                var aq = new DescriptionTreeAction();\n                aq.i = ah.c;\n                aq.c = ah.a;\n                aq.b = b;\n                aq.a = 3;\n                aq.e = ak;\n                aq.d = ak;\n                aq.g = al;\n                aq.f = am;\n                a.add(aq);\n              }\n            }\n          }\n        }\n      } else {\n        if (!d) {\n          ad.add(ah);\n        }\n      }\n    }\n\n    for (var ar = 0; ar < ac.count; ar++) {\n      var as = ac._inner[ar];\n\n      if (!b.b(as.c)) {\n        ae.add(as);\n      }\n    }\n\n    for (var at = 0; at < ad.count; at++) {\n      var au = ad._inner[at];\n      var av = new DescriptionTreeAction();\n      av.b = b;\n      av.i = au.c;\n      av.c = au.a;\n      av.a = 5;\n      av.g = au.b;\n      a.add(av);\n    }\n\n    for (var aw = 0; aw < ae.count; aw++) {\n      var ax = ae._inner[aw];\n      var ay = new DescriptionTreeAction();\n      ay.b = b;\n      ay.i = ax.c;\n      ay.c = ax.a;\n      ay.a = 0;\n      ay.g = null;\n      ay.f = ax.b;\n      a.add(ay);\n    }\n\n    for (var az = 0; az < af.count; az++) {\n      DescriptionTreeReconciler.h(a, b, c, b.a(af._inner[az].c), af._inner[az], d);\n    }\n  };\n\n  DescriptionTreeReconciler.f = function (a) {\n    if (a == null) {\n      return \"UNKOWN\";\n    }\n\n    if (!a.b(\"Type\")) {\n      return \"UNKOWN\";\n    }\n\n    return a.a(\"Type\").b;\n  };\n\n  DescriptionTreeReconciler.h = function (a, b, c, d, e, f) {\n    var g = false;\n    var h = d.b;\n    var i = e.b;\n\n    if (h.length > 0) {\n      if (typeCast(DescriptionTreeNode.$, h[0]) !== null) {\n        var j = h[0];\n\n        if (j.b(\"Name\") && j.a(\"Name\") != null) {\n          g = true;\n        }\n\n        if (j.b(\"RefType\") && j.a(\"RefType\").b == \"uuid\") {\n          g = true;\n        }\n      }\n    }\n\n    if (i.length > 0) {\n      if (typeCast(DescriptionTreeNode.$, i[0]) !== null) {\n        var k = i[0];\n\n        if (k.b(\"Name\") && k.a(\"Name\") != null) {\n          g = true;\n        }\n\n        if (k.b(\"RefType\") && k.a(\"RefType\").b == \"uuid\") {\n          g = true;\n        }\n      }\n    }\n\n    if (g) {\n      var l = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n      var m = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n      var n = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n      var o = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n      var p = 0;\n\n      for (var q = 0; q < h.length; q++) {\n        var r = new DescriptionTreeReconciler_TreeModeData();\n        r.a = h[q];\n        r.d = q;\n        r.f = r.a.b(\"Name\") ? r.a.a(\"Name\").b : r.a.b(\"RefType\") ? r.a.a(\"Value\").b : null;\n\n        if (r.f == null) {\n          r.f = \"BADKEY_\" + p.toString();\n          p++;\n        }\n\n        m.add(r);\n        l.addItem(r.f, r);\n      }\n\n      for (var s = 0; s < i.length; s++) {\n        var t = new DescriptionTreeReconciler_TreeModeData();\n        t.a = i[s];\n        t.d = s;\n        t.f = t.a.b(\"Name\") ? t.a.a(\"Name\").b : t.a.b(\"RefType\") ? t.a.a(\"Value\").b : null;\n\n        if (t.f == null) {\n          t.f = \"BADKEY_\" + p.toString();\n          p++;\n        }\n\n        o.add(t);\n        n.addItem(t.f, t);\n      }\n\n      for (var u = 0; u < m.count; u++) {\n        var v = m._inner[u];\n\n        if (!n.containsKey(v.f) || n.containsKey(v.f) && DescriptionTreeReconciler.f(v.a) != DescriptionTreeReconciler.f(n.item(v.f).a)) {\n          v.c = true;\n        }\n      }\n\n      for (var w = 0; w < o.count; w++) {\n        var x = o._inner[w];\n\n        if (!l.containsKey(x.f) || l.containsKey(x.f) && DescriptionTreeReconciler.f(x.a) != DescriptionTreeReconciler.f(l.item(x.f).a)) {\n          x.b = true;\n        } else {\n          l.item(x.f).e = w;\n        }\n      }\n\n      for (var y = 0; y < m.count; y++) {\n        var z = m._inner[y];\n\n        if (z.c) {\n          var aa = new DescriptionTreeAction();\n          aa.i = e.c;\n          aa.b = b;\n          aa.c = e.a;\n          aa.e = z.d;\n          aa.a = 4;\n          aa.g = z.a;\n          a.add(aa);\n\n          for (var ab = y + 1; ab < m.count; ab++) {\n            var ac = m._inner[ab];\n            ac.d--;\n          }\n        }\n      }\n\n      for (var ad = 0; ad < o.count; ad++) {\n        var ae = o._inner[ad];\n\n        if (ae.b) {\n          var af = new DescriptionTreeAction();\n          af.i = e.c;\n          af.b = b;\n          af.c = e.a;\n          af.d = ad;\n          af.a = 2;\n          af.f = i[ad];\n          a.add(af);\n\n          for (var ag = 0; ag < m.count; ag++) {\n            var ah = m._inner[ag];\n\n            if (!ah.c && ah.d >= ad) {\n              ah.d++;\n            }\n          }\n        } else {\n          var ai = l.item(ae.f);\n\n          if (ai.d == ai.e) {\n            DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n            continue;\n          }\n\n          var aj = new DescriptionTreeAction();\n          aj.i = e.c;\n          aj.b = b;\n          aj.c = e.a;\n          aj.e = ai.d;\n          aj.a = 4;\n          aj.g = ai.a;\n          a.add(aj);\n\n          for (var ak = 0; ak < m.count; ak++) {\n            var al = m._inner[ak];\n\n            if (!al.c && al.a != ai.a && al.d >= ai.d) {\n              al.d--;\n            }\n          }\n\n          aj = new DescriptionTreeAction();\n          aj.i = e.c;\n          aj.b = b;\n          aj.c = e.a;\n          aj.d = ai.e;\n          aj.a = 2;\n          aj.f = ai.a;\n          a.add(aj);\n          ai.d = ai.e;\n\n          for (var am = 0; am < m.count; am++) {\n            var an = m._inner[am];\n\n            if (!an.c && an.a != ai.a && an.d >= ai.d) {\n              an.d++;\n            }\n          }\n\n          DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n        }\n      }\n    } else {\n      var ao = Math.max(h.length, i.length);\n\n      for (var ap = 0; ap < ao; ap++) {\n        if (ap >= h.length) {\n          var aq = new DescriptionTreeAction();\n          aq.i = e.c;\n          aq.b = b;\n          aq.c = e.a;\n          aq.d = ap;\n          aq.a = 2;\n          aq.f = i[ap];\n          a.add(aq);\n        } else if (ap >= i.length) {\n          var ar = new DescriptionTreeAction();\n          ar.i = e.c;\n          ar.b = b;\n          ar.c = e.a;\n          ar.e = i.length;\n          ar.a = 4;\n          ar.g = h[ap];\n          a.add(ar);\n        } else {\n          var as = h[ap];\n          var at = i[ap];\n\n          if (typeCast(DescriptionTreeNode.$, as) !== null && typeCast(DescriptionTreeNode.$, at) !== null) {\n            var au = as;\n            var av = at;\n\n            if (au.h == av.h) {\n              DescriptionTreeReconciler.g(a, au, av, f);\n            } else {\n              var aw = new DescriptionTreeAction();\n              aw.i = e.c;\n              aw.b = b;\n              aw.c = e.a;\n              aw.e = ap;\n              aw.a = 3;\n              aw.g = h[ap];\n              aw.f = i[ap];\n              a.add(aw);\n            }\n          } else {\n            if (!Base.equalsStatic(as, at)) {\n              var ax = new DescriptionTreeAction();\n              ax.i = e.c;\n              ax.b = b;\n              ax.c = e.a;\n              ax.e = ap;\n              ax.a = 3;\n              ax.g = h[ap];\n              ax.f = i[ap];\n              a.add(ax);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  DescriptionTreeReconciler.b = function (a, b) {\n    var c = a;\n    var d = b;\n\n    if (c == null && d == null) {\n      return true;\n    }\n\n    if (c != null && d == null || c == null && d != null) {\n      return false;\n    }\n\n    if (c.length != d.length) {\n      return false;\n    }\n\n    for (var e = 0; e < c.length; e++) {\n      var f = c[e];\n      var g = d[e];\n\n      if (typeCast(DescriptionTreeNode.$, f) !== null && !(typeCast(DescriptionTreeNode.$, g) !== null)) {\n        return false;\n      }\n\n      if (!(typeCast(DescriptionTreeNode.$, f) !== null) && typeCast(DescriptionTreeNode.$, g) !== null) {\n        return false;\n      }\n\n      if (typeCast(DescriptionTreeNode.$, f) !== null) {\n        var h = f;\n        var i = g;\n\n        if (h.h != i.h) {\n          return false;\n        }\n\n        var j = h.b(\"Name\") ? h.a(\"Name\").b : null;\n        var k = i.b(\"Name\") ? i.a(\"Name\").b : null;\n\n        if (!Base.equalsStatic(j, k)) {\n          return false;\n        }\n      } else {\n        if (!Base.equalsStatic(f, g)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  DescriptionTreeReconciler.e = function (a) {\n    var b = new List$1(DescriptionPropertyValue.$, 0);\n    var c = a.e();\n\n    for (var d = 0; d < c.count; d++) {\n      var e = c._inner[d];\n\n      if (e.a != null && e.a.knownType != 10 && e.a.knownType != 9) {\n        b.add(e);\n      }\n    }\n\n    return b;\n  };\n\n  DescriptionTreeReconciler.d = function (a) {\n    var b = new List$1(DescriptionPropertyValue.$, 0);\n    var c = a.e();\n\n    for (var d = 0; d < c.count; d++) {\n      var e = c._inner[d];\n\n      if (e.a != null && (e.a.knownType == 10 || e.a.knownType == 9)) {\n        b.add(e);\n      }\n    }\n\n    return b;\n  };\n\n  DescriptionTreeReconciler.$t = markType(DescriptionTreeReconciler, 'DescriptionTreeReconciler');\n  return DescriptionTreeReconciler;\n}(Base);\n\nexport { DescriptionTreeReconciler };","map":{"version":3,"names":["__extends","Base","typeCast","String_$type","markType","DiffApplyInfo","DescriptionTreeNode","List$1","DescriptionTreeAction","DescriptionPropertyValue","Dictionary$2","DescriptionTreeReconciler_TreeModeData","DescriptionTreeReconciler","_super","apply","arguments","a","b","c","d","count","e","_inner","$","g","f","add_1","m","i","contains","remove","add","h","l","j","k","n","o","p","Array","length","q","r","s","t","u","v","w","x","y","z","aa","equalsStatic","ab","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","an","ao","ap","aq","ar","as","at","au","av","aw","ax","ay","az","toString","addItem","containsKey","item","Math","max","knownType","$t"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-core/esm5/lib/DescriptionTreeReconciler.js"],"sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, typeCast, String_$type, markType } from \"./type\";\nimport { DiffApplyInfo } from \"./DiffApplyInfo\";\nimport { DescriptionTreeNode } from \"./DescriptionTreeNode\";\nimport { List$1 } from \"./List$1\";\nimport { DescriptionTreeAction } from \"./DescriptionTreeAction\";\nimport { DescriptionPropertyValue } from \"./DescriptionPropertyValue\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { DescriptionTreeReconciler_TreeModeData } from \"./DescriptionTreeReconciler_TreeModeData\";\n/**\n * @hidden\n */\nvar DescriptionTreeReconciler = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(DescriptionTreeReconciler, _super);\n    function DescriptionTreeReconciler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DescriptionTreeReconciler.a = function (a, b) {\n        var c = new DiffApplyInfo();\n        for (var d = 0; d < b.count; d++) {\n            var e = b._inner[d];\n            switch (e.a) {\n                case 0:\n                    if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n                        var f = e.g.f;\n                        c.a.add_1(f);\n                    }\n                    e.b.m(e.i, e.f);\n                    if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n                        var g = e.f.f;\n                        if (c.a.contains(g)) {\n                            c.a.remove(g);\n                        }\n                        c.c.add(e);\n                    }\n                    break;\n                case 1:\n                    if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n                        var h = e.g.f;\n                        c.a.add_1(h);\n                    }\n                    e.b.l(e.i);\n                    break;\n                case 3:\n                    {\n                        var i = e.b.a(e.i).b;\n                        var j = i[e.e];\n                        if (typeCast(DescriptionTreeNode.$, j) !== null) {\n                            var k = j.f;\n                            c.a.add_1(k);\n                        }\n                        i[e.e] = e.f;\n                        if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n                            var l = e.f.f;\n                            if (c.a.contains(l)) {\n                                c.a.remove(l);\n                            }\n                            c.b.add(e);\n                        }\n                    }\n                    break;\n                case 4:\n                    {\n                        var m = e.b.a(e.i).b;\n                        var n = m[e.e];\n                        if (typeCast(DescriptionTreeNode.$, n) !== null) {\n                            var o = n.f;\n                            c.a.add_1(o);\n                        }\n                        var p = new Array(m.length - 1);\n                        var q = 0;\n                        for (var r = 0; r < m.length; r++) {\n                            if (r != e.e) {\n                                p[q] = m[r];\n                                q++;\n                            }\n                        }\n                        e.b.m(e.i, p);\n                    }\n                    break;\n                case 2:\n                    {\n                        if (e.b == null && a == null) {\n                            c.d.add(e);\n                        }\n                        else {\n                            var s = e.b.a(e.i).b;\n                            var t = new Array(s.length + 1);\n                            var u = 0;\n                            for (var v = 0; v < t.length; v++) {\n                                if (v == e.d) {\n                                    t[v] = e.f;\n                                }\n                                else {\n                                    t[v] = s[u];\n                                    u++;\n                                }\n                            }\n                            e.b.m(e.i, t);\n                            if (typeCast(DescriptionTreeNode.$, e.f) !== null) {\n                                var w = e.f.f;\n                                if (c.a.contains(w)) {\n                                    c.a.remove(w);\n                                }\n                                c.b.add(e);\n                            }\n                        }\n                    }\n                    break;\n                case 5:\n                    {\n                        var x = e.b.a(e.i).b;\n                        for (var y = 0; y < x.length; y++) {\n                            var z = x[y];\n                            if (typeCast(DescriptionTreeNode.$, z) !== null) {\n                                var aa = z.f;\n                                c.a.add_1(aa);\n                            }\n                        }\n                        e.b.m(e.i, []);\n                    }\n                    break;\n            }\n        }\n        return c;\n    };\n    DescriptionTreeReconciler.c = function (a, b, c) {\n        var d = new List$1(DescriptionTreeAction.$, 0);\n        if (a == null && b == null) {\n            return d;\n        }\n        if (a != null && b == null) {\n            var e = new DescriptionTreeAction();\n            e.a = 4;\n            e.e = 0;\n            e.g = a;\n            e.c = null;\n            e.i = null;\n            d.add(e);\n            return d;\n        }\n        if (a == null && b != null) {\n            var f = new DescriptionTreeAction();\n            f.a = 2;\n            f.e = 0;\n            f.f = b;\n            f.c = null;\n            f.i = null;\n            d.add(f);\n            return d;\n        }\n        if (b.h != a.h) {\n            var g = new DescriptionTreeAction();\n            g.a = 3;\n            g.e = 0;\n            g.g = a;\n            g.f = b;\n            g.c = null;\n            g.i = null;\n            d.add(g);\n            return d;\n        }\n        DescriptionTreeReconciler.g(d, a, b, c);\n        return d;\n    };\n    DescriptionTreeReconciler.g = function (a, b, c, d) {\n        c.f = b.f;\n        var e = DescriptionTreeReconciler.e(b);\n        var f = DescriptionTreeReconciler.e(c);\n        var g = new List$1(DescriptionPropertyValue.$, 0);\n        var h = new List$1(DescriptionPropertyValue.$, 0);\n        var i = new List$1(DescriptionPropertyValue.$, 0);\n        for (var j = 0; j < e.count; j++) {\n            var k = e._inner[j];\n            if (c.b(k.c)) {\n                if (!Base.equalsStatic(k, c.a(k.c))) {\n                    var l = c.a(k.c);\n                    if (typeCast(DescriptionTreeNode.$, k.b) !== null && typeCast(DescriptionTreeNode.$, l.b) !== null) {\n                        var m = k.b;\n                        var n = l.b;\n                        if (m.h == n.h) {\n                            if ((!m.b(\"Name\") && !n.b(\"Name\")) || (m.b(\"Name\") && n.b(\"Name\") && (m.a(\"Name\").b == n.a(\"Name\").b))) {\n                                DescriptionTreeReconciler.g(a, m, n, d);\n                            }\n                            else {\n                                i.add(c.a(k.c));\n                            }\n                        }\n                        else {\n                            i.add(c.a(k.c));\n                        }\n                    }\n                    else {\n                        i.add(c.a(k.c));\n                    }\n                }\n            }\n            else {\n                if (!d) {\n                    g.add(k);\n                }\n            }\n        }\n        for (var o = 0; o < f.count; o++) {\n            var p = f._inner[o];\n            if (!b.b(p.c)) {\n                h.add(p);\n            }\n        }\n        for (var q = 0; q < g.count; q++) {\n            var r = g._inner[q];\n            var s = new DescriptionTreeAction();\n            s.b = b;\n            s.a = 1;\n            s.i = r.c;\n            s.c = r.a;\n            s.g = r.b;\n            a.add(s);\n        }\n        for (var t = 0; t < h.count; t++) {\n            var u = h._inner[t];\n            var v = new DescriptionTreeAction();\n            v.b = b;\n            v.a = 0;\n            v.i = u.c;\n            v.c = u.a;\n            v.f = u.b;\n            v.g = null;\n            a.add(v);\n        }\n        for (var w = 0; w < i.count; w++) {\n            var x = i._inner[w];\n            var y = b.a(x.c).b;\n            var z = x.b;\n            if (!Base.equalsStatic(z, y)) {\n                var aa = new DescriptionTreeAction();\n                aa.b = b;\n                aa.a = 0;\n                aa.i = x.c;\n                aa.c = x.a;\n                aa.f = x.b;\n                aa.g = b.a(x.c).b;\n                a.add(aa);\n            }\n        }\n        var ab = DescriptionTreeReconciler.d(b);\n        var ac = DescriptionTreeReconciler.d(c);\n        var ad = new List$1(DescriptionPropertyValue.$, 0);\n        var ae = new List$1(DescriptionPropertyValue.$, 0);\n        var af = new List$1(DescriptionPropertyValue.$, 0);\n        for (var ag = 0; ag < ab.count; ag++) {\n            var ah = ab._inner[ag];\n            if (c.b(ah.c)) {\n                if (!DescriptionTreeReconciler.b(ah.b, c.a(ah.c).b)) {\n                    af.add(c.a(ah.c));\n                }\n                else {\n                    var ai = ah.b;\n                    var aj = c.a(ah.c).b;\n                    for (var ak = 0; ak < ai.length; ak++) {\n                        var al = ai[ak];\n                        var am = aj[ak];\n                        if (typeCast(DescriptionTreeNode.$, al) !== null && typeCast(DescriptionTreeNode.$, am) !== null) {\n                            var an = al;\n                            var ao = am;\n                            if (an.h == ao.h) {\n                                DescriptionTreeReconciler.g(a, an, ao, d);\n                            }\n                            else {\n                                var ap = new DescriptionTreeAction();\n                                ap.i = ah.c;\n                                ap.c = ah.a;\n                                ap.b = b;\n                                ap.a = 3;\n                                ap.e = ak;\n                                ap.d = ak;\n                                ap.g = an;\n                                ap.f = ao;\n                                a.add(ap);\n                            }\n                        }\n                        else {\n                            if (!Base.equalsStatic(al, am)) {\n                                var aq = new DescriptionTreeAction();\n                                aq.i = ah.c;\n                                aq.c = ah.a;\n                                aq.b = b;\n                                aq.a = 3;\n                                aq.e = ak;\n                                aq.d = ak;\n                                aq.g = al;\n                                aq.f = am;\n                                a.add(aq);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (!d) {\n                    ad.add(ah);\n                }\n            }\n        }\n        for (var ar = 0; ar < ac.count; ar++) {\n            var as = ac._inner[ar];\n            if (!b.b(as.c)) {\n                ae.add(as);\n            }\n        }\n        for (var at = 0; at < ad.count; at++) {\n            var au = ad._inner[at];\n            var av = new DescriptionTreeAction();\n            av.b = b;\n            av.i = au.c;\n            av.c = au.a;\n            av.a = 5;\n            av.g = au.b;\n            a.add(av);\n        }\n        for (var aw = 0; aw < ae.count; aw++) {\n            var ax = ae._inner[aw];\n            var ay = new DescriptionTreeAction();\n            ay.b = b;\n            ay.i = ax.c;\n            ay.c = ax.a;\n            ay.a = 0;\n            ay.g = null;\n            ay.f = ax.b;\n            a.add(ay);\n        }\n        for (var az = 0; az < af.count; az++) {\n            DescriptionTreeReconciler.h(a, b, c, b.a(af._inner[az].c), af._inner[az], d);\n        }\n    };\n    DescriptionTreeReconciler.f = function (a) {\n        if (a == null) {\n            return \"UNKOWN\";\n        }\n        if (!a.b(\"Type\")) {\n            return \"UNKOWN\";\n        }\n        return a.a(\"Type\").b;\n    };\n    DescriptionTreeReconciler.h = function (a, b, c, d, e, f) {\n        var g = false;\n        var h = d.b;\n        var i = e.b;\n        if (h.length > 0) {\n            if (typeCast(DescriptionTreeNode.$, h[0]) !== null) {\n                var j = h[0];\n                if (j.b(\"Name\") && j.a(\"Name\") != null) {\n                    g = true;\n                }\n                if (j.b(\"RefType\") && j.a(\"RefType\").b == \"uuid\") {\n                    g = true;\n                }\n            }\n        }\n        if (i.length > 0) {\n            if (typeCast(DescriptionTreeNode.$, i[0]) !== null) {\n                var k = i[0];\n                if (k.b(\"Name\") && k.a(\"Name\") != null) {\n                    g = true;\n                }\n                if (k.b(\"RefType\") && k.a(\"RefType\").b == \"uuid\") {\n                    g = true;\n                }\n            }\n        }\n        if (g) {\n            var l = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n            var m = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n            var n = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n            var o = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n            var p = 0;\n            for (var q = 0; q < h.length; q++) {\n                var r = new DescriptionTreeReconciler_TreeModeData();\n                r.a = h[q];\n                r.d = q;\n                r.f = r.a.b(\"Name\") ? r.a.a(\"Name\").b : r.a.b(\"RefType\") ? r.a.a(\"Value\").b : null;\n                if (r.f == null) {\n                    r.f = \"BADKEY_\" + p.toString();\n                    p++;\n                }\n                m.add(r);\n                l.addItem(r.f, r);\n            }\n            for (var s = 0; s < i.length; s++) {\n                var t = new DescriptionTreeReconciler_TreeModeData();\n                t.a = i[s];\n                t.d = s;\n                t.f = t.a.b(\"Name\") ? t.a.a(\"Name\").b : t.a.b(\"RefType\") ? t.a.a(\"Value\").b : null;\n                if (t.f == null) {\n                    t.f = \"BADKEY_\" + p.toString();\n                    p++;\n                }\n                o.add(t);\n                n.addItem(t.f, t);\n            }\n            for (var u = 0; u < m.count; u++) {\n                var v = m._inner[u];\n                if (!n.containsKey(v.f) || (n.containsKey(v.f) && DescriptionTreeReconciler.f(v.a) != DescriptionTreeReconciler.f(n.item(v.f).a))) {\n                    v.c = true;\n                }\n            }\n            for (var w = 0; w < o.count; w++) {\n                var x = o._inner[w];\n                if (!l.containsKey(x.f) || (l.containsKey(x.f) && DescriptionTreeReconciler.f(x.a) != DescriptionTreeReconciler.f(l.item(x.f).a))) {\n                    x.b = true;\n                }\n                else {\n                    l.item(x.f).e = w;\n                }\n            }\n            for (var y = 0; y < m.count; y++) {\n                var z = m._inner[y];\n                if (z.c) {\n                    var aa = new DescriptionTreeAction();\n                    aa.i = e.c;\n                    aa.b = b;\n                    aa.c = e.a;\n                    aa.e = z.d;\n                    aa.a = 4;\n                    aa.g = z.a;\n                    a.add(aa);\n                    for (var ab = y + 1; ab < m.count; ab++) {\n                        var ac = m._inner[ab];\n                        ac.d--;\n                    }\n                }\n            }\n            for (var ad = 0; ad < o.count; ad++) {\n                var ae = o._inner[ad];\n                if (ae.b) {\n                    var af = new DescriptionTreeAction();\n                    af.i = e.c;\n                    af.b = b;\n                    af.c = e.a;\n                    af.d = ad;\n                    af.a = 2;\n                    af.f = i[ad];\n                    a.add(af);\n                    for (var ag = 0; ag < m.count; ag++) {\n                        var ah = m._inner[ag];\n                        if (!ah.c && ah.d >= ad) {\n                            ah.d++;\n                        }\n                    }\n                }\n                else {\n                    var ai = l.item(ae.f);\n                    if (ai.d == ai.e) {\n                        DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n                        continue;\n                    }\n                    var aj = new DescriptionTreeAction();\n                    aj.i = e.c;\n                    aj.b = b;\n                    aj.c = e.a;\n                    aj.e = ai.d;\n                    aj.a = 4;\n                    aj.g = ai.a;\n                    a.add(aj);\n                    for (var ak = 0; ak < m.count; ak++) {\n                        var al = m._inner[ak];\n                        if (!al.c && al.a != ai.a && al.d >= ai.d) {\n                            al.d--;\n                        }\n                    }\n                    aj = new DescriptionTreeAction();\n                    aj.i = e.c;\n                    aj.b = b;\n                    aj.c = e.a;\n                    aj.d = ai.e;\n                    aj.a = 2;\n                    aj.f = ai.a;\n                    a.add(aj);\n                    ai.d = ai.e;\n                    for (var am = 0; am < m.count; am++) {\n                        var an = m._inner[am];\n                        if (!an.c && an.a != ai.a && an.d >= ai.d) {\n                            an.d++;\n                        }\n                    }\n                    DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n                }\n            }\n        }\n        else {\n            var ao = Math.max(h.length, i.length);\n            for (var ap = 0; ap < ao; ap++) {\n                if (ap >= h.length) {\n                    var aq = new DescriptionTreeAction();\n                    aq.i = e.c;\n                    aq.b = b;\n                    aq.c = e.a;\n                    aq.d = ap;\n                    aq.a = 2;\n                    aq.f = i[ap];\n                    a.add(aq);\n                }\n                else if (ap >= i.length) {\n                    var ar = new DescriptionTreeAction();\n                    ar.i = e.c;\n                    ar.b = b;\n                    ar.c = e.a;\n                    ar.e = i.length;\n                    ar.a = 4;\n                    ar.g = h[ap];\n                    a.add(ar);\n                }\n                else {\n                    var as = h[ap];\n                    var at = i[ap];\n                    if (typeCast(DescriptionTreeNode.$, as) !== null && typeCast(DescriptionTreeNode.$, at) !== null) {\n                        var au = as;\n                        var av = at;\n                        if (au.h == av.h) {\n                            DescriptionTreeReconciler.g(a, au, av, f);\n                        }\n                        else {\n                            var aw = new DescriptionTreeAction();\n                            aw.i = e.c;\n                            aw.b = b;\n                            aw.c = e.a;\n                            aw.e = ap;\n                            aw.a = 3;\n                            aw.g = h[ap];\n                            aw.f = i[ap];\n                            a.add(aw);\n                        }\n                    }\n                    else {\n                        if (!Base.equalsStatic(as, at)) {\n                            var ax = new DescriptionTreeAction();\n                            ax.i = e.c;\n                            ax.b = b;\n                            ax.c = e.a;\n                            ax.e = ap;\n                            ax.a = 3;\n                            ax.g = h[ap];\n                            ax.f = i[ap];\n                            a.add(ax);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    DescriptionTreeReconciler.b = function (a, b) {\n        var c = a;\n        var d = b;\n        if (c == null && d == null) {\n            return true;\n        }\n        if ((c != null && d == null) || (c == null && d != null)) {\n            return false;\n        }\n        if (c.length != d.length) {\n            return false;\n        }\n        for (var e = 0; e < c.length; e++) {\n            var f = c[e];\n            var g = d[e];\n            if (typeCast(DescriptionTreeNode.$, f) !== null && !(typeCast(DescriptionTreeNode.$, g) !== null)) {\n                return false;\n            }\n            if (!(typeCast(DescriptionTreeNode.$, f) !== null) && typeCast(DescriptionTreeNode.$, g) !== null) {\n                return false;\n            }\n            if (typeCast(DescriptionTreeNode.$, f) !== null) {\n                var h = f;\n                var i = g;\n                if (h.h != i.h) {\n                    return false;\n                }\n                var j = h.b(\"Name\") ? h.a(\"Name\").b : null;\n                var k = i.b(\"Name\") ? i.a(\"Name\").b : null;\n                if (!Base.equalsStatic(j, k)) {\n                    return false;\n                }\n            }\n            else {\n                if (!Base.equalsStatic(f, g)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    DescriptionTreeReconciler.e = function (a) {\n        var b = new List$1(DescriptionPropertyValue.$, 0);\n        var c = a.e();\n        for (var d = 0; d < c.count; d++) {\n            var e = c._inner[d];\n            if (e.a != null && e.a.knownType != 10 && e.a.knownType != 9) {\n                b.add(e);\n            }\n        }\n        return b;\n    };\n    DescriptionTreeReconciler.d = function (a) {\n        var b = new List$1(DescriptionPropertyValue.$, 0);\n        var c = a.e();\n        for (var d = 0; d < c.count; d++) {\n            var e = c._inner[d];\n            if (e.a != null && (e.a.knownType == 10 || e.a.knownType == 9)) {\n                b.add(e);\n            }\n        }\n        return b;\n    };\n    DescriptionTreeReconciler.$t = markType(DescriptionTreeReconciler, 'DescriptionTreeReconciler');\n    return DescriptionTreeReconciler;\n}(Base));\nexport { DescriptionTreeReconciler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}