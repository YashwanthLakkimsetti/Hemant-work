{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrHorizontalStackedSeriesBase } from \"./igr-horizontal-stacked-series-base\";\nimport { StackedColumnSeries } from \"./StackedColumnSeries\";\n/**\n * Represents a IgxDataChartComponent stacked column series.\n*/\n\nvar IgrStackedColumnSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrStackedColumnSeries, _super);\n\n  function IgrStackedColumnSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrStackedColumnSeries.prototype.createImplementation = function () {\n    return new StackedColumnSeries();\n  };\n\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function get() {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"isColumn\", {\n    /**\n     * Gets whether the current series shows a column shape.\n    */\n    get: function get() {\n      return this.i.dh;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function get() {\n      return this.i.d2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function get() {\n      return this.i.um;\n    },\n    set: function set(v) {\n      this.i.um = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrStackedColumnSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function get() {\n      return this.i.un;\n    },\n    set: function set(v) {\n      this.i.un = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n  IgrStackedColumnSeries.prototype.getItemSpan = function () {\n    var iv = this.i.ga();\n    return iv;\n  };\n\n  return IgrStackedColumnSeries;\n}(IgrHorizontalStackedSeriesBase);\n\nexport { IgrStackedColumnSeries };","map":{"version":3,"names":["__extends","IgrHorizontalStackedSeriesBase","StackedColumnSeries","IgrStackedColumnSeries","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","dh","d2","um","set","v","un","getItemSpan","iv","ga"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-charts/esm5/lib/igr-stacked-column-series.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrHorizontalStackedSeriesBase } from \"./igr-horizontal-stacked-series-base\";\nimport { StackedColumnSeries } from \"./StackedColumnSeries\";\n/**\n * Represents a IgxDataChartComponent stacked column series.\n*/\nvar IgrStackedColumnSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrStackedColumnSeries, _super);\n    function IgrStackedColumnSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrStackedColumnSeries.prototype.createImplementation = function () {\n        return new StackedColumnSeries();\n    };\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"isColumn\", {\n        /**\n         * Gets whether the current series shows a column shape.\n        */\n        get: function () {\n            return this.i.dh;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.d2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.um;\n        },\n        set: function (v) {\n            this.i.um = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrStackedColumnSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.un;\n        },\n        set: function (v) {\n            this.i.un = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrStackedColumnSeries.prototype.getItemSpan = function () {\n        var iv = this.i.ga();\n        return (iv);\n    };\n    return IgrStackedColumnSeries;\n}(IgrHorizontalStackedSeriesBase));\nexport { IgrStackedColumnSeries };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,8BAAT,QAA+C,sCAA/C;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA;AACA;AACA;;AACA,IAAIC,sBAAsB;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;EACxEJ,SAAS,CAACG,sBAAD,EAAyBC,MAAzB,CAAT;;EACA,SAASD,sBAAT,CAAgCE,KAAhC,EAAuC;IACnC,OAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;EACH;;EACDF,sBAAsB,CAACI,SAAvB,CAAiCC,oBAAjC,GAAwD,YAAY;IAChE,OAAO,IAAIN,mBAAJ,EAAP;EACH,CAFD;;EAGAO,MAAM,CAACC,cAAP,CAAsBP,sBAAsB,CAACI,SAA7C,EAAwD,GAAxD,EAA6D;IACzD;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKC,eAAZ;IACH,CANwD;IAOzDC,UAAU,EAAE,KAP6C;IAQzDC,YAAY,EAAE;EAR2C,CAA7D;EAUAL,MAAM,CAACC,cAAP,CAAsBP,sBAAsB,CAACI,SAA7C,EAAwD,UAAxD,EAAoE;IAChE;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOC,EAAd;IACH,CAN+D;IAOhEH,UAAU,EAAE,KAPoD;IAQhEC,YAAY,EAAE;EARkD,CAApE;EAUAL,MAAM,CAACC,cAAP,CAAsBP,sBAAsB,CAACI,SAA7C,EAAwD,8BAAxD,EAAwF;IACpF;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOE,EAAd;IACH,CANmF;IAOpFJ,UAAU,EAAE,KAPwE;IAQpFC,YAAY,EAAE;EARsE,CAAxF;EAUAL,MAAM,CAACC,cAAP,CAAsBP,sBAAsB,CAACI,SAA7C,EAAwD,SAAxD,EAAmE;IAC/D;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOG,EAAd;IACH,CAN8D;IAO/DC,GAAG,EAAE,aAAUC,CAAV,EAAa;MACd,KAAKL,CAAL,CAAOG,EAAP,GAAY,CAACE,CAAb;IACH,CAT8D;IAU/DP,UAAU,EAAE,KAVmD;IAW/DC,YAAY,EAAE;EAXiD,CAAnE;EAaAL,MAAM,CAACC,cAAP,CAAsBP,sBAAsB,CAACI,SAA7C,EAAwD,SAAxD,EAAmE;IAC/D;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOM,EAAd;IACH,CAN8D;IAO/DF,GAAG,EAAE,aAAUC,CAAV,EAAa;MACd,KAAKL,CAAL,CAAOM,EAAP,GAAY,CAACD,CAAb;IACH,CAT8D;IAU/DP,UAAU,EAAE,KAVmD;IAW/DC,YAAY,EAAE;EAXiD,CAAnE;EAaA;AACJ;AACA;AACA;;EACIX,sBAAsB,CAACI,SAAvB,CAAiCe,WAAjC,GAA+C,YAAY;IACvD,IAAIC,EAAE,GAAG,KAAKR,CAAL,CAAOS,EAAP,EAAT;IACA,OAAQD,EAAR;EACH,CAHD;;EAIA,OAAOpB,sBAAP;AACH,CAzEyD,CAyExDF,8BAzEwD,CAA1D;;AA0EA,SAASE,sBAAT"},"metadata":{},"sourceType":"module"}