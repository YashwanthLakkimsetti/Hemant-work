{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { AreaSeries } from \"./AreaSeries\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent area series.\n * Displays trend over time or ordered categories.\n * Useful when there are many data points and the order is important.\n*\n* The `IgrAreaSeries` class represents a IgxDataChartComponent area series.Displays trend over time or ordered categories.\n*\n* Useful when there are many data points and the order is important.\n*\n* ```ts\n* <IgrDataChart\n* \t width=\"100%\"\n*      height=\"100%\"\n* \t chartTitle=\"COMPANY FINANCIAL PROJECTIONS\"\n*      dataSource={this.data}>\n*\n*\n*     <IgrCategoryXAxis name=\"xAxisYears\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrCategoryXAxis name=\"xAxisMonths\"\n*     interval={1}  labelLocation=\"OutsideBottom\"\n*     label=\"Month\" overlap={1} gap={0.4}/>\n*\n*     <IgrNumericYAxis  name=\"yAxisLeft\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*     <IgrNumericYAxis  name=\"yAxisRight\"\n*     title=\"Profit (%)\"\n*     minimumValue={0}  labelLocation=\"OutsideRight\"\n*     maximumValue={100} />\n*\n*\n*     <IgrAreaSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\" />\n*  </IgrDataChart>\n* ```\n*/\n\nvar IgrAreaSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrAreaSeries, _super);\n\n  function IgrAreaSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrAreaSeries.prototype.createImplementation = function () {\n    return new AreaSeries();\n  };\n\n  Object.defineProperty(IgrAreaSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function get() {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAreaSeries.prototype, \"isAreaOrLine\", {\n    /**\n     * Gets whether the current series shows an area or line shape.\n    *\n    * The `isAreaOrLine` is used to check if the current series shows an area or line shape.\n    */\n    get: function get() {\n      return this.i.de;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAreaSeries.prototype, \"isArea\", {\n    /**\n     * Gets whether the current series shows an area shape.\n    */\n    get: function get() {\n      return this.i.dd;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAreaSeries.prototype, \"unknownValuePlotting\", {\n    /**\n     * Determines how unknown values will be plotted on the chart.\n     * Null and Double.NaN are two examples of unknown values.\n    *\n    * The `unknownValuePlotting` property is used to determines how unknown values will be plotted on the chart.\n    *\n    * Null and Double.NaN are two examples of unknown values.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrAreaSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \tunknownValuePlotting=\"DontPlot\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;\n    * ```\n    */\n    get: function get() {\n      return this.i.unknownValuePlotting;\n    },\n    set: function set(v) {\n      this.i.unknownValuePlotting = ensureEnum(UnknownValuePlotting_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrAreaSeries;\n}(IgrHorizontalAnchoredCategorySeries);\n\nexport { IgrAreaSeries };","map":{"version":3,"names":["__extends","UnknownValuePlotting_$type","IgrHorizontalAnchoredCategorySeries","AreaSeries","ensureEnum","IgrAreaSeries","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","de","dd","unknownValuePlotting","set","v"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-charts/esm5/lib/igr-area-series.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { UnknownValuePlotting_$type } from \"igniteui-react-core\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { AreaSeries } from \"./AreaSeries\";\nimport { ensureEnum } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent area series.\n * Displays trend over time or ordered categories.\n * Useful when there are many data points and the order is important.\n*\n* The `IgrAreaSeries` class represents a IgxDataChartComponent area series.Displays trend over time or ordered categories.\n*\n* Useful when there are many data points and the order is important.\n*\n* ```ts\n* <IgrDataChart\n* \t width=\"100%\"\n*      height=\"100%\"\n* \t chartTitle=\"COMPANY FINANCIAL PROJECTIONS\"\n*      dataSource={this.data}>\n*\n*\n*     <IgrCategoryXAxis name=\"xAxisYears\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrCategoryXAxis name=\"xAxisMonths\"\n*     interval={1}  labelLocation=\"OutsideBottom\"\n*     label=\"Month\" overlap={1} gap={0.4}/>\n*\n*     <IgrNumericYAxis  name=\"yAxisLeft\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*     <IgrNumericYAxis  name=\"yAxisRight\"\n*     title=\"Profit (%)\"\n*     minimumValue={0}  labelLocation=\"OutsideRight\"\n*     maximumValue={100} />\n*\n*\n*     <IgrAreaSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\" />\n*  </IgrDataChart>\n* ```\n*/\nvar IgrAreaSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrAreaSeries, _super);\n    function IgrAreaSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrAreaSeries.prototype.createImplementation = function () {\n        return new AreaSeries();\n    };\n    Object.defineProperty(IgrAreaSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAreaSeries.prototype, \"isAreaOrLine\", {\n        /**\n         * Gets whether the current series shows an area or line shape.\n        *\n        * The `isAreaOrLine` is used to check if the current series shows an area or line shape.\n        */\n        get: function () {\n            return this.i.de;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAreaSeries.prototype, \"isArea\", {\n        /**\n         * Gets whether the current series shows an area shape.\n        */\n        get: function () {\n            return this.i.dd;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAreaSeries.prototype, \"unknownValuePlotting\", {\n        /**\n         * Determines how unknown values will be plotted on the chart.\n         * Null and Double.NaN are two examples of unknown values.\n        *\n        * The `unknownValuePlotting` property is used to determines how unknown values will be plotted on the chart.\n        *\n        * Null and Double.NaN are two examples of unknown values.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrAreaSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \tunknownValuePlotting=\"DontPlot\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;\n        * ```\n        */\n        get: function () {\n            return this.i.unknownValuePlotting;\n        },\n        set: function (v) {\n            this.i.unknownValuePlotting = ensureEnum(UnknownValuePlotting_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrAreaSeries;\n}(IgrHorizontalAnchoredCategorySeries));\nexport { IgrAreaSeries };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,0BAAT,QAA2C,qBAA3C;AACA,SAASC,mCAAT,QAAoD,2CAApD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;EAC/DN,SAAS,CAACK,aAAD,EAAgBC,MAAhB,CAAT;;EACA,SAASD,aAAT,CAAuBE,KAAvB,EAA8B;IAC1B,OAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;EACH;;EACDF,aAAa,CAACI,SAAd,CAAwBC,oBAAxB,GAA+C,YAAY;IACvD,OAAO,IAAIP,UAAJ,EAAP;EACH,CAFD;;EAGAQ,MAAM,CAACC,cAAP,CAAsBP,aAAa,CAACI,SAApC,EAA+C,GAA/C,EAAoD;IAChD;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKC,eAAZ;IACH,CAN+C;IAOhDC,UAAU,EAAE,KAPoC;IAQhDC,YAAY,EAAE;EARkC,CAApD;EAUAL,MAAM,CAACC,cAAP,CAAsBP,aAAa,CAACI,SAApC,EAA+C,cAA/C,EAA+D;IAC3D;AACR;AACA;AACA;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOC,EAAd;IACH,CAR0D;IAS3DH,UAAU,EAAE,KAT+C;IAU3DC,YAAY,EAAE;EAV6C,CAA/D;EAYAL,MAAM,CAACC,cAAP,CAAsBP,aAAa,CAACI,SAApC,EAA+C,QAA/C,EAAyD;IACrD;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOE,EAAd;IACH,CANoD;IAOrDJ,UAAU,EAAE,KAPyC;IAQrDC,YAAY,EAAE;EARuC,CAAzD;EAUAL,MAAM,CAACC,cAAP,CAAsBP,aAAa,CAACI,SAApC,EAA+C,sBAA/C,EAAuE;IACnE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOG,oBAAd;IACH,CA/CkE;IAgDnEC,GAAG,EAAE,aAAUC,CAAV,EAAa;MACd,KAAKL,CAAL,CAAOG,oBAAP,GAA8BhB,UAAU,CAACH,0BAAD,EAA6BqB,CAA7B,CAAxC;IACH,CAlDkE;IAmDnEP,UAAU,EAAE,KAnDuD;IAoDnEC,YAAY,EAAE;EApDqD,CAAvE;EAsDA,OAAOX,aAAP;AACH,CA/FgD,CA+F/CH,mCA/F+C,CAAjD;;AAgGA,SAASG,aAAT"},"metadata":{},"sourceType":"module"}