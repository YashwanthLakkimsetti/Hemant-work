{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { OperatorSelectorValueChangedEventArgsDescription } from \"./OperatorSelectorValueChangedEventArgsDescription\";\n/**\n * @hidden\n */\n\nvar OperatorSelectorValueChangedEventArgsDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(OperatorSelectorValueChangedEventArgsDescriptionMetadata, _super);\n\n  function OperatorSelectorValueChangedEventArgsDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.b = function (a) {\n    if (OperatorSelectorValueChangedEventArgsDescriptionMetadata.a == null) {\n      OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      OperatorSelectorValueChangedEventArgsDescriptionMetadata.c(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n    }\n\n    if (a.g(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a)) {\n      return;\n    }\n\n    a.s(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n  };\n\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.c = function (a) {\n    a.item(\"OldValue\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n    a.item(\"OldValue@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n    a.item(\"NewValue\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n    a.item(\"NewValue@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n  };\n\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.d = function (a) {\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.b(a);\n    a.u(\"OperatorSelectorValueChangedEventArgs\", function () {\n      return new OperatorSelectorValueChangedEventArgsDescription();\n    });\n    a.t(\"OperatorSelectorValueChangedEventArgs\", OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n  };\n\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.$t = markType(OperatorSelectorValueChangedEventArgsDescriptionMetadata, 'OperatorSelectorValueChangedEventArgsDescriptionMetadata');\n  OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = null;\n  return OperatorSelectorValueChangedEventArgsDescriptionMetadata;\n}(Base);\n\nexport { OperatorSelectorValueChangedEventArgsDescriptionMetadata };","map":{"version":3,"names":["__extends","Base","String_$type","markType","Dictionary$2","OperatorSelectorValueChangedEventArgsDescription","OperatorSelectorValueChangedEventArgsDescriptionMetadata","_super","apply","arguments","b","a","c","g","s","item","d","u","t","$t"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-core/esm5/lib/OperatorSelectorValueChangedEventArgsDescriptionMetadata.js"],"sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { OperatorSelectorValueChangedEventArgsDescription } from \"./OperatorSelectorValueChangedEventArgsDescription\";\n/**\n * @hidden\n */\nvar OperatorSelectorValueChangedEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(OperatorSelectorValueChangedEventArgsDescriptionMetadata, _super);\n    function OperatorSelectorValueChangedEventArgsDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.b = function (a) {\n        if (OperatorSelectorValueChangedEventArgsDescriptionMetadata.a == null) {\n            OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            OperatorSelectorValueChangedEventArgsDescriptionMetadata.c(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n        }\n        if (a.g(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a)) {\n            return;\n        }\n        a.s(OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n    };\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.c = function (a) {\n        a.item(\"OldValue\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n        a.item(\"OldValue@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n        a.item(\"NewValue\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n        a.item(\"NewValue@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n    };\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.d = function (a) {\n        OperatorSelectorValueChangedEventArgsDescriptionMetadata.b(a);\n        a.u(\"OperatorSelectorValueChangedEventArgs\", function () { return new OperatorSelectorValueChangedEventArgsDescription(); });\n        a.t(\"OperatorSelectorValueChangedEventArgs\", OperatorSelectorValueChangedEventArgsDescriptionMetadata.a);\n    };\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.$t = markType(OperatorSelectorValueChangedEventArgsDescriptionMetadata, 'OperatorSelectorValueChangedEventArgsDescriptionMetadata');\n    OperatorSelectorValueChangedEventArgsDescriptionMetadata.a = null;\n    return OperatorSelectorValueChangedEventArgsDescriptionMetadata;\n}(Base));\nexport { OperatorSelectorValueChangedEventArgsDescriptionMetadata };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,YAAf,EAA6BC,QAA7B,QAA6C,QAA7C;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,gDAAT,QAAiE,oDAAjE;AACA;AACA;AACA;;AACA,IAAIC,wDAAwD;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;EAC1GP,SAAS,CAACM,wDAAD,EAA2DC,MAA3D,CAAT;;EACA,SAASD,wDAAT,GAAoE;IAChE,OAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;EACH;;EACDH,wDAAwD,CAACI,CAAzD,GAA6D,UAAUC,CAAV,EAAa;IACtE,IAAIL,wDAAwD,CAACK,CAAzD,IAA8D,IAAlE,EAAwE;MACpEL,wDAAwD,CAACK,CAAzD,GAA6D,IAAIP,YAAJ,CAAiBF,YAAjB,EAA+BA,YAA/B,EAA6C,CAA7C,CAA7D;MACAI,wDAAwD,CAACM,CAAzD,CAA2DN,wDAAwD,CAACK,CAApH;IACH;;IACD,IAAIA,CAAC,CAACE,CAAF,CAAIP,wDAAwD,CAACK,CAA7D,CAAJ,EAAqE;MACjE;IACH;;IACDA,CAAC,CAACG,CAAF,CAAIR,wDAAwD,CAACK,CAA7D;EACH,CATD;;EAUAL,wDAAwD,CAACM,CAAzD,GAA6D,UAAUD,CAAV,EAAa;IACtEA,CAAC,CAACI,IAAF,CAAO,UAAP,EAAmB,2DAAnB;IACAJ,CAAC,CAACI,IAAF,CAAO,gBAAP,EAAyB,yaAAzB;IACAJ,CAAC,CAACI,IAAF,CAAO,UAAP,EAAmB,2DAAnB;IACAJ,CAAC,CAACI,IAAF,CAAO,gBAAP,EAAyB,yaAAzB;EACH,CALD;;EAMAT,wDAAwD,CAACU,CAAzD,GAA6D,UAAUL,CAAV,EAAa;IACtEL,wDAAwD,CAACI,CAAzD,CAA2DC,CAA3D;IACAA,CAAC,CAACM,CAAF,CAAI,uCAAJ,EAA6C,YAAY;MAAE,OAAO,IAAIZ,gDAAJ,EAAP;IAAgE,CAA3H;IACAM,CAAC,CAACO,CAAF,CAAI,uCAAJ,EAA6CZ,wDAAwD,CAACK,CAAtG;EACH,CAJD;;EAKAL,wDAAwD,CAACa,EAAzD,GAA8DhB,QAAQ,CAACG,wDAAD,EAA2D,0DAA3D,CAAtE;EACAA,wDAAwD,CAACK,CAAzD,GAA6D,IAA7D;EACA,OAAOL,wDAAP;AACH,CA7B2F,CA6B1FL,IA7B0F,CAA5F;;AA8BA,SAASK,wDAAT"},"metadata":{},"sourceType":"module"}