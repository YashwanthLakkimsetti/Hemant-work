{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrAnchoredRadialSeries } from \"./igr-anchored-radial-series\";\nimport { RadialPieSeries } from \"./RadialPieSeries\";\n/**\n * Represents a IgxDataChartComponent radial pie series.\n * Compare values across categories by using radial pie slices.\n*/\n\nvar IgrRadialPieSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrRadialPieSeries, _super);\n\n  function IgrRadialPieSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrRadialPieSeries.prototype.createImplementation = function () {\n    return new RadialPieSeries();\n  };\n\n  Object.defineProperty(IgrRadialPieSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function get() {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialPieSeries.prototype, \"isPie\", {\n    /**\n     * Gets whether the current series shows a pie shape.\n    */\n    get: function get() {\n      return this.i.d4;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialPieSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function get() {\n      return this.i.d2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialPieSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function get() {\n      return this.i.t7;\n    },\n    set: function set(v) {\n      this.i.t7 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialPieSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function get() {\n      return this.i.t8;\n    },\n    set: function set(v) {\n      this.i.t8 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n  IgrRadialPieSeries.prototype.getItemSpan = function () {\n    var iv = this.i.ga();\n    return iv;\n  };\n\n  return IgrRadialPieSeries;\n}(IgrAnchoredRadialSeries);\n\nexport { IgrRadialPieSeries };","map":{"version":3,"names":["__extends","IgrAnchoredRadialSeries","RadialPieSeries","IgrRadialPieSeries","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","d4","d2","t7","set","v","t8","getItemSpan","iv","ga"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-charts/esm5/lib/igr-radial-pie-series.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrAnchoredRadialSeries } from \"./igr-anchored-radial-series\";\nimport { RadialPieSeries } from \"./RadialPieSeries\";\n/**\n * Represents a IgxDataChartComponent radial pie series.\n * Compare values across categories by using radial pie slices.\n*/\nvar IgrRadialPieSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrRadialPieSeries, _super);\n    function IgrRadialPieSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrRadialPieSeries.prototype.createImplementation = function () {\n        return new RadialPieSeries();\n    };\n    Object.defineProperty(IgrRadialPieSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialPieSeries.prototype, \"isPie\", {\n        /**\n         * Gets whether the current series shows a pie shape.\n        */\n        get: function () {\n            return this.i.d4;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialPieSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.d2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialPieSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.t7;\n        },\n        set: function (v) {\n            this.i.t7 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialPieSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.t8;\n        },\n        set: function (v) {\n            this.i.t8 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrRadialPieSeries.prototype.getItemSpan = function () {\n        var iv = this.i.ga();\n        return (iv);\n    };\n    return IgrRadialPieSeries;\n}(IgrAnchoredRadialSeries));\nexport { IgrRadialPieSeries };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;EACpEJ,SAAS,CAACG,kBAAD,EAAqBC,MAArB,CAAT;;EACA,SAASD,kBAAT,CAA4BE,KAA5B,EAAmC;IAC/B,OAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;EACH;;EACDF,kBAAkB,CAACI,SAAnB,CAA6BC,oBAA7B,GAAoD,YAAY;IAC5D,OAAO,IAAIN,eAAJ,EAAP;EACH,CAFD;;EAGAO,MAAM,CAACC,cAAP,CAAsBP,kBAAkB,CAACI,SAAzC,EAAoD,GAApD,EAAyD;IACrD;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKC,eAAZ;IACH,CANoD;IAOrDC,UAAU,EAAE,KAPyC;IAQrDC,YAAY,EAAE;EARuC,CAAzD;EAUAL,MAAM,CAACC,cAAP,CAAsBP,kBAAkB,CAACI,SAAzC,EAAoD,OAApD,EAA6D;IACzD;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOC,EAAd;IACH,CANwD;IAOzDH,UAAU,EAAE,KAP6C;IAQzDC,YAAY,EAAE;EAR2C,CAA7D;EAUAL,MAAM,CAACC,cAAP,CAAsBP,kBAAkB,CAACI,SAAzC,EAAoD,8BAApD,EAAoF;IAChF;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOE,EAAd;IACH,CAN+E;IAOhFJ,UAAU,EAAE,KAPoE;IAQhFC,YAAY,EAAE;EARkE,CAApF;EAUAL,MAAM,CAACC,cAAP,CAAsBP,kBAAkB,CAACI,SAAzC,EAAoD,SAApD,EAA+D;IAC3D;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOG,EAAd;IACH,CAN0D;IAO3DC,GAAG,EAAE,aAAUC,CAAV,EAAa;MACd,KAAKL,CAAL,CAAOG,EAAP,GAAY,CAACE,CAAb;IACH,CAT0D;IAU3DP,UAAU,EAAE,KAV+C;IAW3DC,YAAY,EAAE;EAX6C,CAA/D;EAaAL,MAAM,CAACC,cAAP,CAAsBP,kBAAkB,CAACI,SAAzC,EAAoD,SAApD,EAA+D;IAC3D;AACR;AACA;IACQI,GAAG,EAAE,eAAY;MACb,OAAO,KAAKI,CAAL,CAAOM,EAAd;IACH,CAN0D;IAO3DF,GAAG,EAAE,aAAUC,CAAV,EAAa;MACd,KAAKL,CAAL,CAAOM,EAAP,GAAY,CAACD,CAAb;IACH,CAT0D;IAU3DP,UAAU,EAAE,KAV+C;IAW3DC,YAAY,EAAE;EAX6C,CAA/D;EAaA;AACJ;AACA;AACA;;EACIX,kBAAkB,CAACI,SAAnB,CAA6Be,WAA7B,GAA2C,YAAY;IACnD,IAAIC,EAAE,GAAG,KAAKR,CAAL,CAAOS,EAAP,EAAT;IACA,OAAQD,EAAR;EACH,CAHD;;EAIA,OAAOpB,kBAAP;AACH,CAzEqD,CAyEpDF,uBAzEoD,CAAtD;;AA0EA,SAASE,kBAAT"},"metadata":{},"sourceType":"module"}