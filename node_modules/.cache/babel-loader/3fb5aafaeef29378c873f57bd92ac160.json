{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { CellInfoDescriptionMetadata } from \"./CellInfoDescriptionMetadata\";\nimport { NumericCellInfoDescription } from \"./NumericCellInfoDescription\";\n/**\n * @hidden\n */\n\nvar NumericCellInfoDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(NumericCellInfoDescriptionMetadata, _super);\n\n  function NumericCellInfoDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NumericCellInfoDescriptionMetadata.b = function (a) {\n    if (NumericCellInfoDescriptionMetadata.a == null) {\n      NumericCellInfoDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      NumericCellInfoDescriptionMetadata.c(NumericCellInfoDescriptionMetadata.a);\n    }\n\n    if (a.g(NumericCellInfoDescriptionMetadata.a)) {\n      return;\n    }\n\n    a.s(NumericCellInfoDescriptionMetadata.a);\n  };\n\n  NumericCellInfoDescriptionMetadata.c = function (a) {\n    CellInfoDescriptionMetadata.c(a);\n    a.item(\"NumericValue\", \"Number:double\");\n    a.item(\"HasDecimalValue\", \"Boolean\");\n    a.item(\"FormatStringOverride\", \"String\");\n    a.item(\"FormatSpecifiers\", \"Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier\");\n    a.item(\"FormatOverrideRef\", \"(w:FormatOverride,wf:FormatOverride)DataRef\");\n    a.item(\"NegativePrefix\", \"String\");\n    a.item(\"PositivePrefix\", \"String\");\n    a.item(\"NegativeSuffix\", \"String\");\n    a.item(\"PositiveSuffix\", \"String\");\n    a.item(\"MaxFractionDigits\", \"Number:int\");\n    a.item(\"MinFractionDigits\", \"Number:int\");\n    a.item(\"MinIntegerDigits\", \"Number:int\");\n    a.item(\"ShowGroupingSeparator\", \"Boolean\");\n  };\n\n  NumericCellInfoDescriptionMetadata.d = function (a) {\n    NumericCellInfoDescriptionMetadata.b(a);\n    a.u(\"NumericCellInfo\", function () {\n      return new NumericCellInfoDescription();\n    });\n    a.t(\"NumericCellInfo\", NumericCellInfoDescriptionMetadata.a);\n  };\n\n  NumericCellInfoDescriptionMetadata.$t = markType(NumericCellInfoDescriptionMetadata, 'NumericCellInfoDescriptionMetadata');\n  NumericCellInfoDescriptionMetadata.a = null;\n  return NumericCellInfoDescriptionMetadata;\n}(Base);\n\nexport { NumericCellInfoDescriptionMetadata };","map":{"version":3,"names":["__extends","Base","String_$type","markType","Dictionary$2","CellInfoDescriptionMetadata","NumericCellInfoDescription","NumericCellInfoDescriptionMetadata","_super","apply","arguments","b","a","c","g","s","item","d","u","t","$t"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-core/esm5/lib/NumericCellInfoDescriptionMetadata.js"],"sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { CellInfoDescriptionMetadata } from \"./CellInfoDescriptionMetadata\";\nimport { NumericCellInfoDescription } from \"./NumericCellInfoDescription\";\n/**\n * @hidden\n */\nvar NumericCellInfoDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NumericCellInfoDescriptionMetadata, _super);\n    function NumericCellInfoDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NumericCellInfoDescriptionMetadata.b = function (a) {\n        if (NumericCellInfoDescriptionMetadata.a == null) {\n            NumericCellInfoDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            NumericCellInfoDescriptionMetadata.c(NumericCellInfoDescriptionMetadata.a);\n        }\n        if (a.g(NumericCellInfoDescriptionMetadata.a)) {\n            return;\n        }\n        a.s(NumericCellInfoDescriptionMetadata.a);\n    };\n    NumericCellInfoDescriptionMetadata.c = function (a) {\n        CellInfoDescriptionMetadata.c(a);\n        a.item(\"NumericValue\", \"Number:double\");\n        a.item(\"HasDecimalValue\", \"Boolean\");\n        a.item(\"FormatStringOverride\", \"String\");\n        a.item(\"FormatSpecifiers\", \"Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier\");\n        a.item(\"FormatOverrideRef\", \"(w:FormatOverride,wf:FormatOverride)DataRef\");\n        a.item(\"NegativePrefix\", \"String\");\n        a.item(\"PositivePrefix\", \"String\");\n        a.item(\"NegativeSuffix\", \"String\");\n        a.item(\"PositiveSuffix\", \"String\");\n        a.item(\"MaxFractionDigits\", \"Number:int\");\n        a.item(\"MinFractionDigits\", \"Number:int\");\n        a.item(\"MinIntegerDigits\", \"Number:int\");\n        a.item(\"ShowGroupingSeparator\", \"Boolean\");\n    };\n    NumericCellInfoDescriptionMetadata.d = function (a) {\n        NumericCellInfoDescriptionMetadata.b(a);\n        a.u(\"NumericCellInfo\", function () { return new NumericCellInfoDescription(); });\n        a.t(\"NumericCellInfo\", NumericCellInfoDescriptionMetadata.a);\n    };\n    NumericCellInfoDescriptionMetadata.$t = markType(NumericCellInfoDescriptionMetadata, 'NumericCellInfoDescriptionMetadata');\n    NumericCellInfoDescriptionMetadata.a = null;\n    return NumericCellInfoDescriptionMetadata;\n}(Base));\nexport { NumericCellInfoDescriptionMetadata };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,YAAf,EAA6BC,QAA7B,QAA6C,QAA7C;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA;AACA;AACA;;AACA,IAAIC,kCAAkC;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;EACpFR,SAAS,CAACO,kCAAD,EAAqCC,MAArC,CAAT;;EACA,SAASD,kCAAT,GAA8C;IAC1C,OAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;EACH;;EACDH,kCAAkC,CAACI,CAAnC,GAAuC,UAAUC,CAAV,EAAa;IAChD,IAAIL,kCAAkC,CAACK,CAAnC,IAAwC,IAA5C,EAAkD;MAC9CL,kCAAkC,CAACK,CAAnC,GAAuC,IAAIR,YAAJ,CAAiBF,YAAjB,EAA+BA,YAA/B,EAA6C,CAA7C,CAAvC;MACAK,kCAAkC,CAACM,CAAnC,CAAqCN,kCAAkC,CAACK,CAAxE;IACH;;IACD,IAAIA,CAAC,CAACE,CAAF,CAAIP,kCAAkC,CAACK,CAAvC,CAAJ,EAA+C;MAC3C;IACH;;IACDA,CAAC,CAACG,CAAF,CAAIR,kCAAkC,CAACK,CAAvC;EACH,CATD;;EAUAL,kCAAkC,CAACM,CAAnC,GAAuC,UAAUD,CAAV,EAAa;IAChDP,2BAA2B,CAACQ,CAA5B,CAA8BD,CAA9B;IACAA,CAAC,CAACI,IAAF,CAAO,cAAP,EAAuB,eAAvB;IACAJ,CAAC,CAACI,IAAF,CAAO,iBAAP,EAA0B,SAA1B;IACAJ,CAAC,CAACI,IAAF,CAAO,sBAAP,EAA+B,QAA/B;IACAJ,CAAC,CAACI,IAAF,CAAO,kBAAP,EAA2B,sEAA3B;IACAJ,CAAC,CAACI,IAAF,CAAO,mBAAP,EAA4B,6CAA5B;IACAJ,CAAC,CAACI,IAAF,CAAO,gBAAP,EAAyB,QAAzB;IACAJ,CAAC,CAACI,IAAF,CAAO,gBAAP,EAAyB,QAAzB;IACAJ,CAAC,CAACI,IAAF,CAAO,gBAAP,EAAyB,QAAzB;IACAJ,CAAC,CAACI,IAAF,CAAO,gBAAP,EAAyB,QAAzB;IACAJ,CAAC,CAACI,IAAF,CAAO,mBAAP,EAA4B,YAA5B;IACAJ,CAAC,CAACI,IAAF,CAAO,mBAAP,EAA4B,YAA5B;IACAJ,CAAC,CAACI,IAAF,CAAO,kBAAP,EAA2B,YAA3B;IACAJ,CAAC,CAACI,IAAF,CAAO,uBAAP,EAAgC,SAAhC;EACH,CAfD;;EAgBAT,kCAAkC,CAACU,CAAnC,GAAuC,UAAUL,CAAV,EAAa;IAChDL,kCAAkC,CAACI,CAAnC,CAAqCC,CAArC;IACAA,CAAC,CAACM,CAAF,CAAI,iBAAJ,EAAuB,YAAY;MAAE,OAAO,IAAIZ,0BAAJ,EAAP;IAA0C,CAA/E;IACAM,CAAC,CAACO,CAAF,CAAI,iBAAJ,EAAuBZ,kCAAkC,CAACK,CAA1D;EACH,CAJD;;EAKAL,kCAAkC,CAACa,EAAnC,GAAwCjB,QAAQ,CAACI,kCAAD,EAAqC,oCAArC,CAAhD;EACAA,kCAAkC,CAACK,CAAnC,GAAuC,IAAvC;EACA,OAAOL,kCAAP;AACH,CAvCqE,CAuCpEN,IAvCoE,CAAtE;;AAwCA,SAASM,kCAAT"},"metadata":{},"sourceType":"module"}