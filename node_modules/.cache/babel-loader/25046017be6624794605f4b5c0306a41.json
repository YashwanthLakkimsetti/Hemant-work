{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrRangeCategorySeries } from \"./igr-range-category-series\";\nimport { toPoint, fromPoint } from \"igniteui-react-core\";\n/**\n * Base class for ranged category series with a category X-axis and a numeric Y-axis.\n*\n* Instantiate HorizontalAnchoredCategorySeries\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\n\nvar IgrHorizontalRangeCategorySeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrHorizontalRangeCategorySeries, _super);\n\n  function IgrHorizontalRangeCategorySeries(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._xAxisName = null;\n    _this._yAxisName = null;\n    return _this;\n  }\n\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function get() {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"xAxis\", {\n    /**\n     * Gets or sets the effective x-axis for the current CategorySeries object.\n    *\n    * Instantiate xAxis\n    *\n    * ```ts\n    * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n    * this.columnSeries1.dataSource = this.categoryData;\n    * this.columnSeries1.xAxis = this.categoryXAxis;\n    * this.columnSeries1.yAxis = this.numericYAxis;\n    * this.columnSeries1.xAxisName = \"categoryXAxis\";\n    * this.columnSeries1.yAxisName = \"numericYAxis\";\n    * this.columnSeries1.valueMemberPath = \"USA\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function get() {\n      if (this.i.xAxis == null) {\n        return null;\n      }\n\n      if (!this.i.xAxis.externalObject) {\n        var e = IgrCategoryAxisBase._createFromInternal(this.i.xAxis);\n\n        if (e) {\n          e._implementation = this.i.xAxis;\n        }\n\n        this.i.xAxis.externalObject = e;\n      }\n\n      return this.i.xAxis.externalObject;\n    },\n    set: function set(v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"xAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve xAxis from markup.\n    */\n    get: function get() {\n      return this._xAxisName;\n    },\n    set: function set(v) {\n      this._xAxisName = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"yAxis\", {\n    /**\n     * Gets or sets the effective y-axis for the current CategorySeries object.\n    *\n    * Instantiate yAxis\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n    * this.columnSeries1.dataSource = this.categoryData;\n    * this.columnSeries1.xAxis = this.categoryXAxis;\n    * this.columnSeries1.yAxis = this.numericYAxis;\n    * this.columnSeries1.xAxisName = \"categoryXAxis\";\n    * this.columnSeries1.yAxisName = \"numericYAxis\";\n    * this.columnSeries1.valueMemberPath = \"USA\";\n    * ```\n    */\n    get: function get() {\n      if (this.i.yAxis == null) {\n        return null;\n      }\n\n      if (!this.i.yAxis.externalObject) {\n        var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n\n        if (e) {\n          e._implementation = this.i.yAxis;\n        }\n\n        this.i.yAxis.externalObject = e;\n      }\n\n      return this.i.yAxis.externalObject;\n    },\n    set: function set(v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"yAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve yAxis from markup.\n    */\n    get: function get() {\n      return this._yAxisName;\n    },\n    set: function set(v) {\n      this._yAxisName = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"isRange\", {\n    /**\n     * Checks if this series is a range series\n    *\n    * You can use the `isRange` to get the current series is a range type series.\n    *\n    * <!-- Angular JS -->\n    *\n    * ```ts\n    *   var r = this.series.isRange;\n    * ```\n    */\n    get: function get() {\n      return this.i.eb;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"lowMemberAsLegendLabel\", {\n    /**\n     * Gets or sets the label displayed before series' Low value in the Data Legend.\n    */\n    get: function get() {\n      return this.i.t1;\n    },\n    set: function set(v) {\n      this.i.t1 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"highMemberAsLegendLabel\", {\n    /**\n     * Gets or sets the label displayed before series' High value in the Data Legend.\n    */\n    get: function get() {\n      return this.i.tx;\n    },\n    set: function set(v) {\n      this.i.tx = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"lowMemberAsLegendUnit\", {\n    /**\n     * Gets or sets the unit displayed after series' Low value in the Data Legend.\n    */\n    get: function get() {\n      return this.i.t3;\n    },\n    set: function set(v) {\n      this.i.t3 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"highMemberAsLegendUnit\", {\n    /**\n     * Gets or sets the unit displayed after series' High value in the Data Legend.\n    */\n    get: function get() {\n      return this.i.tz;\n    },\n    set: function set(v) {\n      this.i.tz = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrHorizontalRangeCategorySeries.prototype.bindAxes = function (axes) {\n    _super.prototype.bindAxes.call(this, axes);\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.xAxisName && this.xAxisName.length > 0 && axes[i].name == this.xAxisName) {\n        this.xAxis = axes[i];\n      }\n    }\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.yAxisName && this.yAxisName.length > 0 && axes[i].name == this.yAxisName) {\n        this.yAxis = axes[i];\n      }\n    }\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.findByName = function (name) {\n    var baseResult = _super.prototype.findByName.call(this, name);\n\n    if (baseResult) {\n      return baseResult;\n    }\n\n    if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {\n      return this.xAxis;\n    }\n\n    if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {\n      return this.yAxis;\n    }\n\n    return null;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.xAxis && this.xAxis._styling) {\n      this.xAxis._styling(container, component, this);\n    }\n\n    if (this.yAxis && this.yAxis._styling) {\n      this.yAxis._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n   * Returns the offset value for this series if grouped on a category axis.\n  \r\n  *\n  * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.\n  *\n  * <!-- Angular JS -->\n  *\n  *       var g = series.getOffsetValue();\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalRangeCategorySeries.prototype.getOffsetValue = function () {\n    var iv = this.i.getOffsetValue();\n    return iv;\n  };\n  /**\n   * Returns the width of the category grouping this series is in.\n  \r\n  *\n  * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n  *\n  * <!-- Angular JS -->\n  *\n  *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalRangeCategorySeries.prototype.getCategoryWidth = function () {\n    var iv = this.i.getCategoryWidth();\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.hh(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.hj(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.gj(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesLowValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.gh(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesHighValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.gf(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesHighValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.ph(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesLowValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.pj(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.pl(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n  /**\n   * Determine if object can be used as YAxis\n  \r\n  * @param axis  * The object to check\n  *\n  * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis\n  */\n\n\n  IgrHorizontalRangeCategorySeries.prototype.canUseAsYAxis = function (axis) {\n    var iv = this.i.tw(axis);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as XAxis\n  \r\n  * @param axis  * The object to check\n  *\n  * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis\n  *\n  * <!-- Angular JS -->\n  *\n  *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n  */\n\n\n  IgrHorizontalRangeCategorySeries.prototype.canUseAsXAxis = function (axis) {\n    var iv = this.i.tv(axis);\n    return iv;\n  };\n\n  return IgrHorizontalRangeCategorySeries;\n}(IgrRangeCategorySeries);\n\nexport { IgrHorizontalRangeCategorySeries };","map":{"version":3,"names":["__extends","IgrCategoryAxisBase","IgrNumericYAxis","IgrRangeCategorySeries","toPoint","fromPoint","IgrHorizontalRangeCategorySeries","_super","props","_this","call","_xAxisName","_yAxisName","Object","defineProperty","prototype","get","_implementation","enumerable","configurable","i","xAxis","externalObject","e","_createFromInternal","set","v","_stylingContainer","_styling","yAxis","eb","t1","tx","t3","tz","bindAxes","axes","length","xAxisName","name","yAxisName","findByName","baseResult","container","component","parent","_inStyling","getOffsetValue","iv","getCategoryWidth","getNextOrExactIndex","world","skipUnknowns","hh","getPreviousOrExactIndex","hj","getSeriesValue","useInterpolation","gj","getSeriesLowValue","gh","getSeriesHighValue","gf","getSeriesHighValuePosition","ph","getSeriesLowValuePosition","pj","getSeriesValuePosition","pl","canUseAsYAxis","axis","tw","canUseAsXAxis","tv"],"sources":["C:/Users/lakki/Downloads/code/node_modules/igniteui-react-charts/esm5/lib/igr-horizontal-range-category-series.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrRangeCategorySeries } from \"./igr-range-category-series\";\nimport { toPoint, fromPoint } from \"igniteui-react-core\";\n/**\n * Base class for ranged category series with a category X-axis and a numeric Y-axis.\n*\n* Instantiate HorizontalAnchoredCategorySeries\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\nvar IgrHorizontalRangeCategorySeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrHorizontalRangeCategorySeries, _super);\n    function IgrHorizontalRangeCategorySeries(props) {\n        var _this = _super.call(this, props) || this;\n        _this._xAxisName = null;\n        _this._yAxisName = null;\n        return _this;\n    }\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"xAxis\", {\n        /**\n         * Gets or sets the effective x-axis for the current CategorySeries object.\n        *\n        * Instantiate xAxis\n        *\n        * ```ts\n        * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n        * this.columnSeries1.dataSource = this.categoryData;\n        * this.columnSeries1.xAxis = this.categoryXAxis;\n        * this.columnSeries1.yAxis = this.numericYAxis;\n        * this.columnSeries1.xAxisName = \"categoryXAxis\";\n        * this.columnSeries1.yAxisName = \"numericYAxis\";\n        * this.columnSeries1.valueMemberPath = \"USA\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            if (this.i.xAxis == null) {\n                return null;\n            }\n            if (!this.i.xAxis.externalObject) {\n                var e = IgrCategoryAxisBase._createFromInternal(this.i.xAxis);\n                if (e) {\n                    e._implementation = this.i.xAxis;\n                }\n                this.i.xAxis.externalObject = e;\n            }\n            return this.i.xAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"xAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve xAxis from markup.\n        */\n        get: function () {\n            return this._xAxisName;\n        },\n        set: function (v) {\n            this._xAxisName = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"yAxis\", {\n        /**\n         * Gets or sets the effective y-axis for the current CategorySeries object.\n        *\n        * Instantiate yAxis\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n        * this.columnSeries1.dataSource = this.categoryData;\n        * this.columnSeries1.xAxis = this.categoryXAxis;\n        * this.columnSeries1.yAxis = this.numericYAxis;\n        * this.columnSeries1.xAxisName = \"categoryXAxis\";\n        * this.columnSeries1.yAxisName = \"numericYAxis\";\n        * this.columnSeries1.valueMemberPath = \"USA\";\n        * ```\n        */\n        get: function () {\n            if (this.i.yAxis == null) {\n                return null;\n            }\n            if (!this.i.yAxis.externalObject) {\n                var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n                if (e) {\n                    e._implementation = this.i.yAxis;\n                }\n                this.i.yAxis.externalObject = e;\n            }\n            return this.i.yAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"yAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve yAxis from markup.\n        */\n        get: function () {\n            return this._yAxisName;\n        },\n        set: function (v) {\n            this._yAxisName = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"isRange\", {\n        /**\n         * Checks if this series is a range series\n        *\n        * You can use the `isRange` to get the current series is a range type series.\n        *\n        * <!-- Angular JS -->\n        *\n        * ```ts\n        *   var r = this.series.isRange;\n        * ```\n        */\n        get: function () {\n            return this.i.eb;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"lowMemberAsLegendLabel\", {\n        /**\n         * Gets or sets the label displayed before series' Low value in the Data Legend.\n        */\n        get: function () {\n            return this.i.t1;\n        },\n        set: function (v) {\n            this.i.t1 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"highMemberAsLegendLabel\", {\n        /**\n         * Gets or sets the label displayed before series' High value in the Data Legend.\n        */\n        get: function () {\n            return this.i.tx;\n        },\n        set: function (v) {\n            this.i.tx = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"lowMemberAsLegendUnit\", {\n        /**\n         * Gets or sets the unit displayed after series' Low value in the Data Legend.\n        */\n        get: function () {\n            return this.i.t3;\n        },\n        set: function (v) {\n            this.i.t3 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"highMemberAsLegendUnit\", {\n        /**\n         * Gets or sets the unit displayed after series' High value in the Data Legend.\n        */\n        get: function () {\n            return this.i.tz;\n        },\n        set: function (v) {\n            this.i.tz = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrHorizontalRangeCategorySeries.prototype.bindAxes = function (axes) {\n        _super.prototype.bindAxes.call(this, axes);\n        for (var i = 0; i < axes.length; i++) {\n            if (this.xAxisName && this.xAxisName.length > 0 &&\n                axes[i].name == this.xAxisName) {\n                this.xAxis = axes[i];\n            }\n        }\n        for (var i = 0; i < axes.length; i++) {\n            if (this.yAxisName && this.yAxisName.length > 0 &&\n                axes[i].name == this.yAxisName) {\n                this.yAxis = axes[i];\n            }\n        }\n    };\n    IgrHorizontalRangeCategorySeries.prototype.findByName = function (name) {\n        var baseResult = _super.prototype.findByName.call(this, name);\n        if (baseResult) {\n            return baseResult;\n        }\n        if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {\n            return this.xAxis;\n        }\n        if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {\n            return this.yAxis;\n        }\n        return null;\n    };\n    IgrHorizontalRangeCategorySeries.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.xAxis && this.xAxis._styling) {\n            this.xAxis._styling(container, component, this);\n        }\n        if (this.yAxis && this.yAxis._styling) {\n            this.yAxis._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    /**\n     * Returns the offset value for this series if grouped on a category axis.\n    \r\n    *\n    * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.\n    *\n    * <!-- Angular JS -->\n    *\n    *       var g = series.getOffsetValue();\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalRangeCategorySeries.prototype.getOffsetValue = function () {\n        var iv = this.i.getOffsetValue();\n        return (iv);\n    };\n    /**\n     * Returns the width of the category grouping this series is in.\n    \r\n    *\n    * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n    *\n    * <!-- Angular JS -->\n    *\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalRangeCategorySeries.prototype.getCategoryWidth = function () {\n        var iv = this.i.getCategoryWidth();\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.hh(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.hj(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.gj(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesLowValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.gh(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesHighValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.gf(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesHighValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.ph(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesLowValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.pj(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.pl(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    /**\n     * Determine if object can be used as YAxis\n    \r\n    * @param axis  * The object to check\n    *\n    * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis\n    */\n    IgrHorizontalRangeCategorySeries.prototype.canUseAsYAxis = function (axis) {\n        var iv = this.i.tw(axis);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as XAxis\n    \r\n    * @param axis  * The object to check\n    *\n    * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis\n    *\n    * <!-- Angular JS -->\n    *\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n    */\n    IgrHorizontalRangeCategorySeries.prototype.canUseAsXAxis = function (axis) {\n        var iv = this.i.tv(axis);\n        return (iv);\n    };\n    return IgrHorizontalRangeCategorySeries;\n}(IgrRangeCategorySeries));\nexport { IgrHorizontalRangeCategorySeries };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}