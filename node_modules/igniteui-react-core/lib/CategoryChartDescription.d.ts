import { XYChartDescription } from "./XYChartDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class CategoryChartDescription extends XYChartDescription {
    static $t: Type;
    private tm;
    get tooltipTemplateRef(): string;
    set tooltipTemplateRef(a: string);
    private tq;
    get width(): string;
    set width(a: string);
    private tk;
    get height(): string;
    set height(a: string);
    private ti;
    get background(): string;
    set background(a: string);
    protected get_type(): string;
    constructor();
    private td;
    get transitionInDuration(): number;
    set transitionInDuration(a: number);
    private tn;
    get transitionInEasingFunctionRef(): string;
    set transitionInEasingFunctionRef(a: string);
    private tj;
    get chartType(): string;
    set chartType(a: string);
    private tl;
    get markerCollisionAvoidance(): string;
    set markerCollisionAvoidance(a: string);
    private r5;
    get isSplineShapePartOfRange(): boolean;
    set isSplineShapePartOfRange(a: boolean);
    private r6;
    get isTransitionInEnabled(): boolean;
    set isTransitionInEnabled(a: boolean);
    private to;
    get transitionInMode(): string;
    set transitionInMode(a: string);
    private tp;
    get transitionInSpeedType(): string;
    set transitionInSpeedType(a: string);
    private ss;
    get xAxisInterval(): number;
    set xAxisInterval(a: number);
    private sv;
    get xAxisMinorInterval(): number;
    set xAxisMinorInterval(a: number);
    private sr;
    get xAxisGap(): number;
    set xAxisGap(a: number);
    private su;
    get xAxisMinimumGapSize(): number;
    set xAxisMinimumGapSize(a: number);
    private st;
    get xAxisMaximumGap(): number;
    set xAxisMaximumGap(a: number);
    private sw;
    get xAxisOverlap(): number;
    set xAxisOverlap(a: number);
    private sx;
    get yAxisInterval(): number;
    set yAxisInterval(a: number);
    private th;
    get autoMarginAndAngleUpdateMode(): string;
    set autoMarginAndAngleUpdateMode(a: string);
    private r7;
    get shouldAutoExpandMarginForInitialLabels(): boolean;
    set shouldAutoExpandMarginForInitialLabels(a: boolean);
    private r8;
    get shouldConsiderAutoRotationForInitialLabels(): boolean;
    set shouldConsiderAutoRotationForInitialLabels(a: boolean);
    private sp;
    get autoExpandMarginExtraPadding(): number;
    set autoExpandMarginExtraPadding(a: number);
    private sq;
    get autoExpandMarginMaximumValue(): number;
    set autoExpandMarginMaximumValue(a: number);
    private sc;
    get yAxisFavorLabellingScaleEnd(): boolean;
    set yAxisFavorLabellingScaleEnd(a: boolean);
    private r9;
    get xAxisEnhancedIntervalPreferMoreCategoryLabels(): boolean;
    set xAxisEnhancedIntervalPreferMoreCategoryLabels(a: boolean);
    private sb;
    get yAxisEnhancedIntervalPreferMoreCategoryLabels(): boolean;
    set yAxisEnhancedIntervalPreferMoreCategoryLabels(a: boolean);
    private tr;
    get yAxisAutoRangeBufferMode(): string;
    set yAxisAutoRangeBufferMode(a: string);
    private sd;
    get yAxisIsLogarithmic(): boolean;
    set yAxisIsLogarithmic(a: boolean);
    private te;
    get yAxisLogarithmBase(): number;
    set yAxisLogarithmBase(a: number);
    private sz;
    get yAxisMinimumValue(): number;
    set yAxisMinimumValue(a: number);
    private sy;
    get yAxisMaximumValue(): number;
    set yAxisMaximumValue(a: number);
    private s0;
    get yAxisMinorInterval(): number;
    set yAxisMinorInterval(a: number);
    private rz;
    get negativeBrushes(): string[];
    set negativeBrushes(a: string[]);
    private r0;
    get negativeOutlines(): string[];
    set negativeOutlines(a: string[]);
    private sa;
    get yAxisAbbreviateLargeNumbers(): boolean;
    set yAxisAbbreviateLargeNumbers(a: boolean);
    private r3;
    get isCategoryHighlightingEnabled(): boolean;
    set isCategoryHighlightingEnabled(a: boolean);
    private r4;
    get isItemHighlightingEnabled(): boolean;
    set isItemHighlightingEnabled(a: boolean);
}
