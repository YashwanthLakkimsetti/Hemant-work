import { Description } from "./Description";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class SeriesDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private bo;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private bw;
    get legendRef(): string;
    set legendRef(a: string);
    private bv;
    get legendItemVisibility(): string;
    set legendItemVisibility(a: string);
    private bt;
    get legendItemBadgeTemplateRef(): string;
    set legendItemBadgeTemplateRef(a: string);
    private bk;
    get actualLegendItemBadgeTemplateRef(): string;
    set actualLegendItemBadgeTemplateRef(a: string);
    private bj;
    get actualLegendItemBadgeOutline(): string;
    set actualLegendItemBadgeOutline(a: string);
    private bi;
    get actualLegendItemBadgeBrush(): string;
    set actualLegendItemBadgeBrush(a: string);
    private bs;
    get legendItemBadgeShape(): string;
    set legendItemBadgeShape(a: string);
    private br;
    get legendItemBadgeMode(): string;
    set legendItemBadgeMode(a: string);
    private bu;
    get legendItemTemplateRef(): string;
    set legendItemTemplateRef(a: string);
    private bp;
    get discreteLegendItemTemplateRef(): string;
    set discreteLegendItemTemplateRef(a: string);
    private b3;
    get transitionEasingFunctionRef(): string;
    set transitionEasingFunctionRef(a: string);
    private b4;
    get transitionInEasingFunctionRef(): string;
    set transitionInEasingFunctionRef(a: string);
    private bb;
    get transitionDuration(): number;
    set transitionDuration(a: number);
    private aa;
    get actualResolution(): number;
    set actualResolution(a: number);
    private ai;
    get resolution(): number;
    set resolution(a: number);
    private aq;
    get visibleRangeMarginTop(): number;
    set visibleRangeMarginTop(a: number);
    private an;
    get visibleRangeMarginBottom(): number;
    set visibleRangeMarginBottom(a: number);
    private ao;
    get visibleRangeMarginLeft(): number;
    set visibleRangeMarginLeft(a: number);
    private ap;
    get visibleRangeMarginRight(): number;
    set visibleRangeMarginRight(a: number);
    private bm;
    get brush(): string;
    set brush(a: string);
    private bf;
    get actualBrush(): string;
    set actualBrush(a: string);
    private bx;
    get outline(): string;
    set outline(a: string);
    private bl;
    get actualOutline(): string;
    set actualOutline(a: string);
    private am;
    get thickness(): number;
    set thickness(a: number);
    private ab;
    get actualThickness(): number;
    set actualThickness(a: number);
    private bg;
    get actualHighlightingMode(): string;
    set actualHighlightingMode(a: string);
    private y;
    get actualHighlightingFadeOpacity(): number;
    set actualHighlightingFadeOpacity(a: number);
    private ae;
    get highlightingFadeOpacity(): number;
    set highlightingFadeOpacity(a: number);
    private g;
    get isActualLegendFinancial(): boolean;
    set isActualLegendFinancial(a: boolean);
    private h;
    get isComponentHighlightingModeIgnored(): boolean;
    set isComponentHighlightingModeIgnored(a: boolean);
    private k;
    get isHighlightingEnabled(): boolean;
    set isHighlightingEnabled(a: boolean);
    private j;
    get isDropShadowEnabled(): boolean;
    set isDropShadowEnabled(a: boolean);
    private aj;
    get shadowBlur(): number;
    set shadowBlur(a: number);
    private b0;
    get shadowColor(): string;
    set shadowColor(a: string);
    private n;
    get useSingleShadow(): boolean;
    set useSingleShadow(a: boolean);
    private ak;
    get shadowOffsetX(): number;
    set shadowOffsetX(a: number);
    private al;
    get shadowOffsetY(): number;
    set shadowOffsetY(a: number);
    private ac;
    get areaFillOpacity(): number;
    set areaFillOpacity(a: number);
    private x;
    get actualAreaFillOpacity(): number;
    set actualAreaFillOpacity(a: number);
    private af;
    get markerFillOpacity(): number;
    set markerFillOpacity(a: number);
    private z;
    get actualMarkerFillOpacity(): number;
    set actualMarkerFillOpacity(a: number);
    private i;
    get isDefaultToolTipSelected(): boolean;
    set isDefaultToolTipSelected(a: boolean);
    private m;
    get showDefaultTooltip(): boolean;
    set showDefaultTooltip(a: boolean);
    private b7;
    get visibleRangeMode(): string;
    set visibleRangeMode(a: string);
    private by;
    get outlineMode(): string;
    set outlineMode(a: string);
    private bc;
    get transitionInDuration(): number;
    set transitionInDuration(a: number);
    private b5;
    get transitionInSpeedType(): string;
    set transitionInSpeedType(a: string);
    private l;
    get mouseOverEnabled(): boolean;
    set mouseOverEnabled(a: boolean);
    private bn;
    get coercionMethodsRef(): string;
    set coercionMethodsRef(a: string);
    private f;
    get expectFunctions(): boolean;
    set expectFunctions(a: boolean);
    private bq;
    get hitTestMode(): string;
    set hitTestMode(a: string);
    private bh;
    get actualHitTestMode(): string;
    set actualHitTestMode(a: string);
    private ad;
    get finalValue(): number;
    set finalValue(a: number);
    private ah;
    get percentChange(): number;
    set percentChange(a: number);
    private ag;
    get opacity(): number;
    set opacity(a: number);
    private b6;
    get visibility(): string;
    set visibility(a: string);
    private bz;
    get renderRequestedRef(): string;
    set renderRequestedRef(a: string);
    private b2;
    get tooltipTemplateRef(): string;
    set tooltipTemplateRef(a: string);
    private b1;
    get title(): string;
    set title(a: string);
}
