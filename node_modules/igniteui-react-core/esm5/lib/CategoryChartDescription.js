/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var CategoryChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryChartDescription, _super);
    function CategoryChartDescription() {
        var _this = _super.call(this) || this;
        _this.tm = null;
        _this.tq = null;
        _this.tk = null;
        _this.ti = null;
        _this.td = 0;
        _this.tn = null;
        _this.tj = null;
        _this.tl = null;
        _this.r5 = false;
        _this.r6 = false;
        _this.to = null;
        _this.tp = null;
        _this.ss = 0;
        _this.sv = 0;
        _this.sr = 0;
        _this.su = 0;
        _this.st = 0;
        _this.sw = 0;
        _this.sx = 0;
        _this.th = null;
        _this.r7 = false;
        _this.r8 = false;
        _this.sp = 0;
        _this.sq = 0;
        _this.sc = false;
        _this.r9 = false;
        _this.sb = false;
        _this.tr = null;
        _this.sd = false;
        _this.te = 0;
        _this.sz = 0;
        _this.sy = 0;
        _this.s0 = 0;
        _this.rz = null;
        _this.r0 = null;
        _this.sa = false;
        _this.r3 = false;
        _this.r4 = false;
        return _this;
    }
    Object.defineProperty(CategoryChartDescription.prototype, "tooltipTemplateRef", {
        get: function () {
            return this.tm;
        },
        set: function (a) {
            this.tm = a;
            this.e("TooltipTemplateRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "width", {
        get: function () {
            return this.tq;
        },
        set: function (a) {
            this.tq = a;
            this.e("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "height", {
        get: function () {
            return this.tk;
        },
        set: function (a) {
            this.tk = a;
            this.e("Height");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "background", {
        get: function () {
            return this.ti;
        },
        set: function (a) {
            this.ti = a;
            this.e("Background");
        },
        enumerable: false,
        configurable: true
    });
    CategoryChartDescription.prototype.get_type = function () {
        return "CategoryChart";
    };
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInDuration", {
        get: function () {
            return this.td;
        },
        set: function (a) {
            this.td = a;
            this.e("TransitionInDuration");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInEasingFunctionRef", {
        get: function () {
            return this.tn;
        },
        set: function (a) {
            this.tn = a;
            this.e("TransitionInEasingFunctionRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "chartType", {
        get: function () {
            return this.tj;
        },
        set: function (a) {
            this.tj = a;
            this.e("ChartType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "markerCollisionAvoidance", {
        get: function () {
            return this.tl;
        },
        set: function (a) {
            this.tl = a;
            this.e("MarkerCollisionAvoidance");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isSplineShapePartOfRange", {
        get: function () {
            return this.r5;
        },
        set: function (a) {
            this.r5 = a;
            this.e("IsSplineShapePartOfRange");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isTransitionInEnabled", {
        get: function () {
            return this.r6;
        },
        set: function (a) {
            this.r6 = a;
            this.e("IsTransitionInEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInMode", {
        get: function () {
            return this.to;
        },
        set: function (a) {
            this.to = a;
            this.e("TransitionInMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInSpeedType", {
        get: function () {
            return this.tp;
        },
        set: function (a) {
            this.tp = a;
            this.e("TransitionInSpeedType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisInterval", {
        get: function () {
            return this.ss;
        },
        set: function (a) {
            this.ss = a;
            this.e("XAxisInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisMinorInterval", {
        get: function () {
            return this.sv;
        },
        set: function (a) {
            this.sv = a;
            this.e("XAxisMinorInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisGap", {
        get: function () {
            return this.sr;
        },
        set: function (a) {
            this.sr = a;
            this.e("XAxisGap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisMinimumGapSize", {
        get: function () {
            return this.su;
        },
        set: function (a) {
            this.su = a;
            this.e("XAxisMinimumGapSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisMaximumGap", {
        get: function () {
            return this.st;
        },
        set: function (a) {
            this.st = a;
            this.e("XAxisMaximumGap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisOverlap", {
        get: function () {
            return this.sw;
        },
        set: function (a) {
            this.sw = a;
            this.e("XAxisOverlap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisInterval", {
        get: function () {
            return this.sx;
        },
        set: function (a) {
            this.sx = a;
            this.e("YAxisInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "autoMarginAndAngleUpdateMode", {
        get: function () {
            return this.th;
        },
        set: function (a) {
            this.th = a;
            this.e("AutoMarginAndAngleUpdateMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "shouldAutoExpandMarginForInitialLabels", {
        get: function () {
            return this.r7;
        },
        set: function (a) {
            this.r7 = a;
            this.e("ShouldAutoExpandMarginForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "shouldConsiderAutoRotationForInitialLabels", {
        get: function () {
            return this.r8;
        },
        set: function (a) {
            this.r8 = a;
            this.e("ShouldConsiderAutoRotationForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "autoExpandMarginExtraPadding", {
        get: function () {
            return this.sp;
        },
        set: function (a) {
            this.sp = a;
            this.e("AutoExpandMarginExtraPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "autoExpandMarginMaximumValue", {
        get: function () {
            return this.sq;
        },
        set: function (a) {
            this.sq = a;
            this.e("AutoExpandMarginMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisFavorLabellingScaleEnd", {
        get: function () {
            return this.sc;
        },
        set: function (a) {
            this.sc = a;
            this.e("YAxisFavorLabellingScaleEnd");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisEnhancedIntervalPreferMoreCategoryLabels", {
        get: function () {
            return this.r9;
        },
        set: function (a) {
            this.r9 = a;
            this.e("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisEnhancedIntervalPreferMoreCategoryLabels", {
        get: function () {
            return this.sb;
        },
        set: function (a) {
            this.sb = a;
            this.e("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisAutoRangeBufferMode", {
        get: function () {
            return this.tr;
        },
        set: function (a) {
            this.tr = a;
            this.e("YAxisAutoRangeBufferMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisIsLogarithmic", {
        get: function () {
            return this.sd;
        },
        set: function (a) {
            this.sd = a;
            this.e("YAxisIsLogarithmic");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisLogarithmBase", {
        get: function () {
            return this.te;
        },
        set: function (a) {
            this.te = a;
            this.e("YAxisLogarithmBase");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisMinimumValue", {
        get: function () {
            return this.sz;
        },
        set: function (a) {
            this.sz = a;
            this.e("YAxisMinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisMaximumValue", {
        get: function () {
            return this.sy;
        },
        set: function (a) {
            this.sy = a;
            this.e("YAxisMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisMinorInterval", {
        get: function () {
            return this.s0;
        },
        set: function (a) {
            this.s0 = a;
            this.e("YAxisMinorInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "negativeBrushes", {
        get: function () {
            return this.rz;
        },
        set: function (a) {
            this.rz = a;
            this.e("NegativeBrushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "negativeOutlines", {
        get: function () {
            return this.r0;
        },
        set: function (a) {
            this.r0 = a;
            this.e("NegativeOutlines");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisAbbreviateLargeNumbers", {
        get: function () {
            return this.sa;
        },
        set: function (a) {
            this.sa = a;
            this.e("YAxisAbbreviateLargeNumbers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isCategoryHighlightingEnabled", {
        get: function () {
            return this.r3;
        },
        set: function (a) {
            this.r3 = a;
            this.e("IsCategoryHighlightingEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isItemHighlightingEnabled", {
        get: function () {
            return this.r4;
        },
        set: function (a) {
            this.r4 = a;
            this.e("IsItemHighlightingEnabled");
        },
        enumerable: false,
        configurable: true
    });
    CategoryChartDescription.$t = markType(CategoryChartDescription, 'CategoryChartDescription', XYChartDescription.$);
    return CategoryChartDescription;
}(XYChartDescription));
export { CategoryChartDescription };
