/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { NativeUIElementBridge } from "./NativeUIElementBridge";
import { INativeUIGridBridge_$type } from "./INativeUIGridBridge";
import { List$1 } from "./List$1";
import { NativeUIComponent } from "./NativeUIComponent";
import { GridBridgeColumnDefinition } from "./GridBridgeColumnDefinition";
import { GridBridgeRowDefinition } from "./GridBridgeRowDefinition";
import { markType } from "./type";
/**
 * @hidden
 */
var GridBridge = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GridBridge, _super);
    function GridBridge() {
        var _this = _super.call(this) || this;
        _this.e = null;
        _this.c = new List$1(GridBridgeColumnDefinition.$, 0);
        _this.d = new List$1(GridBridgeRowDefinition.$, 0);
        _this.e = new List$1(NativeUIComponent.$, 0);
        return _this;
    }
    GridBridge.prototype.addChild = function (a, b) {
        this.e.add(b);
        a.append(b.u);
    };
    GridBridge.prototype.addColumnDefinition = function (a, b, c, d) {
        var e = new GridBridgeColumnDefinition();
        e.a = c;
        e.b = d;
        this.c.add(e);
        this.f(a);
    };
    GridBridge.prototype.f = function (a) {
        var b = "";
        for (var c = 0; c < this.c.count; c++) {
            if (c > 0) {
                b += " ";
            }
            b += this.c._inner[c].c();
        }
        a.setStyleProperty("grid-template-columns", b);
    };
    GridBridge.prototype.g = function (a) {
        var b = "";
        for (var c = 0; c < this.d.count; c++) {
            if (c > 0) {
                b += " ";
            }
            b += this.d._inner[c].c();
        }
        a.setStyleProperty("grid-template-rows", b);
    };
    GridBridge.prototype.addHandler = function (a, b, c, d) {
    };
    GridBridge.prototype.addRowDefinition = function (a, b, c, d) {
        var e = new GridBridgeRowDefinition();
        e.a = c;
        e.b = d;
        this.d.add(e);
        this.g(a);
    };
    GridBridge.prototype.getChildAt = function (a, b) {
        return this.e._inner[b];
    };
    GridBridge.prototype.getChildrenCount = function (a) {
        return a.getChildCount();
    };
    GridBridge.prototype.getColumn = function (a, b) {
        var c = b.u.getStyleProperty("grid-column");
        var d = parseInt(c);
        return d - 1;
    };
    GridBridge.prototype.getColumnDefinitionsCount = function (a) {
        return this.c.count;
    };
    GridBridge.prototype.getRow = function (a, b) {
        var c = b.u.getStyleProperty("grid-row");
        var d = parseInt(c);
        return d - 1;
    };
    GridBridge.prototype.getRowDefinitionsCount = function (a) {
        return this.d.count;
    };
    GridBridge.prototype.getValue = function (a, b) {
        switch (b) {
        }
        return null;
    };
    GridBridge.prototype.removeChild = function (a, b) {
        this.e.remove(b);
        a.removeChild(b.u);
    };
    GridBridge.prototype.removeChildAt = function (a, b) {
        this.e.removeAt(b);
        a.getChildAt(b).remove();
    };
    GridBridge.prototype.removeColumnDefinition = function (a, b) {
        this.c.removeAt(b);
        this.f(a);
    };
    GridBridge.prototype.removeHandler = function (a, b, c, d) {
    };
    GridBridge.prototype.removeRowDefinition = function (a, b) {
        this.d.removeAt(b);
        this.g(a);
    };
    GridBridge.prototype.setColumn = function (a, b, c) {
        b.u.setStyleProperty("grid-column", (c + 1).toString());
    };
    GridBridge.prototype.setRow = function (a, b, c) {
        b.u.setStyleProperty("grid-row", (c + 1).toString());
    };
    GridBridge.prototype.setValue = function (a, b, c) {
        switch (b) {
        }
    };
    GridBridge.prototype.updateColumnDefinition = function (a, b, c, d) {
        var e = this.c._inner[b];
        e.a = c;
        e.b = d;
        this.g(a);
    };
    GridBridge.prototype.updateRowDefinition = function (a, b, c, d) {
        var e = this.d._inner[b];
        e.a = c;
        e.b = d;
        this.g(a);
    };
    GridBridge.$t = markType(GridBridge, 'GridBridge', NativeUIElementBridge.$, [INativeUIGridBridge_$type]);
    return GridBridge;
}(NativeUIElementBridge));
export { GridBridge };
