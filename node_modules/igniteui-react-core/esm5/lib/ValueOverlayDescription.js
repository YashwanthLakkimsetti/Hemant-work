/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SeriesDescription } from "./SeriesDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var ValueOverlayDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ValueOverlayDescription, _super);
    function ValueOverlayDescription() {
        var _this = _super.call(this) || this;
        _this.dp = null;
        _this.da = 0;
        _this.c2 = false;
        _this.dl = null;
        _this.dn = null;
        _this.dk = null;
        _this.c4 = 0;
        _this.di = 0;
        _this.dm = null;
        _this.c6 = 0;
        _this.c8 = 0;
        _this.c7 = 0;
        _this.c5 = 0;
        _this.c9 = 0;
        return _this;
    }
    ValueOverlayDescription.prototype.get_type = function () {
        return "ValueOverlay";
    };
    Object.defineProperty(ValueOverlayDescription.prototype, "axisRef", {
        get: function () {
            return this.dp;
        },
        set: function (a) {
            this.dp = a;
            this.e("AxisRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "value", {
        get: function () {
            return this.da;
        },
        set: function (a) {
            this.da = a;
            this.e("Value");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "isAxisAnnotationEnabled", {
        get: function () {
            return this.c2;
        },
        set: function (a) {
            this.c2 = a;
            this.e("IsAxisAnnotationEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationFormatLabelRef", {
        get: function () {
            return this.dl;
        },
        set: function (a) {
            this.dl = a;
            this.e("AxisAnnotationFormatLabelRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationTextColor", {
        get: function () {
            return this.dn;
        },
        set: function (a) {
            this.dn = a;
            this.e("AxisAnnotationTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationBackground", {
        get: function () {
            return this.dk;
        },
        set: function (a) {
            this.dk = a;
            this.e("AxisAnnotationBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationBackgroundCornerRadius", {
        get: function () {
            return this.c4;
        },
        set: function (a) {
            this.c4 = a;
            this.e("AxisAnnotationBackgroundCornerRadius");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationInterpolatedValuePrecision", {
        get: function () {
            return this.di;
        },
        set: function (a) {
            this.di = a;
            this.e("AxisAnnotationInterpolatedValuePrecision");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationOutline", {
        get: function () {
            return this.dm;
        },
        set: function (a) {
            this.dm = a;
            this.e("AxisAnnotationOutline");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationPaddingLeft", {
        get: function () {
            return this.c6;
        },
        set: function (a) {
            this.c6 = a;
            this.e("AxisAnnotationPaddingLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationPaddingTop", {
        get: function () {
            return this.c8;
        },
        set: function (a) {
            this.c8 = a;
            this.e("AxisAnnotationPaddingTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationPaddingRight", {
        get: function () {
            return this.c7;
        },
        set: function (a) {
            this.c7 = a;
            this.e("AxisAnnotationPaddingRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationPaddingBottom", {
        get: function () {
            return this.c5;
        },
        set: function (a) {
            this.c5 = a;
            this.e("AxisAnnotationPaddingBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ValueOverlayDescription.prototype, "axisAnnotationStrokeThickness", {
        get: function () {
            return this.c9;
        },
        set: function (a) {
            this.c9 = a;
            this.e("AxisAnnotationStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    ValueOverlayDescription.$t = markType(ValueOverlayDescription, 'ValueOverlayDescription', SeriesDescription.$);
    return ValueOverlayDescription;
}(SeriesDescription));
export { ValueOverlayDescription };
