/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, IList_$type, runOn, String_$type, typeCast, Array_$type, markType } from "./type";
import { IDataSourceLocalDataProvider_$type } from "./IDataSourceLocalDataProvider";
import { IDataSourceSchema_$type } from "./IDataSourceSchema";
import { DataSourceSchemaPropertyType_$type } from "./DataSourceSchemaPropertyType";
import { DefaultDataSourceSchema } from "./DefaultDataSourceSchema";
import { SortDescriptionCollection } from "./SortDescriptionCollection";
import { Dictionary$2 } from "./Dictionary$2";
import { FastReflectionHelper } from "./FastReflectionHelper";
import { HashSet$1 } from "./HashSet$1";
import { DataSourceDataProviderSchemaChangedEventArgs } from "./DataSourceDataProviderSchemaChangedEventArgs";
import { List$1 } from "./List$1";
import { stringStartsWith } from "./string";
/**
 * @hidden
 */
export let DataSourceLocalDataProvider = /*@__PURE__*/ (() => {
    class DataSourceLocalDataProvider extends Base {
        constructor() {
            super();
            this.l = null;
            this.k = null;
            this.e = null;
            this.m = null;
            this.d = 0;
            this.x = 5;
            this.y = null;
            this.schemaChanged = null;
            this.r = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
            this.s = new HashSet$1(String_$type, 0);
            this.h = null;
            this.v = null;
            this.p = false;
            this.g = null;
            this.f = null;
            this.o = false;
            this.a = null;
            this.n = false;
            this.l = new SortDescriptionCollection();
            this.l.n(runOn(this, this.am));
        }
        am(a, b) {
            this.queueAutoRefresh();
        }
        get dataSource() {
            return this.y;
        }
        set dataSource(a) {
            let b = this.y;
            this.y = a;
            if (b != this.y) {
                this.ah("ItemsSource", b, this.y);
            }
        }
        getItemAtIndex(a) {
            if (this.v == null) {
                return null;
            }
            if (this.p) {
                return this.v[a];
            }
            return this.v.item(a);
        }
        getItemValue(a, b) {
            this.ae();
            let c;
            let d = this.r.tryGetValue(b, c);
            c = d.p1;
            if (c == null && !this.s.contains(b)) {
                let e = b.split('.');
                let f = a;
                let g = true;
                for (let h = 0; h < e.length; h++) {
                    f = f[e[h]];
                    if ((f === undefined)) {
                        g = false;
                        break;
                    }
                }
                if (g) {
                    c = new FastReflectionHelper(false, b);
                    this.r.addItem(b, c);
                }
                else {
                    this.s.add_1(b);
                }
            }
            if (c == null) {
                return null;
            }
            let val_ = c.getPropertyValue(a);
            if ((val_ === undefined)) {
                return null;
            }
            return val_;
        }
        setItemValue(a, b, c) {
            this.ae();
            let d;
            let e = this.r.tryGetValue(b, d);
            d = e.p1;
            if (d == null) {
                return;
            }
            d.setPropertyValue(a, c);
        }
        removeItem(a) {
            if (this.v != null) {
                let b = this.v.indexOf(a);
                if (this.p) {
                    this.v.splice(b, 1);
                }
                else {
                    this.v.removeAt(b);
                }
                this.notifyRemoveItem(b, a);
            }
        }
        addItem(a) {
            if (this.v != null) {
                let b = this.actualCount;
                if (this.p) {
                    this.v.splice(b, 0, a);
                }
                else {
                    this.v.insert(b, a);
                }
                this.notifyInsertItem(this.actualCount - 1, a);
            }
        }
        ae() {
            if (this.h == null) {
                this.h = this.actualSchema;
                if (this.schemaChanged != null) {
                    this.schemaChanged(this, new DataSourceDataProviderSchemaChangedEventArgs(this.h, this.actualCount));
                }
            }
        }
        get actualCount() {
            if (this.v == null) {
                return 0;
            }
            if (this.p) {
                return (this.v.length);
            }
            return this.v.count;
        }
        get actualSchema() {
            if (this.h == null) {
                if (this.v == null) {
                    this.h = new DefaultDataSourceSchema([], [], null, null, []);
                }
                else {
                    this.h = this.j();
                }
            }
            return this.h;
        }
        j() {
            let a = this.z();
            if (a == null) {
                return new DefaultDataSourceSchema([], [], null, null, []);
            }
            this.r.clear();
            this.s.clear();
            return this.i(a, null, 0);
        }
        i(a, b, c) {
            if (c >= this.x) {
                return null;
            }
            if (a == null) {
                return null;
            }
            if ((typeof a === 'function')) {
                return null;
            }
            if ((Array.isArray(a))) {
                return null;
            }
            let check_ = a;
            if ((check_ instanceof HTMLElement)) {
                return null;
            }
            let d = new List$1(String_$type, 0);
            let e = new HashSet$1(String_$type, 0);
            let f = new List$1(DataSourceSchemaPropertyType_$type, 0);
            let g = new List$1(List$1.$.specialize(String_$type), 0);
            let h = this.t(a);
            let i = new List$1(IDataSourceSchema_$type, 0);
            for (let j = 0; j < h.count; j++) {
                let k = h._inner[j];
                if (stringStartsWith(k, "_")) {
                    continue;
                }
                if (k == "$hashCode" || k == "$type") {
                    continue;
                }
                if (e.contains(k)) {
                    continue;
                }
                else {
                    let l = b == null ? k : b + "." + k;
                    d.add(k);
                    e.add_1(k);
                    this.r.addItem(l, new FastReflectionHelper(false, l));
                    f.add(this.b(a, k));
                    g.add(this.u(a, k));
                    if (f._inner[f.count - 1] == 11) {
                        i.add(this.i(a[k], l, c + 1));
                    }
                    else {
                        i.add(null);
                    }
                }
            }
            let m = new Array(g.count);
            for (let n = 0; n < g.count; n++) {
                m[n] = g._inner[n].toArray();
            }
            return new DefaultDataSourceSchema(d.toArray(), f.toArray(), null, m, i.toArray());
        }
        resolveSchemaPropertyType(a) {
            let b = a.split('.');
            if (b.length == 1) {
                for (let c = 0; c < this.actualSchema.propertyNames.length; c++) {
                    if (this.actualSchema.propertyNames[c] == b[0]) {
                        return this.actualSchema.propertyTypes[c];
                    }
                }
                return 11;
            }
            else {
                let d = this.z();
                let e = this.getItemValue(d, a);
                if (e == null) {
                    return 11;
                }
                else {
                    return DataSourceLocalDataProvider.c(e);
                }
            }
        }
        al(a) {
            this.h = a;
            if (this.schemaChanged != null) {
                this.schemaChanged(this, new DataSourceDataProviderSchemaChangedEventArgs(this.h, this.actualCount));
            }
        }
        t(schemaItem_) {
            let propertyKey_ = null;
            let ret_ = new List$1(String_$type, 0);
            let exclusions_ = {};
            for (propertyKey_ in schemaItem_) {
                if (!isNaN(propertyKey_)) {
                    continue;
                }
                if (!exclusions_.hasOwnProperty(propertyKey_)) {
                    ret_.add(propertyKey_);
                }
            }
            ;
            return ret_;
        }
        ag(a, item_, propertyName_, b) {
            if ((item_.__dataIntents !== undefined)) {
                if ((item_.__dataIntents[propertyName_] !== undefined)) {
                    this.af(a, item_, propertyName_);
                }
                let selfName_ = "self." + propertyName_;
                if (!b && (item_.__dataIntents[selfName_] !== undefined)) {
                    this.af(a, item_, selfName_);
                }
                let selfName2_ = "self_" + propertyName_;
                if (!b && (item_.__dataIntents[selfName2_] !== undefined)) {
                    this.af(a, item_, selfName2_);
                }
            }
        }
        af(a, item_, propertyName_) {
            let val_ = item_.__dataIntents[propertyName_];
            let b = typeCast(Array_$type, val_) !== null;
            if (!b) {
                b = (Array.isArray(val_));
            }
            if (b) {
                let c = val_;
                for (let d = 0; d < c.length; d++) {
                    if (c[d] != null) {
                        a.add(c[d].toString());
                    }
                }
            }
        }
        u(item_, propertyName_) {
            let a = new List$1(String_$type, 0);
            let list_ = this.v;
            let dataIntents_ = null;
            this.ag(a, item_, propertyName_, false);
            this.ag(a, list_, propertyName_, true);
            return a;
        }
        b(item_, propertyName_) {
            if (item_ == null) {
                return 11;
            }
            if ((item_[propertyName_] == undefined)) {
                return 11;
            }
            let value_ = item_[propertyName_];
            return DataSourceLocalDataProvider.c(value_);
        }
        static c(value_) {
            if (value_ == null) {
                return 11;
            }
            if ((typeof value_ == 'number')) {
                return 5;
            }
            if ((typeof value_ == 'boolean')) {
                return 2;
            }
            if ((typeof value_ == 'string')) {
                return 0;
            }
            if ((typeof value_ == 'object')) {
                if ((value_ instanceof Date)) {
                    return 8;
                }
            }
            return 11;
        }
        z() {
            let a = 0;
            if (this.p) {
                a = (this.v.length);
            }
            else {
                a = this.v.count;
            }
            for (let b = 0; b < a; b++) {
                let c;
                if (this.p) {
                    c = this.v[b];
                }
                else {
                    c = this.v.item(b);
                }
                if (c != null) {
                    return c;
                }
            }
            return null;
        }
        ah(a, b, c) {
            this.ai(a, b, c);
        }
        get w() {
            return this.v;
        }
        ai(a, b, c) {
            switch (a) {
                case "ItemsSource":
                    this.h = null;
                    if (this.dataSource != null) {
                        this.p = false;
                        if (typeCast(Array_$type, this.dataSource) !== null) {
                            this.p = true;
                            this.v = this.dataSource;
                        }
                        else if (typeCast(IList_$type, this.dataSource) !== null) {
                            this.v = this.dataSource;
                        }
                        if (!this.p && this.v == null) {
                            let source_ = this.dataSource;
                            this.p = (Array.isArray(source_));
                            if (this.p) {
                                this.v = this.dataSource;
                            }
                        }
                    }
                    else {
                        this.v = null;
                    }
                    this.ae();
                    break;
                case "DeferAutoRefresh":
                    if (!c) {
                        this.queueAutoRefresh();
                    }
                    break;
            }
        }
        get executionContext() {
            return this.g;
        }
        set executionContext(a) {
            this.g = a;
        }
        get q() {
            return false;
        }
        notifySetItem(a, b, c) {
            if (this.q) {
                if (this.p) {
                    this.v[a] = c;
                }
                else {
                    this.v.item(a, c);
                }
            }
            if (this.updateNotifier != null) {
                this.updateNotifier.notifySetItem(a, b, c);
            }
        }
        notifyClearItems() {
            if (this.q) {
                if (this.p) {
                    this.v.length = 0;
                }
                else {
                    this.v.clear();
                }
            }
            if (this.updateNotifier != null) {
                this.updateNotifier.notifyClearItems();
            }
        }
        notifyInsertItem(a, b) {
            if (this.q) {
                if (this.p) {
                    this.v.splice(a, 0, b);
                }
                else {
                    this.v.insert(a, b);
                }
            }
            let c = 0;
            if (this.p) {
                c = (this.v.length);
            }
            else {
                c = this.v.count;
            }
            if (this.v != null && c == 1 && (this.actualSchema == null || this.actualSchema.propertyNames.length == 0)) {
                this.h = null;
                this.ae();
            }
            if (this.updateNotifier != null) {
                this.updateNotifier.notifyInsertItem(a, b);
            }
        }
        notifyRemoveItem(a, b) {
            if (this.q) {
                if (this.p) {
                    this.v.splice(a, 1);
                }
                else {
                    this.v.remove(a);
                }
            }
            if (this.updateNotifier != null) {
                this.updateNotifier.notifyRemoveItem(a, b);
            }
        }
        get updateNotifier() {
            return this.f;
        }
        set updateNotifier(a) {
            this.f = a;
        }
        get deferAutoRefresh() {
            return this.o;
        }
        set deferAutoRefresh(a) {
            let b = this.o;
            this.o = a;
            if (this.o != b) {
                this.ah("DeferAutoRefresh", b, this.o);
            }
        }
        get isSortingSupported() {
            return false;
        }
        get isFilteringSupported() {
            return false;
        }
        get sortDescriptions() {
            return this.l;
        }
        get filterExpressions() {
            return this.e;
        }
        get summaryDescriptions() {
            return this.m;
        }
        get summaryScope() {
            return this.d;
        }
        set summaryScope(a) {
            this.d = a;
        }
        get notifyUsingSourceIndexes() {
            return true;
        }
        get propertiesRequested() {
            return this.a;
        }
        set propertiesRequested(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
            }
        }
        get isItemIndexLookupSupported() {
            return true;
        }
        get isKeyIndexLookupSupported() {
            return false;
        }
        get isGroupingSupported() {
            return false;
        }
        get groupDescriptions() {
            return this.k;
        }
        queueAutoRefresh() {
            if (this.deferAutoRefresh) {
                return;
            }
            if (this.n) {
                return;
            }
            if (this.executionContext != null) {
                this.n = true;
                this.executionContext.enqueueAction(runOn(this, this.ad));
            }
        }
        ad() {
            if (this.deferAutoRefresh) {
                this.n = false;
                return;
            }
            if (!this.n) {
                return;
            }
            this.n = false;
            this.aj();
        }
        aj() {
            this.ak();
        }
        ak() {
        }
        flushAutoRefresh() {
            this.ad();
        }
        refresh() {
            this.aj();
        }
        indexOfItem(a) {
            if (this.v == null) {
                return -1;
            }
            return this.v.indexOf(a);
        }
        indexOfKey(a) {
            return -1;
        }
    }
    DataSourceLocalDataProvider.$t = /*@__PURE__*/ markType(DataSourceLocalDataProvider, 'DataSourceLocalDataProvider', Base.$, [IDataSourceLocalDataProvider_$type]);
    return DataSourceLocalDataProvider;
})();
