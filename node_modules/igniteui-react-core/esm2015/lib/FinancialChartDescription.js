/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let FinancialChartDescription = /*@__PURE__*/ (() => {
    class FinancialChartDescription extends XYChartDescription {
        constructor() {
            super();
            this.uj = null;
            this.ul = null;
            this.ui = null;
            this.ug = null;
            this.tf = 0;
            this.sr = false;
            this.tj = 0;
            this.sz = false;
            this.t8 = 0;
            this.tl = 0;
            this.tn = 0;
            this.tm = 0;
            this.to = 0;
            this.uk = null;
            this.um = null;
            this.uo = null;
            this.st = false;
            this.uh = null;
            this.un = null;
            this.sv = false;
            this.r3 = null;
            this.r8 = null;
            this.sx = false;
            this.ti = 0;
            this.sw = false;
            this.sy = false;
            this.up = null;
            this.r4 = null;
            this.r5 = null;
            this.r6 = null;
            this.r7 = null;
            this.sb = null;
            this.sa = null;
            this.r2 = null;
            this.r0 = null;
            this.tk = 0;
            this.th = 0;
            this.tg = 0;
            this.te = 0;
            this.r1 = null;
            this.t4 = 0;
            this.td = 0;
            this.t7 = 0;
            this.t5 = 0;
            this.t3 = 0;
            this.t6 = 0;
            this.r9 = null;
            this.rz = null;
            this.su = false;
            this.uq = null;
            this.tp = 0;
            this.ss = false;
            this.ta = new Date();
            this.s9 = new Date();
            this.sc = null;
            this.uf = null;
        }
        get tooltipTemplateRef() {
            return this.uj;
        }
        set tooltipTemplateRef(a) {
            this.uj = a;
            this.e("TooltipTemplateRef");
        }
        get width() {
            return this.ul;
        }
        set width(a) {
            this.ul = a;
            this.e("Width");
        }
        get height() {
            return this.ui;
        }
        set height(a) {
            this.ui = a;
            this.e("Height");
        }
        get background() {
            return this.ug;
        }
        set background(a) {
            this.ug = a;
            this.e("Background");
        }
        get_type() {
            return "FinancialChart";
        }
        get leftMargin() {
            return this.tf;
        }
        set leftMargin(a) {
            this.tf = a;
            this.e("LeftMargin");
        }
        get isHorizontalZoomEnabled() {
            return this.sr;
        }
        set isHorizontalZoomEnabled(a) {
            this.sr = a;
            this.e("IsHorizontalZoomEnabled");
        }
        get toolbarHeight() {
            return this.tj;
        }
        set toolbarHeight(a) {
            this.tj = a;
            this.e("ToolbarHeight");
        }
        get yAxisIsLogarithmic() {
            return this.sz;
        }
        set yAxisIsLogarithmic(a) {
            this.sz = a;
            this.e("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.t8;
        }
        set yAxisLogarithmBase(a) {
            this.t8 = a;
            this.e("YAxisLogarithmBase");
        }
        get yAxisInterval() {
            return this.tl;
        }
        set yAxisInterval(a) {
            this.tl = a;
            this.e("YAxisInterval");
        }
        get yAxisMinimumValue() {
            return this.tn;
        }
        set yAxisMinimumValue(a) {
            this.tn = a;
            this.e("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.tm;
        }
        set yAxisMaximumValue(a) {
            this.tm = a;
            this.e("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.to;
        }
        set yAxisMinorInterval(a) {
            this.to = a;
            this.e("YAxisMinorInterval");
        }
        get volumeType() {
            return this.uk;
        }
        set volumeType(a) {
            this.uk = a;
            this.e("VolumeType");
        }
        get xAxisMode() {
            return this.um;
        }
        set xAxisMode(a) {
            this.um = a;
            this.e("XAxisMode");
        }
        get yAxisMode() {
            return this.uo;
        }
        set yAxisMode(a) {
            this.uo = a;
            this.e("YAxisMode");
        }
        get isToolbarVisible() {
            return this.st;
        }
        set isToolbarVisible(a) {
            this.st = a;
            this.e("IsToolbarVisible");
        }
        get chartType() {
            return this.uh;
        }
        set chartType(a) {
            this.uh = a;
            this.e("ChartType");
        }
        get yAxisLabelHorizontalAlignment() {
            return this.un;
        }
        set yAxisLabelHorizontalAlignment(a) {
            this.un = a;
            this.e("YAxisLabelHorizontalAlignment");
        }
        get isWindowSyncedToVisibleRange() {
            return this.sv;
        }
        set isWindowSyncedToVisibleRange(a) {
            this.sv = a;
            this.e("IsWindowSyncedToVisibleRange");
        }
        get indicatorTypes() {
            return this.r3;
        }
        set indicatorTypes(a) {
            this.r3 = a;
            this.e("IndicatorTypes");
        }
        get overlayTypes() {
            return this.r8;
        }
        set overlayTypes(a) {
            this.r8 = a;
            this.e("OverlayTypes");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.sx;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.sx = a;
            this.e("YAxisAbbreviateLargeNumbers");
        }
        get resolution() {
            return this.ti;
        }
        set resolution(a) {
            this.ti = a;
            this.e("Resolution");
        }
        get xAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.sw;
        }
        set xAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.sw = a;
            this.e("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.sy;
        }
        set yAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.sy = a;
            this.e("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get zoomSliderType() {
            return this.up;
        }
        set zoomSliderType(a) {
            this.up = a;
            this.e("ZoomSliderType");
        }
        get negativeBrushes() {
            return this.r4;
        }
        set negativeBrushes(a) {
            this.r4 = a;
            this.e("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.r5;
        }
        set negativeOutlines(a) {
            this.r5 = a;
            this.e("NegativeOutlines");
        }
        get overlayBrushes() {
            return this.r6;
        }
        set overlayBrushes(a) {
            this.r6 = a;
            this.e("OverlayBrushes");
        }
        get overlayOutlines() {
            return this.r7;
        }
        set overlayOutlines(a) {
            this.r7 = a;
            this.e("OverlayOutlines");
        }
        get volumeOutlines() {
            return this.sb;
        }
        set volumeOutlines(a) {
            this.sb = a;
            this.e("VolumeOutlines");
        }
        get volumeBrushes() {
            return this.sa;
        }
        set volumeBrushes(a) {
            this.sa = a;
            this.e("VolumeBrushes");
        }
        get indicatorNegativeBrushes() {
            return this.r2;
        }
        set indicatorNegativeBrushes(a) {
            this.r2 = a;
            this.e("IndicatorNegativeBrushes");
        }
        get indicatorBrushes() {
            return this.r0;
        }
        set indicatorBrushes(a) {
            this.r0 = a;
            this.e("IndicatorBrushes");
        }
        get volumeThickness() {
            return this.tk;
        }
        set volumeThickness(a) {
            this.tk = a;
            this.e("VolumeThickness");
        }
        get overlayThickness() {
            return this.th;
        }
        set overlayThickness(a) {
            this.th = a;
            this.e("OverlayThickness");
        }
        get overlayMultiplier() {
            return this.tg;
        }
        set overlayMultiplier(a) {
            this.tg = a;
            this.e("OverlayMultiplier");
        }
        get indicatorThickness() {
            return this.te;
        }
        set indicatorThickness(a) {
            this.te = a;
            this.e("IndicatorThickness");
        }
        get indicatorDisplayTypes() {
            return this.r1;
        }
        set indicatorDisplayTypes(a) {
            this.r1 = a;
            this.e("IndicatorDisplayTypes");
        }
        get indicatorPeriod() {
            return this.t4;
        }
        set indicatorPeriod(a) {
            this.t4 = a;
            this.e("IndicatorPeriod");
        }
        get indicatorMultiplier() {
            return this.td;
        }
        set indicatorMultiplier(a) {
            this.td = a;
            this.e("IndicatorMultiplier");
        }
        get indicatorSmoothingPeriod() {
            return this.t7;
        }
        set indicatorSmoothingPeriod(a) {
            this.t7 = a;
            this.e("IndicatorSmoothingPeriod");
        }
        get indicatorShortPeriod() {
            return this.t5;
        }
        set indicatorShortPeriod(a) {
            this.t5 = a;
            this.e("IndicatorShortPeriod");
        }
        get indicatorLongPeriod() {
            return this.t3;
        }
        set indicatorLongPeriod(a) {
            this.t3 = a;
            this.e("IndicatorLongPeriod");
        }
        get indicatorSignalPeriod() {
            return this.t6;
        }
        set indicatorSignalPeriod(a) {
            this.t6 = a;
            this.e("IndicatorSignalPeriod");
        }
        get rangeSelectorOptions() {
            return this.r9;
        }
        set rangeSelectorOptions(a) {
            this.r9 = a;
            this.e("RangeSelectorOptions");
        }
        get customIndicatorNames() {
            return this.rz;
        }
        set customIndicatorNames(a) {
            this.rz = a;
            this.e("CustomIndicatorNames");
        }
        get isVerticalZoomEnabled() {
            return this.su;
        }
        set isVerticalZoomEnabled(a) {
            this.su = a;
            this.e("IsVerticalZoomEnabled");
        }
        get zoomSliderXAxisMajorStroke() {
            return this.uq;
        }
        set zoomSliderXAxisMajorStroke(a) {
            this.uq = a;
            this.e("ZoomSliderXAxisMajorStroke");
        }
        get zoomSliderXAxisMajorStrokeThickness() {
            return this.tp;
        }
        set zoomSliderXAxisMajorStrokeThickness(a) {
            this.tp = a;
            this.e("ZoomSliderXAxisMajorStrokeThickness");
        }
        get isLegendVisible() {
            return this.ss;
        }
        set isLegendVisible(a) {
            this.ss = a;
            this.e("IsLegendVisible");
        }
        get xAxisMinimumValue() {
            return this.ta;
        }
        set xAxisMinimumValue(a) {
            this.ta = a;
            this.e("XAxisMinimumValue");
        }
        get xAxisMaximumValue() {
            return this.s9;
        }
        set xAxisMaximumValue(a) {
            this.s9 = a;
            this.e("XAxisMaximumValue");
        }
        get xAxisBreaks() {
            return this.sc;
        }
        set xAxisBreaks(a) {
            this.sc = a;
            this.e("XAxisBreaks");
        }
        get applyCustomIndicatorsRef() {
            return this.uf;
        }
        set applyCustomIndicatorsRef(a) {
            this.uf = a;
            this.e("ApplyCustomIndicatorsRef");
        }
    }
    FinancialChartDescription.$t = /*@__PURE__*/ markType(FinancialChartDescription, 'FinancialChartDescription', XYChartDescription.$);
    return FinancialChartDescription;
})();
