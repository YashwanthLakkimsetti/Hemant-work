/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
import { SeriesViewerDescription } from "./SeriesViewerDescription";
/**
 * @hidden
 */
export let GeographicMapImageryDescription = /*@__PURE__*/ (() => {
    class GeographicMapImageryDescription extends Description {
        constructor() {
            super();
            this.h = null;
            this.f = null;
            this.r = null;
            this.j = false;
            this.s = null;
            this.l = 0;
            this.q = null;
            this.p = null;
            this.n = null;
            this.o = null;
        }
        get_type() {
            return "GeographicMapImagery";
        }
        get type() {
            return this.get_type();
        }
        get windowRect() {
            return this.h;
        }
        set windowRect(a) {
            this.h = a;
            this.e("WindowRect");
        }
        get geographicMap() {
            return this.f;
        }
        set geographicMap(a) {
            this.f = a;
            this.e("GeographicMap");
        }
        get referer() {
            return this.r;
        }
        set referer(a) {
            this.r = a;
            this.e("Referer");
        }
        get isHorizontalWrappingEnabled() {
            return this.j;
        }
        set isHorizontalWrappingEnabled(a) {
            this.j = a;
            this.e("IsHorizontalWrappingEnabled");
        }
        get userAgent() {
            return this.s;
        }
        set userAgent(a) {
            this.s = a;
            this.e("UserAgent");
        }
        get opacity() {
            return this.l;
        }
        set opacity(a) {
            this.l = a;
            this.e("Opacity");
        }
        get imageTilesReadyRef() {
            return this.q;
        }
        set imageTilesReadyRef(a) {
            this.q = a;
            this.e("ImageTilesReadyRef");
        }
        get imagesChangedRef() {
            return this.p;
        }
        set imagesChangedRef(a) {
            this.p = a;
            this.e("ImagesChangedRef");
        }
        get cancellingImageRef() {
            return this.n;
        }
        set cancellingImageRef(a) {
            this.n = a;
            this.e("CancellingImageRef");
        }
        get downloadingImageRef() {
            return this.o;
        }
        set downloadingImageRef(a) {
            this.o = a;
            this.e("DownloadingImageRef");
        }
    }
    GeographicMapImageryDescription.$t = /*@__PURE__*/ markType(GeographicMapImageryDescription, 'GeographicMapImageryDescription', Description.$);
    return GeographicMapImageryDescription;
})();
/**
 * @hidden
 */
export let GeographicMapDescription = /*@__PURE__*/ (() => {
    class GeographicMapDescription extends SeriesViewerDescription {
        constructor() {
            super();
            this.g0 = false;
            this.hc = null;
            this.gx = false;
            this.g9 = null;
            this.gz = false;
            this.gy = false;
            this.gu = null;
            this.gt = null;
            this.gr = null;
            this.g6 = 0;
            this.g5 = 0;
            this.hb = null;
            this.hd = null;
            this.ha = null;
        }
        get_type() {
            return "GeographicMap";
        }
        get zoomable() {
            return this.g0;
        }
        set zoomable(a) {
            this.g0 = a;
            this.e("Zoomable");
        }
        get resizeBehavior() {
            return this.hc;
        }
        set resizeBehavior(a) {
            this.hc = a;
            this.e("ResizeBehavior");
        }
        get isHorizontalWrappingEnabled() {
            return this.gx;
        }
        set isHorizontalWrappingEnabled(a) {
            this.gx = a;
            this.e("IsHorizontalWrappingEnabled");
        }
        get backgroundTilingMode() {
            return this.g9;
        }
        set backgroundTilingMode(a) {
            this.g9 = a;
            this.e("BackgroundTilingMode");
        }
        get useWorldRectForZoomBounds() {
            return this.gz;
        }
        set useWorldRectForZoomBounds(a) {
            this.gz = a;
            this.e("UseWorldRectForZoomBounds");
        }
        get suppressZoomResetOnWorldRectChange() {
            return this.gy;
        }
        set suppressZoomResetOnWorldRectChange(a) {
            this.gy = a;
            this.e("SuppressZoomResetOnWorldRectChange");
        }
        get worldRect() {
            return this.gu;
        }
        set worldRect(a) {
            this.gu = a;
            this.e("WorldRect");
        }
        get actualWorldRect() {
            return this.gt;
        }
        set actualWorldRect(a) {
            this.gt = a;
            this.e("ActualWorldRect");
        }
        get backgroundContent() {
            return this.gr;
        }
        set backgroundContent(a) {
            this.gr = a;
            this.e("BackgroundContent");
        }
        get windowScale() {
            return this.g6;
        }
        set windowScale(a) {
            this.g6 = a;
            this.e("WindowScale");
        }
        get actualWindowScale() {
            return this.g5;
        }
        set actualWindowScale(a) {
            this.g5 = a;
            this.e("ActualWindowScale");
        }
        get imageTilesReadyRef() {
            return this.hb;
        }
        set imageTilesReadyRef(a) {
            this.hb = a;
            this.e("ImageTilesReadyRef");
        }
        get width() {
            return this.hd;
        }
        set width(a) {
            this.hd = a;
            this.e("Width");
        }
        get height() {
            return this.ha;
        }
        set height(a) {
            this.ha = a;
            this.e("Height");
        }
    }
    GeographicMapDescription.$t = /*@__PURE__*/ markType(GeographicMapDescription, 'GeographicMapDescription', SeriesViewerDescription.$);
    return GeographicMapDescription;
})();
