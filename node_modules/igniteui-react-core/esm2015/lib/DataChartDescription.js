/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataChartDescription = /*@__PURE__*/ (() => {
    class DataChartDescription extends SeriesViewerDescription {
        constructor() {
            super();
            this.gv = false;
            this.hl = 0;
            this.hm = 0;
            this.hd = 0;
            this.he = 0;
            this.gu = false;
            this.gw = false;
            this.h6 = null;
            this.gt = false;
            this.hg = 0;
            this.hf = 0;
            this.gz = false;
            this.gx = false;
            this.gy = false;
            this.g0 = false;
            this.h1 = null;
            this.h5 = null;
            this.h3 = null;
            this.h4 = null;
            this.gr = null;
            this.ha = 0;
            this.hc = 0;
            this.hb = 0;
            this.g9 = 0;
            this.h2 = null;
            this.h8 = null;
            this.h9 = null;
            this.hi = 0;
            this.hk = 0;
            this.hj = 0;
            this.hh = 0;
            this.ia = null;
            this.h7 = null;
        }
        get_type() {
            return "DataChart";
        }
        get isSquare() {
            return this.gv;
        }
        set isSquare(a) {
            this.gv = a;
            this.e("IsSquare");
        }
        get windowScaleHorizontal() {
            return this.hl;
        }
        set windowScaleHorizontal(a) {
            this.hl = a;
            this.e("WindowScaleHorizontal");
        }
        get windowScaleVertical() {
            return this.hm;
        }
        set windowScaleVertical(a) {
            this.hm = a;
            this.e("WindowScaleVertical");
        }
        get actualWindowScaleHorizontal() {
            return this.hd;
        }
        set actualWindowScaleHorizontal(a) {
            this.hd = a;
            this.e("ActualWindowScaleHorizontal");
        }
        get actualWindowScaleVertical() {
            return this.he;
        }
        set actualWindowScaleVertical(a) {
            this.he = a;
            this.e("ActualWindowScaleVertical");
        }
        get isHorizontalZoomEnabled() {
            return this.gu;
        }
        set isHorizontalZoomEnabled(a) {
            this.gu = a;
            this.e("IsHorizontalZoomEnabled");
        }
        get isVerticalZoomEnabled() {
            return this.gw;
        }
        set isVerticalZoomEnabled(a) {
            this.gw = a;
            this.e("IsVerticalZoomEnabled");
        }
        get gridMode() {
            return this.h6;
        }
        set gridMode(a) {
            this.h6 = a;
            this.e("GridMode");
        }
        get alignsGridLinesToPixels() {
            return this.gt;
        }
        set alignsGridLinesToPixels(a) {
            this.gt = a;
            this.e("AlignsGridLinesToPixels");
        }
        get autoExpandMarginMaximumValue() {
            return this.hg;
        }
        set autoExpandMarginMaximumValue(a) {
            this.hg = a;
            this.e("AutoExpandMarginMaximumValue");
        }
        get autoExpandMarginExtraPadding() {
            return this.hf;
        }
        set autoExpandMarginExtraPadding(a) {
            this.hf = a;
            this.e("AutoExpandMarginExtraPadding");
        }
        get shouldSuppressAxisLabelTruncation() {
            return this.gz;
        }
        set shouldSuppressAxisLabelTruncation(a) {
            this.gz = a;
            this.e("ShouldSuppressAxisLabelTruncation");
        }
        get shouldAutoExpandMarginForInitialLabels() {
            return this.gx;
        }
        set shouldAutoExpandMarginForInitialLabels(a) {
            this.gx = a;
            this.e("ShouldAutoExpandMarginForInitialLabels");
        }
        get shouldConsiderAutoRotationForInitialLabels() {
            return this.gy;
        }
        set shouldConsiderAutoRotationForInitialLabels(a) {
            this.gy = a;
            this.e("ShouldConsiderAutoRotationForInitialLabels");
        }
        get suppressAutoMarginAndAngleRecalculation() {
            return this.g0;
        }
        set suppressAutoMarginAndAngleRecalculation(a) {
            this.g0 = a;
            this.e("SuppressAutoMarginAndAngleRecalculation");
        }
        get autoMarginAndAngleUpdateMode() {
            return this.h1;
        }
        set autoMarginAndAngleUpdateMode(a) {
            this.h1 = a;
            this.e("AutoMarginAndAngleUpdateMode");
        }
        get defaultAxisStroke() {
            return this.h5;
        }
        set defaultAxisStroke(a) {
            this.h5 = a;
            this.e("DefaultAxisStroke");
        }
        get defaultAxisMajorStroke() {
            return this.h3;
        }
        set defaultAxisMajorStroke(a) {
            this.h3 = a;
            this.e("DefaultAxisMajorStroke");
        }
        get defaultAxisMinorStroke() {
            return this.h4;
        }
        set defaultAxisMinorStroke(a) {
            this.h4 = a;
            this.e("DefaultAxisMinorStroke");
        }
        get axes() {
            return this.gr;
        }
        set axes(a) {
            this.gr = a;
            this.e("Axes");
        }
        get actualPlotAreaMarginLeft() {
            return this.ha;
        }
        set actualPlotAreaMarginLeft(a) {
            this.ha = a;
            this.e("ActualPlotAreaMarginLeft");
        }
        get actualPlotAreaMarginTop() {
            return this.hc;
        }
        set actualPlotAreaMarginTop(a) {
            this.hc = a;
            this.e("ActualPlotAreaMarginTop");
        }
        get actualPlotAreaMarginRight() {
            return this.hb;
        }
        set actualPlotAreaMarginRight(a) {
            this.hb = a;
            this.e("ActualPlotAreaMarginRight");
        }
        get actualPlotAreaMarginBottom() {
            return this.g9;
        }
        set actualPlotAreaMarginBottom(a) {
            this.g9 = a;
            this.e("ActualPlotAreaMarginBottom");
        }
        get computedPlotAreaMarginMode() {
            return this.h2;
        }
        set computedPlotAreaMarginMode(a) {
            this.h2 = a;
            this.e("ComputedPlotAreaMarginMode");
        }
        get seriesPlotAreaMarginHorizontalMode() {
            return this.h8;
        }
        set seriesPlotAreaMarginHorizontalMode(a) {
            this.h8 = a;
            this.e("SeriesPlotAreaMarginHorizontalMode");
        }
        get seriesPlotAreaMarginVerticalMode() {
            return this.h9;
        }
        set seriesPlotAreaMarginVerticalMode(a) {
            this.h9 = a;
            this.e("SeriesPlotAreaMarginVerticalMode");
        }
        get plotAreaMarginLeft() {
            return this.hi;
        }
        set plotAreaMarginLeft(a) {
            this.hi = a;
            this.e("PlotAreaMarginLeft");
        }
        get plotAreaMarginTop() {
            return this.hk;
        }
        set plotAreaMarginTop(a) {
            this.hk = a;
            this.e("PlotAreaMarginTop");
        }
        get plotAreaMarginRight() {
            return this.hj;
        }
        set plotAreaMarginRight(a) {
            this.hj = a;
            this.e("PlotAreaMarginRight");
        }
        get plotAreaMarginBottom() {
            return this.hh;
        }
        set plotAreaMarginBottom(a) {
            this.hh = a;
            this.e("PlotAreaMarginBottom");
        }
        get width() {
            return this.ia;
        }
        set width(a) {
            this.ia = a;
            this.e("Width");
        }
        get height() {
            return this.h7;
        }
        set height(a) {
            this.h7 = a;
            this.e("Height");
        }
    }
    DataChartDescription.$t = /*@__PURE__*/ markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
})();
