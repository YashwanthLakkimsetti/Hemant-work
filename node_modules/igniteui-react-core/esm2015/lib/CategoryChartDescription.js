/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let CategoryChartDescription = /*@__PURE__*/ (() => {
    class CategoryChartDescription extends XYChartDescription {
        constructor() {
            super();
            this.tm = null;
            this.tq = null;
            this.tk = null;
            this.ti = null;
            this.td = 0;
            this.tn = null;
            this.tj = null;
            this.tl = null;
            this.r5 = false;
            this.r6 = false;
            this.to = null;
            this.tp = null;
            this.ss = 0;
            this.sv = 0;
            this.sr = 0;
            this.su = 0;
            this.st = 0;
            this.sw = 0;
            this.sx = 0;
            this.th = null;
            this.r7 = false;
            this.r8 = false;
            this.sp = 0;
            this.sq = 0;
            this.sc = false;
            this.r9 = false;
            this.sb = false;
            this.tr = null;
            this.sd = false;
            this.te = 0;
            this.sz = 0;
            this.sy = 0;
            this.s0 = 0;
            this.rz = null;
            this.r0 = null;
            this.sa = false;
            this.r3 = false;
            this.r4 = false;
        }
        get tooltipTemplateRef() {
            return this.tm;
        }
        set tooltipTemplateRef(a) {
            this.tm = a;
            this.e("TooltipTemplateRef");
        }
        get width() {
            return this.tq;
        }
        set width(a) {
            this.tq = a;
            this.e("Width");
        }
        get height() {
            return this.tk;
        }
        set height(a) {
            this.tk = a;
            this.e("Height");
        }
        get background() {
            return this.ti;
        }
        set background(a) {
            this.ti = a;
            this.e("Background");
        }
        get_type() {
            return "CategoryChart";
        }
        get transitionInDuration() {
            return this.td;
        }
        set transitionInDuration(a) {
            this.td = a;
            this.e("TransitionInDuration");
        }
        get transitionInEasingFunctionRef() {
            return this.tn;
        }
        set transitionInEasingFunctionRef(a) {
            this.tn = a;
            this.e("TransitionInEasingFunctionRef");
        }
        get chartType() {
            return this.tj;
        }
        set chartType(a) {
            this.tj = a;
            this.e("ChartType");
        }
        get markerCollisionAvoidance() {
            return this.tl;
        }
        set markerCollisionAvoidance(a) {
            this.tl = a;
            this.e("MarkerCollisionAvoidance");
        }
        get isSplineShapePartOfRange() {
            return this.r5;
        }
        set isSplineShapePartOfRange(a) {
            this.r5 = a;
            this.e("IsSplineShapePartOfRange");
        }
        get isTransitionInEnabled() {
            return this.r6;
        }
        set isTransitionInEnabled(a) {
            this.r6 = a;
            this.e("IsTransitionInEnabled");
        }
        get transitionInMode() {
            return this.to;
        }
        set transitionInMode(a) {
            this.to = a;
            this.e("TransitionInMode");
        }
        get transitionInSpeedType() {
            return this.tp;
        }
        set transitionInSpeedType(a) {
            this.tp = a;
            this.e("TransitionInSpeedType");
        }
        get xAxisInterval() {
            return this.ss;
        }
        set xAxisInterval(a) {
            this.ss = a;
            this.e("XAxisInterval");
        }
        get xAxisMinorInterval() {
            return this.sv;
        }
        set xAxisMinorInterval(a) {
            this.sv = a;
            this.e("XAxisMinorInterval");
        }
        get xAxisGap() {
            return this.sr;
        }
        set xAxisGap(a) {
            this.sr = a;
            this.e("XAxisGap");
        }
        get xAxisMinimumGapSize() {
            return this.su;
        }
        set xAxisMinimumGapSize(a) {
            this.su = a;
            this.e("XAxisMinimumGapSize");
        }
        get xAxisMaximumGap() {
            return this.st;
        }
        set xAxisMaximumGap(a) {
            this.st = a;
            this.e("XAxisMaximumGap");
        }
        get xAxisOverlap() {
            return this.sw;
        }
        set xAxisOverlap(a) {
            this.sw = a;
            this.e("XAxisOverlap");
        }
        get yAxisInterval() {
            return this.sx;
        }
        set yAxisInterval(a) {
            this.sx = a;
            this.e("YAxisInterval");
        }
        get autoMarginAndAngleUpdateMode() {
            return this.th;
        }
        set autoMarginAndAngleUpdateMode(a) {
            this.th = a;
            this.e("AutoMarginAndAngleUpdateMode");
        }
        get shouldAutoExpandMarginForInitialLabels() {
            return this.r7;
        }
        set shouldAutoExpandMarginForInitialLabels(a) {
            this.r7 = a;
            this.e("ShouldAutoExpandMarginForInitialLabels");
        }
        get shouldConsiderAutoRotationForInitialLabels() {
            return this.r8;
        }
        set shouldConsiderAutoRotationForInitialLabels(a) {
            this.r8 = a;
            this.e("ShouldConsiderAutoRotationForInitialLabels");
        }
        get autoExpandMarginExtraPadding() {
            return this.sp;
        }
        set autoExpandMarginExtraPadding(a) {
            this.sp = a;
            this.e("AutoExpandMarginExtraPadding");
        }
        get autoExpandMarginMaximumValue() {
            return this.sq;
        }
        set autoExpandMarginMaximumValue(a) {
            this.sq = a;
            this.e("AutoExpandMarginMaximumValue");
        }
        get yAxisFavorLabellingScaleEnd() {
            return this.sc;
        }
        set yAxisFavorLabellingScaleEnd(a) {
            this.sc = a;
            this.e("YAxisFavorLabellingScaleEnd");
        }
        get xAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.r9;
        }
        set xAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.r9 = a;
            this.e("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.sb;
        }
        set yAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.sb = a;
            this.e("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisAutoRangeBufferMode() {
            return this.tr;
        }
        set yAxisAutoRangeBufferMode(a) {
            this.tr = a;
            this.e("YAxisAutoRangeBufferMode");
        }
        get yAxisIsLogarithmic() {
            return this.sd;
        }
        set yAxisIsLogarithmic(a) {
            this.sd = a;
            this.e("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.te;
        }
        set yAxisLogarithmBase(a) {
            this.te = a;
            this.e("YAxisLogarithmBase");
        }
        get yAxisMinimumValue() {
            return this.sz;
        }
        set yAxisMinimumValue(a) {
            this.sz = a;
            this.e("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.sy;
        }
        set yAxisMaximumValue(a) {
            this.sy = a;
            this.e("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.s0;
        }
        set yAxisMinorInterval(a) {
            this.s0 = a;
            this.e("YAxisMinorInterval");
        }
        get negativeBrushes() {
            return this.rz;
        }
        set negativeBrushes(a) {
            this.rz = a;
            this.e("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.r0;
        }
        set negativeOutlines(a) {
            this.r0 = a;
            this.e("NegativeOutlines");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.sa;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.sa = a;
            this.e("YAxisAbbreviateLargeNumbers");
        }
        get isCategoryHighlightingEnabled() {
            return this.r3;
        }
        set isCategoryHighlightingEnabled(a) {
            this.r3 = a;
            this.e("IsCategoryHighlightingEnabled");
        }
        get isItemHighlightingEnabled() {
            return this.r4;
        }
        set isItemHighlightingEnabled(a) {
            this.r4 = a;
            this.e("IsItemHighlightingEnabled");
        }
    }
    CategoryChartDescription.$t = /*@__PURE__*/ markType(CategoryChartDescription, 'CategoryChartDescription', XYChartDescription.$);
    return CategoryChartDescription;
})();
