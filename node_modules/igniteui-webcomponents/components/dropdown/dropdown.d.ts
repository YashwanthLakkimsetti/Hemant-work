import { LitElement } from 'lit';
import { Constructor } from '../common/mixins/constructor.js';
import type { IgcPlacement, IgcToggleComponent, IgcToggleEventMap } from '../toggle/types';
import IgcDropdownItemComponent from './dropdown-item.js';
import type IgcDropdownGroupComponent from './dropdown-group';
export declare enum DropdownActionKey {
    ESCAPE = "escape",
    ENTER = "enter"
}
export interface IgcDropdownEventMap extends IgcToggleEventMap {
    igcChange: CustomEvent<IgcDropdownItemComponent>;
}
declare const IgcDropdownComponent_base: Constructor<import("../common/mixins/sizable.js").SizableInterface> & Constructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcDropdownEventMap>> & Constructor<LitElement>;
/**
 * Represents a DropDown component.
 *
 * @element igc-dropdown
 *
 * @fires igcChange - Emitted when the selected item changes.
 * @fires igcOpening - Emitted just before the dropdown is open.
 * @fires igcOpened - Emitted after the dropdown is open.
 * @fires igcClosing - Emitter just before the dropdown is closed.
 * @fires igcClosed - Emitted after closing the dropdown.
 *
 * @slot target - Renders the dropdown's target element.
 * @slot - Renders the dropdown list items.
 *
 * @csspart base - The dropdown list wrapper.
 * @csspart list - The dropdown list.
 */
export default class IgcDropdownComponent extends IgcDropdownComponent_base implements IgcToggleComponent {
    static readonly tagName = "igc-dropdown";
    static styles: import("lit").CSSResult;
    private toggleController;
    private selectedItem;
    private activeItem;
    private target;
    private get allItems();
    private targetNodes;
    protected content: HTMLElement;
    protected scrollContainer: HTMLElement;
    protected items: Array<IgcDropdownItemComponent>;
    protected groups: Array<IgcDropdownGroupComponent>;
    /** Whether the dropdown should be kept open on selection. */
    keepOpenOnSelect: boolean;
    /** Sets the open state of the component. */
    open: boolean;
    /** The preferred placement of the component around the target element.
     * @type {"top" | "top-start" | "top-end" | "bottom" | "bottom-start" | "bottom-end" | "right" | "right-start" | "right-end" | "left" | "left-start" | "left-end"}
     */
    placement: IgcPlacement;
    /** Sets the component's positioning strategy. */
    positionStrategy: 'absolute' | 'fixed';
    /** Determines the behavior of the component during scrolling the container. */
    scrollStrategy: 'scroll' | 'block' | 'close';
    /**
     * Whether the component should be flipped to the opposite side of the target once it's about to overflow the visible area.
     * When true, once enough space is detected on its preferred side, it will flip back.
     */
    flip: boolean;
    /** The distance from the target element. */
    distance: number;
    /** Whether the component should be kept open on clicking outside of it. */
    keepOpenOnOutsideClick: boolean;
    /** Whether the dropdown's width should be the same as the target's one. */
    sameWidth: boolean;
    protected toggleDirectiveChange(): void;
    protected updateOptions(): void;
    protected sizeChange(): void;
    constructor();
    firstUpdated(): void;
    protected getUpdateComplete(): Promise<boolean>;
    private handleKeyDown;
    private handleItemActionKey;
    private handleClick;
    private handleTargetClick;
    private handleOpening;
    private handleClosing;
    private handleChange;
    private handleSlotChange;
    private handleFocusout;
    private getItem;
    private activateItem;
    private selectItem;
    private navigate;
    private navigateItem;
    private scrollToHiddenItem;
    private getNearestSiblingFocusableItemIndex;
    private navigateNext;
    private navigatePrev;
    private onArrowDownKeyDown;
    private onArrowUpKeyDown;
    private _hide;
    /** Shows the dropdown. */
    show(target?: HTMLElement): void;
    /** Hides the dropdown. */
    hide(): void;
    /** Toggles the open state of the dropdown. */
    toggle(target?: HTMLElement): void;
    /** Navigates to the item with the specified value. If it exists, returns the found item, otherwise - null. */
    navigateTo(value: string): IgcDropdownItemComponent | null;
    /** Navigates to the item at the specified index. If it exists, returns the found item, otherwise - null. */
    navigateTo(index: number): IgcDropdownItemComponent | null;
    /** Selects the item with the specified value. If it exists, returns the found item, otherwise - null. */
    select(value: string): IgcDropdownItemComponent | null;
    /** Selects the item at the specified index. If it exists, returns the found item, otherwise - null. */
    select(index: number): IgcDropdownItemComponent | null;
    /**  Clears the current selection of the dropdown. */
    clearSelection(): void;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-dropdown': IgcDropdownComponent;
    }
}
export {};
