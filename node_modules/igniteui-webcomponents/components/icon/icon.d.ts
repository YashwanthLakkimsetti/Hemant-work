import { LitElement } from 'lit';
declare const IgcIconComponent_base: import("../common/mixins/constructor.js").Constructor<import("../common/mixins/sizable.js").SizableInterface> & typeof LitElement;
/**
 * Icon component
 *
 * @element igc-icon
 *
 *
 */
export default class IgcIconComponent extends IgcIconComponent_base {
    static readonly tagName = "igc-icon";
    static styles: import("lit").CSSResult;
    private svg;
    private _name;
    private _collection;
    set name(value: string);
    /**
     * The name of the icon glyph to draw.
     *
     * @attr [name=""]
     */
    get name(): string;
    set collection(value: string);
    /**
     * The name of the registered collection for look up of icons.
     * Defaults to `default`.
     *
     * @attr [collection=default]
     */
    get collection(): string;
    /**
     * Whether to flip the icon. Useful for RTL layouts.
     */
    mirrored: boolean;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    private iconLoaded;
    private getIcon;
    protected render(): import("lit-html").TemplateResult<1>;
    protected registerIcon(name: string, url: string, collection?: string): Promise<void>;
    protected registerIconFromText(name: string, iconText: string, collection?: string): void;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-icon': IgcIconComponent;
    }
}
export {};
