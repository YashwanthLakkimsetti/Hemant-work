{"version":3,"file":"mask-input.js","sourceRoot":"","sources":["../../../src/components/mask-input/mask-input.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport { partNameMap } from '../common/util.js';\nimport { IgcInputBaseComponent } from '../input/input-base.js';\nimport { MaskParser } from './mask-parser.js';\n\ninterface MaskSelection {\n  start: number;\n  end: number;\n}\n\n/**\n * A masked input is an input field where a developer can control user input and format the visible value,\n * based on configurable rules\n *\n * @element igc-mask-input\n *\n * @slot prefix - Renders content before the input\n * @slot suffix - Renders content after the input\n * @slot helper-text - Renders content below the input\n *\n * @fires igcInput - Emitted when the control receives user input\n * @fires igcChange - Emitted when an alteration of the control's value is committed by the user\n * @fires igcFocus - Emitted when the control gains focus\n * @fires igcBlur - Emitted when the control loses focus\n *\n * @csspart container - The main wrapper that holds all main input elements\n * @csspart input - The native input element\n * @csspart label - The native label element\n * @csspart prefix - The prefix wrapper\n * @csspart suffix - The suffix wrapper\n * @csspart helper-text - The helper text wrapper\n */\nexport default class IgcMaskInputComponent extends IgcInputBaseComponent {\n  public static readonly tagName = 'igc-mask-input';\n\n  protected parser = new MaskParser();\n  protected _value = '';\n  protected selection: MaskSelection = { start: 0, end: 0 };\n  protected compositionStart = 0;\n\n  @state()\n  protected hasFocus = false;\n\n  @state()\n  protected maskedValue = '';\n\n  protected get inputSelection(): MaskSelection {\n    return {\n      start: this.input.selectionStart || 0,\n      end: this.input.selectionEnd || 0,\n    };\n  }\n\n  /** The direction attribute of the control. */\n  @property({ reflect: true })\n  public override dir: 'ltr' | 'rtl' | 'auto' = 'auto';\n\n  /** Controls the validity of the control. */\n  @property({ reflect: true, type: Boolean })\n  public invalid = false;\n\n  /**\n   * Dictates the behavior when retrieving the value of the control:\n   *\n   * - `raw` will return the clean user input.\n   * - `withFormatting` will return the value with all literals and prompts.\n   *\n   */\n  @property({ attribute: 'value-mode' })\n  public valueMode: 'raw' | 'withFormatting' = 'raw';\n\n  /**\n   * The value of the input.\n   *\n   * Regardless of the currently set `value-mode`, an empty value will return an empty string.\n   *\n   */\n  @property()\n  @blazorTwoWayBind('igcChange', 'detail')\n  public get value() {\n    return this._value\n      ? this.valueMode !== 'raw'\n        ? this.maskedValue\n        : this._value\n      : this._value;\n  }\n\n  public set value(string: string) {\n    this._value = string ?? '';\n    this.maskedValue = this.parser.apply(this._value);\n  }\n\n  /** The mask pattern to apply on the input. */\n  @property()\n  public mask!: string;\n\n  /** The prompt symbol to use for unfilled parts of the mask. */\n  @property()\n  public prompt!: string;\n\n  @watch('prompt')\n  protected promptChange() {\n    this.parser.prompt = this.prompt;\n    if (this.value) {\n      this.maskedValue = this.parser.apply(this._value);\n    }\n  }\n\n  @watch('mask')\n  protected maskChange() {\n    this.parser.mask = this.mask;\n    if (this.value) {\n      this.maskedValue = this.parser.apply(this._value);\n    }\n  }\n\n  @watch('required', { waitUntilFirstUpdate: true })\n  @watch('disabled', { waitUntilFirstUpdate: true })\n  @watch('value', { waitUntilFirstUpdate: true })\n  protected handleInvalidState() {\n    this.updateComplete.then(() => (this.invalid = !this.checkValidity()));\n  }\n\n  public override connectedCallback() {\n    super.connectedCallback();\n\n    this.mask = this.mask || this.parser.mask;\n    this.prompt = this.prompt || this.parser.prompt;\n  }\n\n  protected handleKeydown(e: KeyboardEvent) {\n    if (!e.key) {\n      return;\n    }\n    this.selection = this.inputSelection;\n  }\n\n  protected handleCompositionStart() {\n    this.compositionStart = this.inputSelection.start;\n  }\n\n  protected handleCompositionEnd({ data }: CompositionEvent) {\n    const start = this.compositionStart,\n      end = this.inputSelection.end;\n    this.updateInput(data, start, end);\n  }\n\n  protected handleInput({ inputType, isComposing }: InputEvent) {\n    const value = this.input.value;\n    const start = this.selection.start;\n    let end = this.selection.end;\n\n    switch (inputType) {\n      case 'deleteContentForward':\n        this.updateInput('', start, (end = start === end ? ++end : end));\n        return this.updateComplete.then(() =>\n          this.input.setSelectionRange(end, end)\n        );\n\n      case 'deleteContentBackward':\n        if (isComposing) return;\n        return this.updateInput('', this.inputSelection.start, end);\n\n      case 'deleteByCut':\n        return this.updateInput('', start, end);\n\n      case 'insertText':\n        return this.updateInput(\n          value.substring(start, this.inputSelection.end),\n          start,\n          end\n        );\n\n      case 'insertFromPaste':\n        return this.updateInput(\n          value.substring(start, this.inputSelection.end),\n          start,\n          this.inputSelection.start\n        );\n\n      case 'insertFromDrop':\n        return this.updateInput(\n          value.substring(this.inputSelection.start, this.inputSelection.end),\n          this.inputSelection.start,\n          this.inputSelection.end\n        );\n    }\n  }\n\n  protected updateInput(part: string, start: number, finish: number) {\n    const { value, end } = this.parser.replace(\n      this.maskedValue,\n      part,\n      start,\n      finish\n    );\n    this.maskedValue = value;\n    this._value = this.parser.parse(value);\n\n    this.requestUpdate();\n    if (start !== this.mask.length) {\n      this.emitEvent('igcInput', { detail: this.value });\n    }\n    this.updateComplete.then(() => this.input.setSelectionRange(end, end));\n  }\n\n  protected handleCut() {\n    this.selection = this.inputSelection;\n  }\n\n  protected handleDragStart() {\n    this.selection = this.inputSelection;\n  }\n\n  protected handleDragEnter() {\n    if (!this.hasFocus && !this._value) {\n      this.maskedValue = this.parser.apply();\n    }\n  }\n\n  protected handleDragLeave() {\n    if (!this.hasFocus) {\n      this.updateMaskedValue();\n    }\n  }\n\n  protected override handleFocus() {\n    this.hasFocus = true;\n    super.handleFocus();\n\n    if (this.readonly) {\n      return;\n    }\n\n    if (!this._value) {\n      this.maskedValue = this.parser.apply();\n      // In case of empty value, select the whole mask\n      this.updateComplete.then(() => this.select());\n    }\n  }\n\n  protected override handleBlur() {\n    this.hasFocus = false;\n    this.updateMaskedValue();\n    super.handleBlur();\n  }\n\n  protected override handleChange() {\n    this.emitEvent('igcChange', { detail: this.value });\n    this.invalid = !this.checkValidity();\n  }\n\n  protected handleInvalid() {\n    this.invalid = true;\n  }\n\n  protected handleClick() {\n    // Clicking at the end of the input field will select the entire mask\n    if (\n      this.input.selectionStart === this.input.selectionEnd &&\n      this.input.selectionStart === this.maskedValue.length\n    ) {\n      this.select();\n    }\n  }\n\n  protected updateMaskedValue() {\n    if (this.maskedValue === this.parser.apply()) {\n      this.maskedValue = '';\n    }\n  }\n\n  /** Replaces the selected text in the control and re-applies the mask */\n  public override setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    _selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve'\n  ) {\n    this.input.value = this.parser.replace(\n      this.input.value,\n      replacement,\n      start,\n      end\n    ).value;\n    this.maskedValue = this.parser.apply(this.parser.parse(this.input.value));\n    this._value = this.parser.parse(this.maskedValue);\n  }\n\n  public override setSelectionRange(\n    start: number,\n    end: number,\n    direction?: 'backward' | 'forward' | 'none'\n  ): void {\n    super.setSelectionRange(start, end, direction);\n    this.selection = { start, end };\n  }\n\n  /** Checks for validity of the control and shows the browser message if it's invalid. */\n  public reportValidity() {\n    const state = this._value\n      ? this.parser.isValidString(this.input.value)\n      : this.input.reportValidity();\n    this.invalid = !state;\n    return state;\n  }\n\n  /**\n   * Sets a custom validation message for the control.\n   * As long as `message` is not empty, the control is considered invalid.\n   */\n  public setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  /** Check for validity of the control */\n  public checkValidity() {\n    if (this.disabled) {\n      return this.input.checkValidity();\n    }\n\n    if (!this._value) {\n      return !this.required;\n    }\n\n    return (\n      this.input.checkValidity() && this.parser.isValidString(this.input.value)\n    );\n  }\n\n  /** Selects all text within the input. */\n  public select() {\n    this.input.select();\n  }\n\n  protected override renderInput() {\n    return html`\n      <input\n        type=\"text\"\n        part=${partNameMap(this.resolvePartNames('input'))}\n        name=${ifDefined(this.name)}\n        .value=${live(this.maskedValue)}\n        .placeholder=${live(this.placeholder ?? this.parser.escapedMask)}\n        ?readonly=${this.readonly}\n        ?disabled=${this.disabled}\n        ?required=${this.required}\n        @dragenter=${this.handleDragEnter}\n        @dragleave=${this.handleDragLeave}\n        @dragstart=${this.handleDragStart}\n        @blur=${this.handleBlur}\n        @focus=${this.handleFocus}\n        @cut=${this.handleCut}\n        @change=${this.handleChange}\n        @click=${this.handleClick}\n        @compositionstart=${this.handleCompositionStart}\n        @compositionend=${this.handleCompositionEnd}\n        @input=${this.handleInput}\n        aria-invalid=\"${this.invalid ? 'true' : 'false'}\"\n        @invalid=\"${this.handleInvalid}\"\n        @keydown=${this.handleKeydown}\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-mask-input': IgcMaskInputComponent;\n  }\n}\n"]}