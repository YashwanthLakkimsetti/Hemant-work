import { IgcInputBaseComponent } from '../input/input-base.js';
import { MaskParser } from './mask-parser.js';
interface MaskSelection {
    start: number;
    end: number;
}
/**
 * A masked input is an input field where a developer can control user input and format the visible value,
 * based on configurable rules
 *
 * @element igc-mask-input
 *
 * @slot prefix - Renders content before the input
 * @slot suffix - Renders content after the input
 * @slot helper-text - Renders content below the input
 *
 * @fires igcInput - Emitted when the control receives user input
 * @fires igcChange - Emitted when an alteration of the control's value is committed by the user
 * @fires igcFocus - Emitted when the control gains focus
 * @fires igcBlur - Emitted when the control loses focus
 *
 * @csspart container - The main wrapper that holds all main input elements
 * @csspart input - The native input element
 * @csspart label - The native label element
 * @csspart prefix - The prefix wrapper
 * @csspart suffix - The suffix wrapper
 * @csspart helper-text - The helper text wrapper
 */
export default class IgcMaskInputComponent extends IgcInputBaseComponent {
    static readonly tagName = "igc-mask-input";
    protected parser: MaskParser;
    protected _value: string;
    protected selection: MaskSelection;
    protected compositionStart: number;
    protected hasFocus: boolean;
    protected maskedValue: string;
    protected get inputSelection(): MaskSelection;
    /** The direction attribute of the control. */
    dir: 'ltr' | 'rtl' | 'auto';
    /** Controls the validity of the control. */
    invalid: boolean;
    /**
     * Dictates the behavior when retrieving the value of the control:
     *
     * - `raw` will return the clean user input.
     * - `withFormatting` will return the value with all literals and prompts.
     *
     */
    valueMode: 'raw' | 'withFormatting';
    /**
     * The value of the input.
     *
     * Regardless of the currently set `value-mode`, an empty value will return an empty string.
     *
     */
    get value(): string;
    set value(string: string);
    /** The mask pattern to apply on the input. */
    mask: string;
    /** The prompt symbol to use for unfilled parts of the mask. */
    prompt: string;
    protected promptChange(): void;
    protected maskChange(): void;
    protected handleInvalidState(): void;
    connectedCallback(): void;
    protected handleKeydown(e: KeyboardEvent): void;
    protected handleCompositionStart(): void;
    protected handleCompositionEnd({ data }: CompositionEvent): void;
    protected handleInput({ inputType, isComposing }: InputEvent): void | Promise<void>;
    protected updateInput(part: string, start: number, finish: number): void;
    protected handleCut(): void;
    protected handleDragStart(): void;
    protected handleDragEnter(): void;
    protected handleDragLeave(): void;
    protected handleFocus(): void;
    protected handleBlur(): void;
    protected handleChange(): void;
    protected handleInvalid(): void;
    protected handleClick(): void;
    protected updateMaskedValue(): void;
    /** Replaces the selected text in the control and re-applies the mask */
    setRangeText(replacement: string, start: number, end: number, _selectMode?: 'select' | 'start' | 'end' | 'preserve'): void;
    setSelectionRange(start: number, end: number, direction?: 'backward' | 'forward' | 'none'): void;
    /** Checks for validity of the control and shows the browser message if it's invalid. */
    reportValidity(): boolean;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
     */
    setCustomValidity(message: string): void;
    /** Check for validity of the control */
    checkValidity(): boolean;
    /** Selects all text within the input. */
    select(): void;
    protected renderInput(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-mask-input': IgcMaskInputComponent;
    }
}
export {};
