var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement, nothing } from 'lit';
import { property, query, queryAssignedElements } from 'lit/decorators.js';
import { themes } from '../../theming/theming-decorator.js';
import { alternateName } from '../common/decorators/alternateName.js';
import { blazorSuppress } from '../common/decorators/blazorSuppress.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { SizableMixin } from '../common/mixins/sizable.js';
import { partNameMap } from '../common/util.js';
import { styles } from './themes/light/input.base.css.js';
import { styles as bootstrap } from './themes/light/input.bootstrap.css.js';
import { styles as fluent } from './themes/light/input.fluent.css.js';
import { styles as indigo } from './themes/light/input.indigo.css.js';
import { styles as material } from './themes/light/input.material.css.js';
let nextId = 0;
let IgcInputBaseComponent = class IgcInputBaseComponent extends SizableMixin(EventEmitterMixin(LitElement)) {
    constructor() {
        super();
        this.inputId = `input-${nextId++}`;
        this.outlined = false;
        this.required = false;
        this.disabled = false;
        this.readonly = false;
        this.size = 'medium';
    }
    connectedCallback() {
        super.connectedCallback();
        this.shadowRoot.addEventListener('slotchange', () => this.requestUpdate());
    }
    themeAdopted(controller) {
        this.themeController = controller;
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    resolvePartNames(base) {
        return {
            [base]: true,
            prefixed: this.prefixes.length > 0,
            suffixed: this.suffixes.length > 0,
            filled: !!this.value,
        };
    }
    handleFocus() {
        this.emitEvent('igcFocus');
    }
    handleBlur() {
        this.emitEvent('igcBlur');
    }
    handleChange() {
        this.value = this.input.value;
        this.emitEvent('igcChange', { detail: this.value });
    }
    setSelectionRange(start, end, direction = 'none') {
        this.input.setSelectionRange(start, end, direction);
    }
    setRangeText(replacement, start, end, selectMode = 'preserve') {
        this.input.setRangeText(replacement, start, end, selectMode);
    }
    renderPrefix() {
        return html `<div part="prefix">
      <slot name="prefix"></slot>
    </div>`;
    }
    renderSuffix() {
        return html `<div part="suffix">
      <slot name="suffix"></slot>
    </div>`;
    }
    renderLabel() {
        return this.label
            ? html `<label part="label" for="${this.inputId}"> ${this.label} </label>`
            : nothing;
    }
    renderMaterial() {
        return html `
      <div
        part="${partNameMap({
            ...this.resolvePartNames('container'),
            labelled: this.label,
        })}"
      >
        <div part="start">${this.renderPrefix()}</div>
        ${this.renderInput()}
        <div part="notch">${this.renderLabel()}</div>
        <div part="filler"></div>
        <div part="end">${this.renderSuffix()}</div>
      </div>
      <div part="helper-text">
        <slot name="helper-text"></slot>
      </div>
    `;
    }
    renderStandard() {
        return html `${this.renderLabel()}
      <div part="${partNameMap(this.resolvePartNames('container'))}">
        ${this.renderPrefix()} ${this.renderInput()} ${this.renderSuffix()}
      </div>
      <div part="helper-text">
        <slot name="helper-text"></slot>
      </div>`;
    }
    render() {
        return html `${this.themeController.theme === 'material'
            ? this.renderMaterial()
            : this.renderStandard()}`;
    }
};
IgcInputBaseComponent.shadowRootOptions = {
    ...LitElement.shadowRootOptions,
    delegatesFocus: true,
};
IgcInputBaseComponent.styles = styles;
__decorate([
    blazorSuppress()
], IgcInputBaseComponent.prototype, "value", void 0);
__decorate([
    query('input', true)
], IgcInputBaseComponent.prototype, "input", void 0);
__decorate([
    queryAssignedElements({ slot: 'prefix' })
], IgcInputBaseComponent.prototype, "prefixes", void 0);
__decorate([
    queryAssignedElements({ slot: 'suffix' })
], IgcInputBaseComponent.prototype, "suffixes", void 0);
__decorate([
    property()
], IgcInputBaseComponent.prototype, "name", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcInputBaseComponent.prototype, "outlined", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcInputBaseComponent.prototype, "required", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcInputBaseComponent.prototype, "disabled", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcInputBaseComponent.prototype, "readonly", void 0);
__decorate([
    property({ type: String })
], IgcInputBaseComponent.prototype, "placeholder", void 0);
__decorate([
    property({ type: String })
], IgcInputBaseComponent.prototype, "label", void 0);
__decorate([
    alternateName('focusComponent')
], IgcInputBaseComponent.prototype, "focus", null);
__decorate([
    alternateName('blurComponent')
], IgcInputBaseComponent.prototype, "blur", null);
IgcInputBaseComponent = __decorate([
    themes({ bootstrap, material, fluent, indigo })
], IgcInputBaseComponent);
export { IgcInputBaseComponent };
//# sourceMappingURL=input-base.js.map