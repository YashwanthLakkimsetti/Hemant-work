import { LitElement, TemplateResult } from 'lit';
import type { ReactiveTheme, ThemeController } from '../../theming/types.js';
import { Constructor } from '../common/mixins/constructor.js';
export interface IgcInputEventMap {
    igcInput: CustomEvent<string>;
    igcChange: CustomEvent<string>;
    igcFocus: CustomEvent<void>;
    igcBlur: CustomEvent<void>;
}
declare const IgcInputBaseComponent_base: Constructor<import("../common/mixins/sizable.js").SizableInterface> & Constructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcInputEventMap>> & Constructor<LitElement>;
export declare abstract class IgcInputBaseComponent extends IgcInputBaseComponent_base implements ReactiveTheme {
    protected static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode | undefined;
    };
    static styles: import("lit").CSSResult;
    protected inputId: string;
    /** The value attribute of the control. */
    abstract value: string;
    protected input: HTMLInputElement;
    protected prefixes: Array<HTMLElement>;
    protected suffixes: Array<HTMLElement>;
    protected themeController: ThemeController;
    /** The name attribute of the control. */
    name: string;
    outlined: boolean;
    /** Makes the control a required field. */
    required: boolean;
    /** Makes the control a disabled field. */
    disabled: boolean;
    /** Makes the control a readonly field. */
    readonly: boolean;
    /** The placeholder attribute of the control. */
    placeholder: string;
    /** The label for the control. */
    label: string;
    constructor();
    connectedCallback(): void;
    themeAdopted(controller: ThemeController): void;
    /** Sets focus on the control. */
    focus(options?: FocusOptions): void;
    /** Removes focus from the control. */
    blur(): void;
    protected abstract renderInput(): TemplateResult;
    protected resolvePartNames(base: string): {
        [x: string]: boolean;
        prefixed: boolean;
        suffixed: boolean;
        filled: boolean;
    };
    protected handleFocus(): void;
    protected handleBlur(): void;
    protected handleChange(): void;
    /** Sets the text selection range of the control */
    setSelectionRange(start: number, end: number, direction?: 'backward' | 'forward' | 'none'): void;
    /** Replaces the selected text in the input. */
    setRangeText(replacement: string, start: number, end: number, selectMode?: 'select' | 'start' | 'end' | 'preserve'): void;
    private renderPrefix;
    private renderSuffix;
    private renderLabel;
    private renderMaterial;
    private renderStandard;
    protected render(): TemplateResult<1>;
}
export {};
