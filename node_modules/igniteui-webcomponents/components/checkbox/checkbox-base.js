var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement } from 'lit';
import { property, query, state } from 'lit/decorators.js';
import { alternateName } from '../common/decorators/alternateName.js';
import { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
export class IgcCheckboxBaseComponent extends EventEmitterMixin(LitElement) {
    constructor() {
        super(...arguments);
        this.focused = false;
        this.disabled = false;
        this.checked = false;
        this.required = false;
        this.invalid = false;
        this.labelPosition = 'after';
    }
    click() {
        this.input.click();
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    reportValidity() {
        return this.input.reportValidity();
    }
    setCustomValidity(message) {
        this.input.setCustomValidity(message);
        this.invalid = !this.input.checkValidity();
    }
    handleBlur() {
        this.emitEvent('igcBlur');
        this.focused = false;
    }
    handleFocus() {
        this.emitEvent('igcFocus');
    }
    handleMouseDown(event) {
        event.preventDefault();
        this.input.focus();
        this.focused = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('keyup', this.handleKeyUp);
    }
    disconnectedCallback() {
        this.removeEventListener('keyup', this.handleKeyUp);
    }
    handleKeyUp() {
        if (!this.focused) {
            this.focused = true;
        }
    }
}
__decorate([
    query('input[type="checkbox"]', true)
], IgcCheckboxBaseComponent.prototype, "input", void 0);
__decorate([
    state()
], IgcCheckboxBaseComponent.prototype, "focused", void 0);
__decorate([
    property()
], IgcCheckboxBaseComponent.prototype, "name", void 0);
__decorate([
    property()
], IgcCheckboxBaseComponent.prototype, "value", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcCheckboxBaseComponent.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean }),
    blazorTwoWayBind('igcChange', 'detail')
], IgcCheckboxBaseComponent.prototype, "checked", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcCheckboxBaseComponent.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcCheckboxBaseComponent.prototype, "invalid", void 0);
__decorate([
    property({ reflect: true, attribute: 'label-position' })
], IgcCheckboxBaseComponent.prototype, "labelPosition", void 0);
__decorate([
    property({ reflect: true, attribute: 'aria-labelledby' })
], IgcCheckboxBaseComponent.prototype, "ariaLabelledby", void 0);
__decorate([
    alternateName('focusComponent')
], IgcCheckboxBaseComponent.prototype, "focus", null);
__decorate([
    alternateName('blurComponent')
], IgcCheckboxBaseComponent.prototype, "blur", null);
//# sourceMappingURL=checkbox-base.js.map