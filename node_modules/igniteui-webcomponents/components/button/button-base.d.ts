import { LitElement, TemplateResult } from 'lit';
import { Constructor } from '../common/mixins/constructor.js';
export interface IgcButtonEventMap {
    igcFocus: CustomEvent<void>;
    igcBlur: CustomEvent<void>;
}
declare const IgcButtonBaseComponent_base: Constructor<import("../common/mixins/sizable.js").SizableInterface> & Constructor<import("../common//mixins/event-emitter.js").EventEmitterInterface<IgcButtonEventMap>> & Constructor<LitElement>;
export declare abstract class IgcButtonBaseComponent extends IgcButtonBaseComponent_base {
    protected static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        slotAssignment?: SlotAssignmentMode | undefined;
    };
    private nativeElement;
    private _ariaLabel;
    /**
     * The type of the button. Defaults to undefined.
     */
    type: 'button' | 'reset' | 'submit';
    /** The URL the button points to. */
    href: string;
    /** Prompts to save the linked URL instead of navigating to it. */
    download: string;
    /** Where to display the linked URL, as the name for a browsing context. */
    target: '_blank' | '_parent' | '_self' | '_top' | undefined;
    /**
     * The relationship of the linked URL.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types
     */
    rel: string;
    /**
     * Determines whether the button is disabled.
     */
    disabled: boolean;
    set ariaLabel(value: string);
    get ariaLabel(): string;
    /** Sets focus in the button. */
    focus(options?: FocusOptions): void;
    /** Removes focus from the button. */
    blur(): void;
    protected handleFocus(): void;
    protected handleBlur(): void;
    protected get classes(): {};
    private renderButton;
    private renderLinkButton;
    protected abstract renderContent(): TemplateResult;
    protected render(): TemplateResult<1>;
}
export {};
