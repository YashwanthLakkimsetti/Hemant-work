var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, html } from 'lit';
import { property, query } from 'lit/decorators.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { themes } from '../../theming/theming-decorator.js';
import { styles } from './themes/light/expansion-panel.base.css.js';
import { styles as bootstrap } from './themes/light/expansion-panel.bootstrap.css.js';
import { styles as fluent } from './themes/light/expansion-panel.fluent.css.js';
import { styles as indigo } from './themes/light/expansion-panel.indigo.css.js';
let NEXT_ID = 0;
let IgcExpansionPanelComponent = class IgcExpansionPanelComponent extends EventEmitterMixin(LitElement) {
    constructor() {
        super(...arguments);
        this.open = false;
        this.disabled = false;
        this.indicatorPosition = 'start';
    }
    connectedCallback() {
        super.connectedCallback();
        const id = this.getAttribute('id');
        this.panelId = id ? id : 'igc-expansion-panel-' + ++NEXT_ID;
    }
    handleClicked() {
        this.panelHeader.focus();
        if (this.open) {
            this.closeWithEvent();
        }
        else {
            this.openWithEvent();
        }
    }
    handleKeydown(event) {
        if (this.disabled) {
            return;
        }
        switch (event.key.toLowerCase()) {
            case 'arrowdown':
            case 'down':
                if (event.altKey) {
                    this.openWithEvent();
                }
                break;
            case 'arrowup':
            case 'up':
                if (event.altKey) {
                    this.closeWithEvent();
                }
                break;
            case 'enter':
            case ' ':
                this.open ? this.closeWithEvent() : this.openWithEvent();
                break;
        }
    }
    openWithEvent() {
        if (this.open) {
            return;
        }
        const args = {
            cancelable: true,
            detail: this,
        };
        const allowed = this.emitEvent('igcOpening', args);
        if (!allowed) {
            return;
        }
        this.open = true;
        this.emitEvent('igcOpened', { detail: this });
    }
    closeWithEvent() {
        if (!this.open) {
            return;
        }
        const args = {
            cancelable: true,
            detail: this,
        };
        const allowed = this.emitEvent('igcClosing', args);
        if (!allowed) {
            return;
        }
        this.open = false;
        this.emitEvent('igcClosed', { detail: this });
    }
    toggle() {
        this.open = !this.open;
    }
    hide() {
        this.open = false;
    }
    show() {
        this.open = true;
    }
    indicatorTemplate() {
        return html `
      <div part="indicator" aria-hidden="true">
        <slot name="indicator">
          <igc-icon
            name=${this.open ? 'keyboard_arrow_up' : 'keyboard_arrow_down'}
            collection="internal"
          >
          </igc-icon>
        </slot>
      </div>
    `;
    }
    headerTemplate() {
        return html `
      <div
        part="header"
        id="${this.panelId}-header"
        role="button"
        aria-expanded="${this.open}"
        aria-disabled="${this.disabled}"
        aria-controls="${this.panelId}-content"
        tabindex=${this.disabled ? '-1' : '0'}
        @click=${this.handleClicked}
        @keydown=${this.handleKeydown}
      >
        ${this.indicatorTemplate()}
        <div>
          <slot name="title" part="title"></slot>
          <slot name="subtitle" part="subtitle"></slot>
        </div>
      </div>
    `;
    }
    contentTemplate() {
        return html `
      <div
        part="content"
        role="region"
        id="${this.panelId}-content"
        aria-labelledby="${this.panelId}-header"
      >
        <slot ?hidden=${!this.open}></slot>
      </div>
    `;
    }
    render() {
        return html ` ${this.headerTemplate()} ${this.contentTemplate()}`;
    }
};
IgcExpansionPanelComponent.tagName = 'igc-expansion-panel';
IgcExpansionPanelComponent.styles = styles;
__decorate([
    property({ reflect: true, type: Boolean })
], IgcExpansionPanelComponent.prototype, "open", void 0);
__decorate([
    property({ reflect: true, type: Boolean })
], IgcExpansionPanelComponent.prototype, "disabled", void 0);
__decorate([
    property({ reflect: true, attribute: 'indicator-position' })
], IgcExpansionPanelComponent.prototype, "indicatorPosition", void 0);
__decorate([
    query('[part~="header"]', true)
], IgcExpansionPanelComponent.prototype, "panelHeader", void 0);
IgcExpansionPanelComponent = __decorate([
    themes({ bootstrap, fluent, indigo })
], IgcExpansionPanelComponent);
export default IgcExpansionPanelComponent;
//# sourceMappingURL=expansion-panel.js.map