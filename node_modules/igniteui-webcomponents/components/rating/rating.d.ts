import { LitElement } from 'lit';
import { Constructor } from '../common/mixins/constructor.js';
import type IgcRatingSymbolComponent from './rating-symbol';
export interface IgcRatingEventMap {
    igcChange: CustomEvent<number>;
    igcHover: CustomEvent<number>;
}
declare const IgcRatingComponent_base: Constructor<import("../common/mixins/sizable.js").SizableInterface> & Constructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcRatingEventMap>> & Constructor<LitElement>;
/**
 * Rating provides insight regarding others' opinions and experiences,
 * and can allow the user to submit a rating of their own
 *
 * @element igc-rating
 *
 * @fires igcChange - Emitted when the value of the control changes.
 * @fires igcHover - Emitted when hover is enabled and the user mouses over a symbol of the rating.
 *
 * @csspart base - The main wrapper which holds all of the rating elements.
 * @csspart label - The label part.
 * @csspart symbol - The part for a single symbol.
 * @csspart fraction -The part for the selected symbols.
 * @csspart symbols-wrapper - The wrapper that holds all symbols.
 * @csspart large - A part responsible for the symbols size.
 * @csspart medium - A part responsible for the symbols size.
 * @csspart small- A part responsible for the symbols size.
 */
export default class IgcRatingComponent extends IgcRatingComponent_base {
    static readonly tagName = "igc-rating";
    static styles: import("lit").CSSResult[];
    protected container: HTMLElement;
    protected ratingSymbols: Array<IgcRatingSymbolComponent>;
    protected hoverValue: number;
    protected hoverState: boolean;
    protected get isInteractive(): boolean;
    protected get hasProjectedSymbols(): boolean;
    protected get isLTR(): boolean;
    protected get valueText(): string | number;
    /** The maximum value for the rating */
    max: number;
    /** The minimum value change allowed. */
    step: number;
    /** The symbol which the rating will display. */
    symbol: string;
    /** The name attribute of the control */
    name: string;
    /** The label of the control. */
    label: string;
    /**
     * A format string which sets aria-valuetext. All instances of '{0}' will be replaced
     * with the current value of the control.
     * Important for screen-readers and useful for localization.
     */
    valueFormat: string;
    /** The current value of the component */
    value: number;
    /** Sets the disabled state of the component */
    disabled: boolean;
    /** Sets hover preview behavior for the component */
    hoverPreview: boolean;
    /** Sets the readonly state of the component */
    readonly: boolean;
    protected handleMaxChange(): void;
    protected handleValueChange(): void;
    protected handlePrecisionChange(): void;
    constructor();
    protected handleClick({ clientX }: MouseEvent): void;
    protected handleMouseMove({ clientX }: MouseEvent): void;
    protected handleMouseEnter(): void;
    protected handleMouseLeave(): void;
    protected handleKeyDown({ key }: KeyboardEvent): void;
    protected handleSlotChange(): void;
    protected calcNewValue(x: number): number;
    protected getPrecision(num: number): number;
    protected round(value: number): number;
    /**
     * Increments the value of the control by `n` steps multiplied by the
     * step factor.
     */
    stepUp(n?: number): void;
    /**
     * Decrements the value of the control by `n` steps multiplied by
     * the step factor.
     */
    stepDown(n?: number): void;
    protected renderSymbols(): Generator<import("lit-html").TemplateResult<1>, void, unknown>;
    protected renderProjected(): import("lit-html").TemplateResult<1>;
    protected renderFractionWrapper(styles: {
        width: string;
    }): import("lit-html").TemplateResult<1>;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-rating': IgcRatingComponent;
    }
}
export {};
