import { igcToggle } from './toggle.directive.js';
export class IgcToggleController {
    constructor(host, target) {
        this.initialScrollTop = 0;
        this.initialScrollLeft = 0;
        this.blockScroll = (event) => {
            var _a, _b, _c, _d;
            event.preventDefault();
            if (!this.sourceElement || this.sourceElement !== event.target) {
                this.sourceElement = event.target;
                this.initialScrollTop =
                    (_a = this.sourceElement.scrollTop) !== null && _a !== void 0 ? _a : (_b = this.sourceElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.scrollTop;
                this.initialScrollLeft =
                    (_c = this.sourceElement.scrollLeft) !== null && _c !== void 0 ? _c : (_d = this.sourceElement.firstElementChild) === null || _d === void 0 ? void 0 : _d.scrollLeft;
            }
            this.sourceElement.scrollTop = this.initialScrollTop;
            this.sourceElement.scrollLeft = this.initialScrollLeft;
            if (this.sourceElement.firstElementChild) {
                this.sourceElement.firstElementChild.scrollTop = this.initialScrollTop;
                this.sourceElement.firstElementChild.scrollLeft = this.initialScrollLeft;
            }
        };
        this.documentClicked = (event) => {
            if (!this.host.keepOpenOnOutsideClick) {
                const target = event.composed ? event.composedPath() : [event.target];
                const isInsideClick = target.includes(this.host) ||
                    (this.target !== undefined && target.includes(this.target));
                if (isInsideClick) {
                    return;
                }
                else {
                    this.host.hide();
                }
            }
        };
        this.handleScroll = (event) => {
            switch (this.host.scrollStrategy) {
                case 'scroll':
                    break;
                case 'block':
                    this.blockScroll(event);
                    break;
                case 'close':
                    this.host.hide();
                    break;
            }
        };
        host.addController(this);
        this.host = host;
        if (target) {
            this._target = target;
        }
        this.updateToggleDir();
    }
    set target(value) {
        this._target = value;
        this.updateToggleDir();
    }
    get target() {
        return this._target;
    }
    hostConnected() {
        this.addEventListeners();
    }
    hostDisconnected() {
        this.removeEventListeners();
    }
    updateToggleDir() {
        this.toggleDirective = igcToggle(this._target, this.host, this);
        this.addEventListeners();
    }
    addEventListeners() {
        if (this.host.open) {
            document.addEventListener('scroll', this.handleScroll, true);
            if (!this.host.keepOpenOnOutsideClick) {
                document.addEventListener('click', this.documentClicked, true);
            }
        }
    }
    removeEventListeners() {
        document.removeEventListener('click', this.documentClicked, true);
        document.removeEventListener('scroll', this.handleScroll, true);
    }
}
//# sourceMappingURL=toggle.controller.js.map