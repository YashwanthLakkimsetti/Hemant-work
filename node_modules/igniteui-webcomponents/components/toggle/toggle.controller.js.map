{"version":3,"file":"toggle.controller.js","sourceRoot":"","sources":["../../../src/components/toggle/toggle.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { ReactiveController, ReactiveControllerHost } from 'lit';\nimport { igcToggle, IgcToggleDirective } from './toggle.directive.js';\nimport type { DirectiveResult } from 'lit/directive';\nimport type { IgcToggleComponent } from './types';\n\n/**\n * Controller, bundling the creation of a toggle directive and handling global events,\n * related to the configuration of togglable components.\n */\nexport class IgcToggleController implements ReactiveController {\n  private host: IgcToggleComponent & HTMLElement;\n  private sourceElement?: Element;\n  private initialScrollTop = 0;\n  private initialScrollLeft = 0;\n  private _target!: HTMLElement;\n\n  /** The directive that marks the toggle. */\n  public toggleDirective!: DirectiveResult<typeof IgcToggleDirective>;\n  public rendered!: Promise<void>;\n\n  public set target(value: HTMLElement) {\n    this._target = value;\n    this.updateToggleDir();\n  }\n\n  /** The element, relative to which, the toggle will be positioned. */\n  public get target() {\n    return this._target;\n  }\n\n  constructor(\n    host: ReactiveControllerHost & IgcToggleComponent & HTMLElement,\n    target?: HTMLElement\n  ) {\n    host.addController(this);\n\n    this.host = host;\n\n    if (target) {\n      this._target = target;\n    }\n\n    this.updateToggleDir();\n  }\n\n  public hostConnected() {\n    this.addEventListeners();\n  }\n\n  public hostDisconnected() {\n    this.removeEventListeners();\n  }\n\n  public updateToggleDir() {\n    this.toggleDirective = igcToggle(this._target, this.host, this);\n    this.addEventListeners();\n  }\n\n  private addEventListeners() {\n    if (this.host.open) {\n      document.addEventListener('scroll', this.handleScroll, true);\n      if (!this.host.keepOpenOnOutsideClick) {\n        document.addEventListener('click', this.documentClicked, true);\n      }\n    }\n  }\n\n  private removeEventListeners() {\n    document.removeEventListener('click', this.documentClicked, true);\n    document.removeEventListener('scroll', this.handleScroll, true);\n  }\n\n  private blockScroll = (event: Event) => {\n    event.preventDefault();\n    if (!this.sourceElement || this.sourceElement !== event.target) {\n      this.sourceElement = event.target as Element;\n      this.initialScrollTop =\n        this.sourceElement.scrollTop ??\n        this.sourceElement.firstElementChild?.scrollTop;\n      this.initialScrollLeft =\n        this.sourceElement.scrollLeft ??\n        this.sourceElement.firstElementChild?.scrollLeft;\n    }\n\n    this.sourceElement.scrollTop = this.initialScrollTop;\n    this.sourceElement.scrollLeft = this.initialScrollLeft;\n    if (this.sourceElement.firstElementChild) {\n      this.sourceElement.firstElementChild.scrollTop = this.initialScrollTop;\n      this.sourceElement.firstElementChild.scrollLeft = this.initialScrollLeft;\n    }\n  };\n\n  /** The document's click event handler to override in the host component if necessary. */\n  private documentClicked = (event: MouseEvent) => {\n    if (!this.host.keepOpenOnOutsideClick) {\n      const target = event.composed ? event.composedPath() : [event.target];\n      const isInsideClick: boolean =\n        target.includes(this.host) ||\n        (this.target !== undefined && target.includes(this.target));\n      if (isInsideClick) {\n        return;\n      } else {\n        this.host.hide();\n      }\n    }\n  };\n\n  /** The document's scroll event handler to override in the host component if necessary. */\n  private handleScroll = (event: Event) => {\n    switch (this.host.scrollStrategy) {\n      case 'scroll':\n        break;\n      case 'block':\n        this.blockScroll(event);\n        break;\n      case 'close':\n        this.host.hide();\n        break;\n    }\n  };\n}\n"]}